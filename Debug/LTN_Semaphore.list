
LTN_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae28  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800af38  0800af38  0000bf38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b370  0800b370  0000d1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b370  0800b370  0000c370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b378  0800b378  0000d1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b378  0800b378  0000c378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b37c  0800b37c  0000c37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b380  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d4  200001ec  0800b56c  0000d1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014c0  0800b56c  0000d4c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198d2  00000000  00000000  0000d215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d79  00000000  00000000  00026ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  0002a860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000118b  00000000  00000000  0002bee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b942  00000000  00000000  0002d06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b69e  00000000  00000000  000489ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c2a7  00000000  00000000  0006404b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001002f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007054  00000000  00000000  00100338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0010738c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800af20 	.word	0x0800af20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800af20 	.word	0x0800af20

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__gesf2>:
 8000ca4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ca8:	e006      	b.n	8000cb8 <__cmpsf2+0x4>
 8000caa:	bf00      	nop

08000cac <__lesf2>:
 8000cac:	f04f 0c01 	mov.w	ip, #1
 8000cb0:	e002      	b.n	8000cb8 <__cmpsf2+0x4>
 8000cb2:	bf00      	nop

08000cb4 <__cmpsf2>:
 8000cb4:	f04f 0c01 	mov.w	ip, #1
 8000cb8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc8:	bf18      	it	ne
 8000cca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cce:	d011      	beq.n	8000cf4 <__cmpsf2+0x40>
 8000cd0:	b001      	add	sp, #4
 8000cd2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cd6:	bf18      	it	ne
 8000cd8:	ea90 0f01 	teqne	r0, r1
 8000cdc:	bf58      	it	pl
 8000cde:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ce2:	bf88      	it	hi
 8000ce4:	17c8      	asrhi	r0, r1, #31
 8000ce6:	bf38      	it	cc
 8000ce8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cec:	bf18      	it	ne
 8000cee:	f040 0001 	orrne.w	r0, r0, #1
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	d102      	bne.n	8000d00 <__cmpsf2+0x4c>
 8000cfa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cfe:	d105      	bne.n	8000d0c <__cmpsf2+0x58>
 8000d00:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d04:	d1e4      	bne.n	8000cd0 <__cmpsf2+0x1c>
 8000d06:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d0a:	d0e1      	beq.n	8000cd0 <__cmpsf2+0x1c>
 8000d0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <__aeabi_cfrcmple>:
 8000d14:	4684      	mov	ip, r0
 8000d16:	4608      	mov	r0, r1
 8000d18:	4661      	mov	r1, ip
 8000d1a:	e7ff      	b.n	8000d1c <__aeabi_cfcmpeq>

08000d1c <__aeabi_cfcmpeq>:
 8000d1c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d1e:	f7ff ffc9 	bl	8000cb4 <__cmpsf2>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	bf48      	it	mi
 8000d26:	f110 0f00 	cmnmi.w	r0, #0
 8000d2a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d2c <__aeabi_fcmpeq>:
 8000d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d30:	f7ff fff4 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d34:	bf0c      	ite	eq
 8000d36:	2001      	moveq	r0, #1
 8000d38:	2000      	movne	r0, #0
 8000d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3e:	bf00      	nop

08000d40 <__aeabi_fcmplt>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff ffea 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d48:	bf34      	ite	cc
 8000d4a:	2001      	movcc	r0, #1
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_fcmple>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffe0 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d5c:	bf94      	ite	ls
 8000d5e:	2001      	movls	r0, #1
 8000d60:	2000      	movhi	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_fcmpge>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffd2 	bl	8000d14 <__aeabi_cfrcmple>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_fcmpgt>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffc8 	bl	8000d14 <__aeabi_cfrcmple>
 8000d84:	bf34      	ite	cc
 8000d86:	2001      	movcc	r0, #1
 8000d88:	2000      	movcs	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_f2iz>:
 8000d90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d94:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d98:	d30f      	bcc.n	8000dba <__aeabi_f2iz+0x2a>
 8000d9a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000da2:	d90d      	bls.n	8000dc0 <__aeabi_f2iz+0x30>
 8000da4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000da8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000dac:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000db0:	fa23 f002 	lsr.w	r0, r3, r2
 8000db4:	bf18      	it	ne
 8000db6:	4240      	negne	r0, r0
 8000db8:	4770      	bx	lr
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	4770      	bx	lr
 8000dc0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000dc4:	d101      	bne.n	8000dca <__aeabi_f2iz+0x3a>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	d105      	bne.n	8000dd6 <__aeabi_f2iz+0x46>
 8000dca:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000dce:	bf08      	it	eq
 8000dd0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f04f 0000 	mov.w	r0, #0
 8000dda:	4770      	bx	lr

08000ddc <__aeabi_f2uiz>:
 8000ddc:	0042      	lsls	r2, r0, #1
 8000dde:	d20e      	bcs.n	8000dfe <__aeabi_f2uiz+0x22>
 8000de0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000de4:	d30b      	bcc.n	8000dfe <__aeabi_f2uiz+0x22>
 8000de6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000dea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dee:	d409      	bmi.n	8000e04 <__aeabi_f2uiz+0x28>
 8000df0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000df4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000df8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dfc:	4770      	bx	lr
 8000dfe:	f04f 0000 	mov.w	r0, #0
 8000e02:	4770      	bx	lr
 8000e04:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e08:	d101      	bne.n	8000e0e <__aeabi_f2uiz+0x32>
 8000e0a:	0242      	lsls	r2, r0, #9
 8000e0c:	d102      	bne.n	8000e14 <__aeabi_f2uiz+0x38>
 8000e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e12:	4770      	bx	lr
 8000e14:	f04f 0000 	mov.w	r0, #0
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4a06      	ldr	r2, [pc, #24]	@ (8000e44 <vApplicationGetIdleTaskMemory+0x28>)
 8000e2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	4a05      	ldr	r2, [pc, #20]	@ (8000e48 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2280      	movs	r2, #128	@ 0x80
 8000e38:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	20000208 	.word	0x20000208
 8000e48:	200002a8 	.word	0x200002a8

08000e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e4c:	b5b0      	push	{r4, r5, r7, lr}
 8000e4e:	b098      	sub	sp, #96	@ 0x60
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e52:	f001 fa3d 	bl	80022d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e56:	f000 f86f 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5a:	f000 f96d 	bl	8001138 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e5e:	f000 f8c7 	bl	8000ff0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e62:	f000 f8f3 	bl	800104c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000e66:	f000 f93d 	bl	80010e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4928      	ldr	r1, [pc, #160]	@ (8000f10 <main+0xc4>)
 8000e6e:	4829      	ldr	r0, [pc, #164]	@ (8000f14 <main+0xc8>)
 8000e70:	f004 f869 	bl	8004f46 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim2);
 8000e74:	4828      	ldr	r0, [pc, #160]	@ (8000f18 <main+0xcc>)
 8000e76:	f003 fb9b 	bl	80045b0 <HAL_TIM_Base_Start>
  lcd_init();
 8000e7a:	f001 f9d6 	bl	800222a <lcd_init>
  //Set_Time (00, 26, 11, 31, 31, 5, 1976);
  /* USER CODE END 2 */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem */
  osSemaphoreDef(myBinarySem);
 8000e7e:	2300      	movs	r3, #0
 8000e80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000e82:	2300      	movs	r3, #0
 8000e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  myBinarySemHandle = osSemaphoreCreate(osSemaphore(myBinarySem), 1);
 8000e86:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fe8e 	bl	8005bae <osSemaphoreCreate>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4a21      	ldr	r2, [pc, #132]	@ (8000f1c <main+0xd0>)
 8000e96:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of SensorTask */
  osThreadDef(SensorTask, StartSensorTask, osPriorityNormal, 0, 128);
 8000e98:	4b21      	ldr	r3, [pc, #132]	@ (8000f20 <main+0xd4>)
 8000e9a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000e9e:	461d      	mov	r5, r3
 8000ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ea8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8000eac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f004 fe1b 	bl	8005aee <osThreadCreate>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4a1a      	ldr	r2, [pc, #104]	@ (8000f24 <main+0xd8>)
 8000ebc:	6013      	str	r3, [r2, #0]

  /* definition and creation of ButtonTask */
  osThreadDef(CheckTask, StartCheckTask, osPriorityAboveNormal, 0, 128);
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <main+0xdc>)
 8000ec0:	f107 0420 	add.w	r4, r7, #32
 8000ec4:	461d      	mov	r5, r3
 8000ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CheckTaskHandle = osThreadCreate(osThread(CheckTask), NULL);
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 fe08 	bl	8005aee <osThreadCreate>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <main+0xe0>)
 8000ee2:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, UartTask, osPriorityHigh, 0, 128);
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <main+0xe4>)
 8000ee6:	1d3c      	adds	r4, r7, #4
 8000ee8:	461d      	mov	r5, r3
 8000eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f004 fdf7 	bl	8005aee <osThreadCreate>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <main+0xe8>)
 8000f04:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8000f06:	f004 fdeb 	bl	8005ae0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f0a:	bf00      	nop
 8000f0c:	e7fd      	b.n	8000f0a <main+0xbe>
 8000f0e:	bf00      	nop
 8000f10:	2000059c 	.word	0x2000059c
 8000f14:	20000544 	.word	0x20000544
 8000f18:	200004fc 	.word	0x200004fc
 8000f1c:	20000598 	.word	0x20000598
 8000f20:	0800af44 	.word	0x0800af44
 8000f24:	2000058c 	.word	0x2000058c
 8000f28:	0800af6c 	.word	0x0800af6c
 8000f2c:	20000590 	.word	0x20000590
 8000f30:	0800af94 	.word	0x0800af94
 8000f34:	20000594 	.word	0x20000594

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b094      	sub	sp, #80	@ 0x50
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f42:	2228      	movs	r2, #40	@ 0x28
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f007 fec1 	bl	8008cce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f76:	2301      	movs	r3, #1
 8000f78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f84:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 fdc8 	bl	8003b24 <HAL_RCC_OscConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0x66>
  {
	Error_Handler();
 8000f9a:	f000 fc15 	bl	80017c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9e:	230f      	movs	r3, #15
 8000fa0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 f834 	bl	8004028 <HAL_RCC_ClockConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fc6:	f000 fbff 	bl	80017c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000fce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fd2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 f9e4 	bl	80043a4 <HAL_RCCEx_PeriphCLKConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fe2:	f000 fbf1 	bl	80017c8 <Error_Handler>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3750      	adds	r7, #80	@ 0x50
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <MX_I2C1_Init+0x50>)
 8000ff6:	4a13      	ldr	r2, [pc, #76]	@ (8001044 <MX_I2C1_Init+0x54>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <MX_I2C1_Init+0x50>)
 8000ffc:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <MX_I2C1_Init+0x58>)
 8000ffe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <MX_I2C1_Init+0x50>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <MX_I2C1_Init+0x50>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <MX_I2C1_Init+0x50>)
 800100e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001012:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001014:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <MX_I2C1_Init+0x50>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <MX_I2C1_Init+0x50>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001020:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <MX_I2C1_Init+0x50>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <MX_I2C1_Init+0x50>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800102c:	4804      	ldr	r0, [pc, #16]	@ (8001040 <MX_I2C1_Init+0x50>)
 800102e:	f001 fd2f 	bl	8002a90 <HAL_I2C_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001038:	f000 fbc6 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200004a8 	.word	0x200004a8
 8001044:	40005400 	.word	0x40005400
 8001048:	00061a80 	.word	0x00061a80

0800104c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	463b      	mov	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001068:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <MX_TIM2_Init+0x94>)
 800106a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800106e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001070:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <MX_TIM2_Init+0x94>)
 8001072:	2247      	movs	r2, #71	@ 0x47
 8001074:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <MX_TIM2_Init+0x94>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800107c:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <MX_TIM2_Init+0x94>)
 800107e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001082:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	4b16      	ldr	r3, [pc, #88]	@ (80010e0 <MX_TIM2_Init+0x94>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <MX_TIM2_Init+0x94>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001090:	4813      	ldr	r0, [pc, #76]	@ (80010e0 <MX_TIM2_Init+0x94>)
 8001092:	f003 fa3d 	bl	8004510 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800109c:	f000 fb94 	bl	80017c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4619      	mov	r1, r3
 80010ac:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <MX_TIM2_Init+0x94>)
 80010ae:	f003 fc23 	bl	80048f8 <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010b8:	f000 fb86 	bl	80017c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_TIM2_Init+0x94>)
 80010ca:	f003 fdf9 	bl	8004cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010d4:	f000 fb78 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200004fc 	.word	0x200004fc

080010e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <MX_USART1_UART_Init+0x50>)
 80010ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 800111c:	f003 fe40 	bl	8004da0 <HAL_UART_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001126:	f000 fb4f 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000544 	.word	0x20000544
 8001134:	40013800 	.word	0x40013800

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	4b51      	ldr	r3, [pc, #324]	@ (8001294 <MX_GPIO_Init+0x15c>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a50      	ldr	r2, [pc, #320]	@ (8001294 <MX_GPIO_Init+0x15c>)
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b4e      	ldr	r3, [pc, #312]	@ (8001294 <MX_GPIO_Init+0x15c>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001164:	4b4b      	ldr	r3, [pc, #300]	@ (8001294 <MX_GPIO_Init+0x15c>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a4a      	ldr	r2, [pc, #296]	@ (8001294 <MX_GPIO_Init+0x15c>)
 800116a:	f043 0320 	orr.w	r3, r3, #32
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b48      	ldr	r3, [pc, #288]	@ (8001294 <MX_GPIO_Init+0x15c>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b45      	ldr	r3, [pc, #276]	@ (8001294 <MX_GPIO_Init+0x15c>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a44      	ldr	r2, [pc, #272]	@ (8001294 <MX_GPIO_Init+0x15c>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b42      	ldr	r3, [pc, #264]	@ (8001294 <MX_GPIO_Init+0x15c>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b3f      	ldr	r3, [pc, #252]	@ (8001294 <MX_GPIO_Init+0x15c>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a3e      	ldr	r2, [pc, #248]	@ (8001294 <MX_GPIO_Init+0x15c>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001294 <MX_GPIO_Init+0x15c>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b2:	4839      	ldr	r0, [pc, #228]	@ (8001298 <MX_GPIO_Init+0x160>)
 80011b4:	f001 fc3b 	bl	8002a2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2160      	movs	r1, #96	@ 0x60
 80011bc:	4837      	ldr	r0, [pc, #220]	@ (800129c <MX_GPIO_Init+0x164>)
 80011be:	f001 fc36 	bl	8002a2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80011c8:	4835      	ldr	r0, [pc, #212]	@ (80012a0 <MX_GPIO_Init+0x168>)
 80011ca:	f001 fc30 	bl	8002a2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2302      	movs	r3, #2
 80011de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	482c      	ldr	r0, [pc, #176]	@ (8001298 <MX_GPIO_Init+0x160>)
 80011e8:	f001 fa86 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011ec:	2302      	movs	r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011f0:	4b2c      	ldr	r3, [pc, #176]	@ (80012a4 <MX_GPIO_Init+0x16c>)
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4619      	mov	r1, r3
 80011fe:	4827      	ldr	r0, [pc, #156]	@ (800129c <MX_GPIO_Init+0x164>)
 8001200:	f001 fa7a 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001204:	2360      	movs	r3, #96	@ 0x60
 8001206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2302      	movs	r3, #2
 8001212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	4820      	ldr	r0, [pc, #128]	@ (800129c <MX_GPIO_Init+0x164>)
 800121c:	f001 fa6c 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001220:	2302      	movs	r3, #2
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	481b      	ldr	r0, [pc, #108]	@ (80012a0 <MX_GPIO_Init+0x168>)
 8001234:	f001 fa60 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001238:	2380      	movs	r3, #128	@ 0x80
 800123a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4619      	mov	r1, r3
 800124a:	4814      	ldr	r0, [pc, #80]	@ (800129c <MX_GPIO_Init+0x164>)
 800124c:	f001 fa54 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001250:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <MX_GPIO_Init+0x16c>)
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125a:	2301      	movs	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	4619      	mov	r1, r3
 8001264:	480e      	ldr	r0, [pc, #56]	@ (80012a0 <MX_GPIO_Init+0x168>)
 8001266:	f001 fa47 	bl	80026f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2107      	movs	r1, #7
 800126e:	2007      	movs	r0, #7
 8001270:	f001 f957 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001274:	2007      	movs	r0, #7
 8001276:	f001 f970 	bl	800255a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2106      	movs	r1, #6
 800127e:	2028      	movs	r0, #40	@ 0x28
 8001280:	f001 f94f 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001284:	2028      	movs	r0, #40	@ 0x28
 8001286:	f001 f968 	bl	800255a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800128a:	bf00      	nop
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	40011000 	.word	0x40011000
 800129c:	40010800 	.word	0x40010800
 80012a0:	40010c00 	.word	0x40010c00
 80012a4:	10210000 	.word	0x10210000

080012a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//Hàm ngắt khi có tín hiệu nút nhấn
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d114      	bne.n	80012e2 <HAL_GPIO_EXTI_Callback+0x3a>
	{
	//	for(int i = 500000; i>0; i--);
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 80012b8:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <HAL_GPIO_EXTI_Callback+0x98>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	615a      	str	r2, [r3, #20]
		HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80012be:	2006      	movs	r0, #6
 80012c0:	f001 f959 	bl	8002576 <HAL_NVIC_ClearPendingIRQ>
		mnt = !mnt;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <HAL_GPIO_EXTI_Callback+0x9c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HAL_GPIO_EXTI_Callback+0x9c>)
 80012d6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Tắt máy bơm
 80012d8:	2201      	movs	r2, #1
 80012da:	2120      	movs	r1, #32
 80012dc:	481a      	ldr	r0, [pc, #104]	@ (8001348 <HAL_GPIO_EXTI_Callback+0xa0>)
 80012de:	f001 fba6 	bl	8002a2e <HAL_GPIO_WritePin>
		}

	if(GPIO_Pin == GPIO_PIN_12)
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012e8:	d110      	bne.n	800130c <HAL_GPIO_EXTI_Callback+0x64>
	{
	//	for(int i = 500000; i>0; i--);
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <HAL_GPIO_EXTI_Callback+0x98>)
 80012ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012f0:	615a      	str	r2, [r3, #20]
		HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80012f2:	2006      	movs	r0, #6
 80012f4:	f001 f93f 	bl	8002576 <HAL_NVIC_ClearPendingIRQ>
		pb12 = !pb12;
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_GPIO_EXTI_Callback+0xa4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf0c      	ite	eq
 8001300:	2301      	moveq	r3, #1
 8001302:	2300      	movne	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	4b10      	ldr	r3, [pc, #64]	@ (800134c <HAL_GPIO_EXTI_Callback+0xa4>)
 800130a:	601a      	str	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_13)
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001312:	d110      	bne.n	8001336 <HAL_GPIO_EXTI_Callback+0x8e>
	{
	//	for(int i = 500000; i>0; i--);
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8001314:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <HAL_GPIO_EXTI_Callback+0x98>)
 8001316:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800131a:	615a      	str	r2, [r3, #20]
		HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 800131c:	2006      	movs	r0, #6
 800131e:	f001 f92a 	bl	8002576 <HAL_NVIC_ClearPendingIRQ>
		pb13 = !pb13;
 8001322:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001334:	601a      	str	r2, [r3, #0]
	}
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40010400 	.word	0x40010400
 8001344:	200005c0 	.word	0x200005c0
 8001348:	40010800 	.word	0x40010800
 800134c:	200005c4 	.word	0x200005c4
 8001350:	200005c8 	.word	0x200005c8

08001354 <HAL_UART_RxCpltCallback>:

//Hàm UART CALLBACK ở đây để ngắt mỗi khi có tín hiệu TỪ ESP chuyển trạng thái hay có tín hiệu chuyển relay
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <HAL_UART_RxCpltCallback+0x58>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d11e      	bne.n	80013a4 <HAL_UART_RxCpltCallback+0x50>
	{
//		Kiểm tra bit 1 để điều khiển bơm
		if (rx_data & (1 << 1)) {
 8001366:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <HAL_UART_RxCpltCallback+0x5c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_UART_RxCpltCallback+0x26>
			pb13 = 1;	// bật bơm
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <HAL_UART_RxCpltCallback+0x60>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e002      	b.n	8001380 <HAL_UART_RxCpltCallback+0x2c>
		} else {
			pb13 = 0;	// tắt bơm
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <HAL_UART_RxCpltCallback+0x60>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
		}

//		Kiểm tra bit 0 để điều khiển đèn
		if (rx_data & (1 << 0)) {
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_UART_RxCpltCallback+0x5c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_UART_RxCpltCallback+0x40>
			pb12 = 1;	// bật đèn
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <HAL_UART_RxCpltCallback+0x64>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e002      	b.n	800139a <HAL_UART_RxCpltCallback+0x46>
		} else {
			pb12 = 0;	// tắt đèn
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <HAL_UART_RxCpltCallback+0x64>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(huart, &rx_data, 1);
 800139a:	2201      	movs	r2, #1
 800139c:	4904      	ldr	r1, [pc, #16]	@ (80013b0 <HAL_UART_RxCpltCallback+0x5c>)
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f003 fdd1 	bl	8004f46 <HAL_UART_Receive_IT>
	}
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40013800 	.word	0x40013800
 80013b0:	2000059c 	.word	0x2000059c
 80013b4:	200005c8 	.word	0x200005c8
 80013b8:	200005c4 	.word	0x200005c4

080013bc <StartSensorTask>:
/* USER CODE END 4 */


/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
	osSemaphoreWait(myBinarySemHandle, osWaitForever);
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <StartSensorTask+0x74>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295
 80013cc:	4618      	mov	r0, r3
 80013ce:	f004 fc21 	bl	8005c14 <osSemaphoreWait>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); //CÁI NÀY LÀ ĐỂ KHI NẠP CODE NHẬN BIẾT CÓ CHẠY VÀO TASK HAY CHƯA
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013d8:	4816      	ldr	r0, [pc, #88]	@ (8001434 <StartSensorTask+0x78>)
 80013da:	f001 fb28 	bl	8002a2e <HAL_GPIO_WritePin>

	DHT11_Read_Data(&Temperature, &Humidity);
 80013de:	4916      	ldr	r1, [pc, #88]	@ (8001438 <StartSensorTask+0x7c>)
 80013e0:	4816      	ldr	r0, [pc, #88]	@ (800143c <StartSensorTask+0x80>)
 80013e2:	f000 fd19 	bl	8001e18 <DHT11_Read_Data>

	Display_Temp(Temperature);
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <StartSensorTask+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fd50 	bl	8001e90 <Display_Temp>
	Display_Rh(Humidity);
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <StartSensorTask+0x7c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fdaf 	bl	8001f58 <Display_Rh>

//	Rain Sensor
	rain = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80013fa:	2102      	movs	r1, #2
 80013fc:	4810      	ldr	r0, [pc, #64]	@ (8001440 <StartSensorTask+0x84>)
 80013fe:	f001 faff 	bl	8002a00 <HAL_GPIO_ReadPin>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <StartSensorTask+0x88>)
 8001408:	601a      	str	r2, [r3, #0]

//	Moisture Sensor
	moi = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 800140a:	2180      	movs	r1, #128	@ 0x80
 800140c:	480e      	ldr	r0, [pc, #56]	@ (8001448 <StartSensorTask+0x8c>)
 800140e:	f001 faf7 	bl	8002a00 <HAL_GPIO_ReadPin>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <StartSensorTask+0x90>)
 8001418:	601a      	str	r2, [r3, #0]

	osSemaphoreRelease(myBinarySemHandle);
 800141a:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <StartSensorTask+0x74>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f004 fc46 	bl	8005cb0 <osSemaphoreRelease>
    osDelay(100);
 8001424:	2064      	movs	r0, #100	@ 0x64
 8001426:	f004 fbae 	bl	8005b86 <osDelay>
	osSemaphoreWait(myBinarySemHandle, osWaitForever);
 800142a:	bf00      	nop
 800142c:	e7ca      	b.n	80013c4 <StartSensorTask+0x8>
 800142e:	bf00      	nop
 8001430:	20000598 	.word	0x20000598
 8001434:	40011000 	.word	0x40011000
 8001438:	200005d4 	.word	0x200005d4
 800143c:	200005d0 	.word	0x200005d0
 8001440:	40010c00 	.word	0x40010c00
 8001444:	20000000 	.word	0x20000000
 8001448:	40010800 	.word	0x40010800
 800144c:	200005cc 	.word	0x200005cc

08001450 <StartCheckTask>:
}


/* USER CODE END Header_StartButtonTask */
void StartCheckTask(void const * argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af04      	add	r7, sp, #16
 8001456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myBinarySemHandle, osWaitForever);
 8001458:	4b81      	ldr	r3, [pc, #516]	@ (8001660 <StartCheckTask+0x210>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	4618      	mov	r0, r3
 8001462:	f004 fbd7 	bl	8005c14 <osSemaphoreWait>
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); //CÁI NÀY LÀ ĐỂ KHI NẠP CODE NHẬN BIẾT CÓ CHẠY VÀO TASK HAY CHƯA
	  Get_Time(&sec,&min,&hour,&day,&date,&month,&year);
 8001466:	4b7f      	ldr	r3, [pc, #508]	@ (8001664 <StartCheckTask+0x214>)
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	4b7f      	ldr	r3, [pc, #508]	@ (8001668 <StartCheckTask+0x218>)
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	4b7f      	ldr	r3, [pc, #508]	@ (800166c <StartCheckTask+0x21c>)
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	4b7f      	ldr	r3, [pc, #508]	@ (8001670 <StartCheckTask+0x220>)
 8001474:	4a7f      	ldr	r2, [pc, #508]	@ (8001674 <StartCheckTask+0x224>)
 8001476:	4980      	ldr	r1, [pc, #512]	@ (8001678 <StartCheckTask+0x228>)
 8001478:	4880      	ldr	r0, [pc, #512]	@ (800167c <StartCheckTask+0x22c>)
 800147a:	f000 fe03 	bl	8002084 <Get_Time>
	  sprintf (buffer, "%02d:%02d", hour, min);
 800147e:	4b7d      	ldr	r3, [pc, #500]	@ (8001674 <StartCheckTask+0x224>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b7c      	ldr	r3, [pc, #496]	@ (8001678 <StartCheckTask+0x228>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	497d      	ldr	r1, [pc, #500]	@ (8001680 <StartCheckTask+0x230>)
 800148a:	487e      	ldr	r0, [pc, #504]	@ (8001684 <StartCheckTask+0x234>)
 800148c:	f007 fbbc 	bl	8008c08 <siprintf>
	  lcd_put_cur (0,1);
 8001490:	2101      	movs	r1, #1
 8001492:	2000      	movs	r0, #0
 8001494:	f000 feaa 	bl	80021ec <lcd_put_cur>
	  lcd_send_string(buffer);
 8001498:	487a      	ldr	r0, [pc, #488]	@ (8001684 <StartCheckTask+0x234>)
 800149a:	f000 ff03 	bl	80022a4 <lcd_send_string>
	  sprintf (buffer, "%02d-%02d-%02d", date, month, year);
 800149e:	4b73      	ldr	r3, [pc, #460]	@ (800166c <StartCheckTask+0x21c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b70      	ldr	r3, [pc, #448]	@ (8001668 <StartCheckTask+0x218>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4b6e      	ldr	r3, [pc, #440]	@ (8001664 <StartCheckTask+0x214>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	460b      	mov	r3, r1
 80014b2:	4975      	ldr	r1, [pc, #468]	@ (8001688 <StartCheckTask+0x238>)
 80014b4:	4873      	ldr	r0, [pc, #460]	@ (8001684 <StartCheckTask+0x234>)
 80014b6:	f007 fba7 	bl	8008c08 <siprintf>
	  lcd_put_cur(0, 8);
 80014ba:	2108      	movs	r1, #8
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 fe95 	bl	80021ec <lcd_put_cur>
	  lcd_send_string(buffer);
 80014c2:	4870      	ldr	r0, [pc, #448]	@ (8001684 <StartCheckTask+0x234>)
 80014c4:	f000 feee 	bl	80022a4 <lcd_send_string>

//	  Case tưới bằng sensor
	  if(mnt == 0)
 80014c8:	4b70      	ldr	r3, [pc, #448]	@ (800168c <StartCheckTask+0x23c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d168      	bne.n	80015a2 <StartCheckTask+0x152>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014d6:	486e      	ldr	r0, [pc, #440]	@ (8001690 <StartCheckTask+0x240>)
 80014d8:	f001 faa9 	bl	8002a2e <HAL_GPIO_WritePin>
		  if (pb13 == 0) {
 80014dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001694 <StartCheckTask+0x244>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d143      	bne.n	800156c <StartCheckTask+0x11c>
			if (Temperature > 35 || Humidity < 50) {
 80014e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001698 <StartCheckTask+0x248>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	496c      	ldr	r1, [pc, #432]	@ (800169c <StartCheckTask+0x24c>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fc46 	bl	8000d7c <__aeabi_fcmpgt>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d108      	bne.n	8001508 <StartCheckTask+0xb8>
 80014f6:	4b6a      	ldr	r3, [pc, #424]	@ (80016a0 <StartCheckTask+0x250>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	496a      	ldr	r1, [pc, #424]	@ (80016a4 <StartCheckTask+0x254>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fc1f 	bl	8000d40 <__aeabi_fcmplt>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d004      	beq.n	8001512 <StartCheckTask+0xc2>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Bật máy bơm
 8001508:	2200      	movs	r2, #0
 800150a:	2120      	movs	r1, #32
 800150c:	4866      	ldr	r0, [pc, #408]	@ (80016a8 <StartCheckTask+0x258>)
 800150e:	f001 fa8e 	bl	8002a2e <HAL_GPIO_WritePin>
			}
			if (moi == 1) {
 8001512:	4b66      	ldr	r3, [pc, #408]	@ (80016ac <StartCheckTask+0x25c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d104      	bne.n	8001524 <StartCheckTask+0xd4>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Bật máy bơm
 800151a:	2200      	movs	r2, #0
 800151c:	2120      	movs	r1, #32
 800151e:	4862      	ldr	r0, [pc, #392]	@ (80016a8 <StartCheckTask+0x258>)
 8001520:	f001 fa85 	bl	8002a2e <HAL_GPIO_WritePin>
			}
			if (rain == 0) {
 8001524:	4b62      	ldr	r3, [pc, #392]	@ (80016b0 <StartCheckTask+0x260>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d104      	bne.n	8001536 <StartCheckTask+0xe6>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Tắt máy bơm
 800152c:	2201      	movs	r2, #1
 800152e:	2120      	movs	r1, #32
 8001530:	485d      	ldr	r0, [pc, #372]	@ (80016a8 <StartCheckTask+0x258>)
 8001532:	f001 fa7c 	bl	8002a2e <HAL_GPIO_WritePin>
			}
			if (Temperature <= 35 && Humidity >= 50 && moi == 0){
 8001536:	4b58      	ldr	r3, [pc, #352]	@ (8001698 <StartCheckTask+0x248>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4958      	ldr	r1, [pc, #352]	@ (800169c <StartCheckTask+0x24c>)
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fc09 	bl	8000d54 <__aeabi_fcmple>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d011      	beq.n	800156c <StartCheckTask+0x11c>
 8001548:	4b55      	ldr	r3, [pc, #340]	@ (80016a0 <StartCheckTask+0x250>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4955      	ldr	r1, [pc, #340]	@ (80016a4 <StartCheckTask+0x254>)
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fc0a 	bl	8000d68 <__aeabi_fcmpge>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d008      	beq.n	800156c <StartCheckTask+0x11c>
 800155a:	4b54      	ldr	r3, [pc, #336]	@ (80016ac <StartCheckTask+0x25c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d104      	bne.n	800156c <StartCheckTask+0x11c>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Tắt máy bơm
 8001562:	2201      	movs	r2, #1
 8001564:	2120      	movs	r1, #32
 8001566:	4850      	ldr	r0, [pc, #320]	@ (80016a8 <StartCheckTask+0x258>)
 8001568:	f001 fa61 	bl	8002a2e <HAL_GPIO_WritePin>
			}
		  }
			if (pb12 == 1) {
 800156c:	4b51      	ldr	r3, [pc, #324]	@ (80016b4 <StartCheckTask+0x264>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d104      	bne.n	800157e <StartCheckTask+0x12e>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Bật LED PA6
 8001574:	2200      	movs	r2, #0
 8001576:	2140      	movs	r1, #64	@ 0x40
 8001578:	484b      	ldr	r0, [pc, #300]	@ (80016a8 <StartCheckTask+0x258>)
 800157a:	f001 fa58 	bl	8002a2e <HAL_GPIO_WritePin>
			}
			if (pb12 == 0) {
 800157e:	4b4d      	ldr	r3, [pc, #308]	@ (80016b4 <StartCheckTask+0x264>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d104      	bne.n	8001590 <StartCheckTask+0x140>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //Off LED PA6
 8001586:	2201      	movs	r2, #1
 8001588:	2140      	movs	r1, #64	@ 0x40
 800158a:	4847      	ldr	r0, [pc, #284]	@ (80016a8 <StartCheckTask+0x258>)
 800158c:	f001 fa4f 	bl	8002a2e <HAL_GPIO_WritePin>
			}
			// Kiểm tra trạng thái của biến pb13
			if (pb13 == 1) {
 8001590:	4b40      	ldr	r3, [pc, #256]	@ (8001694 <StartCheckTask+0x244>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d104      	bne.n	80015a2 <StartCheckTask+0x152>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // bật máy bơm PA5
 8001598:	2200      	movs	r2, #0
 800159a:	2120      	movs	r1, #32
 800159c:	4842      	ldr	r0, [pc, #264]	@ (80016a8 <StartCheckTask+0x258>)
 800159e:	f001 fa46 	bl	8002a2e <HAL_GPIO_WritePin>
			}
	  }


		  	  //Case tưới bằng hẹn giờ
		  if (mnt == 1){
 80015a2:	4b3a      	ldr	r3, [pc, #232]	@ (800168c <StartCheckTask+0x23c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d151      	bne.n	800164e <StartCheckTask+0x1fe>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015b0:	4837      	ldr	r0, [pc, #220]	@ (8001690 <StartCheckTask+0x240>)
 80015b2:	f001 fa3c 	bl	8002a2e <HAL_GPIO_WritePin>
			  if (pb13 == 0) {
 80015b6:	4b37      	ldr	r3, [pc, #220]	@ (8001694 <StartCheckTask+0x244>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d118      	bne.n	80015f0 <StartCheckTask+0x1a0>
				  if (hour == scheduled_hour && min == scheduled_min) {
 80015be:	4b2d      	ldr	r3, [pc, #180]	@ (8001674 <StartCheckTask+0x224>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b3c      	ldr	r3, [pc, #240]	@ (80016b8 <StartCheckTask+0x268>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d10c      	bne.n	80015e6 <StartCheckTask+0x196>
 80015cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <StartCheckTask+0x228>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b3a      	ldr	r3, [pc, #232]	@ (80016bc <StartCheckTask+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d105      	bne.n	80015e6 <StartCheckTask+0x196>
					  // Bật LED
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //Bật máy bơm
 80015da:	2200      	movs	r2, #0
 80015dc:	2120      	movs	r1, #32
 80015de:	4832      	ldr	r0, [pc, #200]	@ (80016a8 <StartCheckTask+0x258>)
 80015e0:	f001 fa25 	bl	8002a2e <HAL_GPIO_WritePin>
 80015e4:	e004      	b.n	80015f0 <StartCheckTask+0x1a0>
				  }
				  else {
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Tắt máy bơm
 80015e6:	2201      	movs	r2, #1
 80015e8:	2120      	movs	r1, #32
 80015ea:	482f      	ldr	r0, [pc, #188]	@ (80016a8 <StartCheckTask+0x258>)
 80015ec:	f001 fa1f 	bl	8002a2e <HAL_GPIO_WritePin>
				  }
			  }
			  if (pb12 == 0) {
 80015f0:	4b30      	ldr	r3, [pc, #192]	@ (80016b4 <StartCheckTask+0x264>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d118      	bne.n	800162a <StartCheckTask+0x1da>
		  		         // Bật đèn nếu giờ hiện tại từ 18:00 đến 06:00
		  		     if (hour >= light_on_hour || hour <= light_off_hour) {
 80015f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <StartCheckTask+0x224>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <StartCheckTask+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	da06      	bge.n	8001614 <StartCheckTask+0x1c4>
 8001606:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <StartCheckTask+0x224>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	4b2d      	ldr	r3, [pc, #180]	@ (80016c4 <StartCheckTask+0x274>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	dc05      	bgt.n	8001620 <StartCheckTask+0x1d0>
		  		    	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Bật đèn
 8001614:	2200      	movs	r2, #0
 8001616:	2140      	movs	r1, #64	@ 0x40
 8001618:	4823      	ldr	r0, [pc, #140]	@ (80016a8 <StartCheckTask+0x258>)
 800161a:	f001 fa08 	bl	8002a2e <HAL_GPIO_WritePin>
 800161e:	e004      	b.n	800162a <StartCheckTask+0x1da>
		  		         } else {
		              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // Tắt đèn
 8001620:	2201      	movs	r2, #1
 8001622:	2140      	movs	r1, #64	@ 0x40
 8001624:	4820      	ldr	r0, [pc, #128]	@ (80016a8 <StartCheckTask+0x258>)
 8001626:	f001 fa02 	bl	8002a2e <HAL_GPIO_WritePin>
		    }
			  }
		    // Kiểm tra trạng thái của biến pb12
		    if (pb12 == 1) {
 800162a:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <StartCheckTask+0x264>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d104      	bne.n	800163c <StartCheckTask+0x1ec>
		        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Bật LED PA6
 8001632:	2200      	movs	r2, #0
 8001634:	2140      	movs	r1, #64	@ 0x40
 8001636:	481c      	ldr	r0, [pc, #112]	@ (80016a8 <StartCheckTask+0x258>)
 8001638:	f001 f9f9 	bl	8002a2e <HAL_GPIO_WritePin>
		    }
		    // Kiểm tra trạng thái của biến pb13
		    if (pb13 == 1) {
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <StartCheckTask+0x244>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d104      	bne.n	800164e <StartCheckTask+0x1fe>
		        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Bật máy bơm PA5
 8001644:	2200      	movs	r2, #0
 8001646:	2120      	movs	r1, #32
 8001648:	4817      	ldr	r0, [pc, #92]	@ (80016a8 <StartCheckTask+0x258>)
 800164a:	f001 f9f0 	bl	8002a2e <HAL_GPIO_WritePin>
		    }
		  }
	osSemaphoreRelease(myBinarySemHandle);
 800164e:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <StartCheckTask+0x210>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f004 fb2c 	bl	8005cb0 <osSemaphoreRelease>
	osDelay(100);
 8001658:	2064      	movs	r0, #100	@ 0x64
 800165a:	f004 fa94 	bl	8005b86 <osDelay>
	  osSemaphoreWait(myBinarySemHandle, osWaitForever);
 800165e:	e6fb      	b.n	8001458 <StartCheckTask+0x8>
 8001660:	20000598 	.word	0x20000598
 8001664:	200005bd 	.word	0x200005bd
 8001668:	200005bc 	.word	0x200005bc
 800166c:	200005bb 	.word	0x200005bb
 8001670:	200005ba 	.word	0x200005ba
 8001674:	200005b9 	.word	0x200005b9
 8001678:	200005b8 	.word	0x200005b8
 800167c:	200005b7 	.word	0x200005b7
 8001680:	0800afb0 	.word	0x0800afb0
 8001684:	200005a8 	.word	0x200005a8
 8001688:	0800afbc 	.word	0x0800afbc
 800168c:	200005c0 	.word	0x200005c0
 8001690:	40011000 	.word	0x40011000
 8001694:	200005c8 	.word	0x200005c8
 8001698:	200005d0 	.word	0x200005d0
 800169c:	420c0000 	.word	0x420c0000
 80016a0:	200005d4 	.word	0x200005d4
 80016a4:	42480000 	.word	0x42480000
 80016a8:	40010800 	.word	0x40010800
 80016ac:	200005cc 	.word	0x200005cc
 80016b0:	20000000 	.word	0x20000000
 80016b4:	200005c4 	.word	0x200005c4
 80016b8:	2000000c 	.word	0x2000000c
 80016bc:	20000010 	.word	0x20000010
 80016c0:	20000004 	.word	0x20000004
 80016c4:	20000008 	.word	0x20000008

080016c8 <UartTask>:
  /* USER CODE END StartButtonTask */
}

/* USER CODE END Header_UartTask */
void UartTask(void const * argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UartTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myBinarySemHandle, osWaitForever);
 80016d0:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <UartTask+0xb4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 fa9b 	bl	8005c14 <osSemaphoreWait>
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); //CÁI NÀY LÀ ĐỂ KHI NẠP CODE NHẬN BIẾT CÓ CHẠY VÀO TASK HAY CHƯA
//	  HAL_UART_Receive_IT(&huart1, &rx_data, 1);

//	  PHẦN NÀY LÀ PHẦN GỬI DATA LÊN ESP
	  frame[0] = 0x02; // 0x02 là byte nhận dạng chuỗi
 80016de:	4b28      	ldr	r3, [pc, #160]	@ (8001780 <UartTask+0xb8>)
 80016e0:	2202      	movs	r2, #2
 80016e2:	701a      	strb	r2, [r3, #0]
	  frame[1] = (uint8_t)Humidity; // Byte chứa giá trị độ ẩm
 80016e4:	4b27      	ldr	r3, [pc, #156]	@ (8001784 <UartTask+0xbc>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fb77 	bl	8000ddc <__aeabi_f2uiz>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <UartTask+0xb8>)
 80016f4:	705a      	strb	r2, [r3, #1]
	  frame[2] = (uint8_t)Temperature; // Byte chứa giá trị nhiệt độ
 80016f6:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <UartTask+0xc0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fb6e 	bl	8000ddc <__aeabi_f2uiz>
 8001700:	4603      	mov	r3, r0
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <UartTask+0xb8>)
 8001706:	709a      	strb	r2, [r3, #2]

	  // Đọc trạng thái các chân GPIO
	  pump_status = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8001708:	2120      	movs	r1, #32
 800170a:	4820      	ldr	r0, [pc, #128]	@ (800178c <UartTask+0xc4>)
 800170c:	f001 f978 	bl	8002a00 <HAL_GPIO_ReadPin>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b1e      	ldr	r3, [pc, #120]	@ (8001790 <UartTask+0xc8>)
 8001716:	701a      	strb	r2, [r3, #0]
	  led_status = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8001718:	2140      	movs	r1, #64	@ 0x40
 800171a:	481c      	ldr	r0, [pc, #112]	@ (800178c <UartTask+0xc4>)
 800171c:	f001 f970 	bl	8002a00 <HAL_GPIO_ReadPin>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <UartTask+0xcc>)
 8001726:	701a      	strb	r2, [r3, #0]

	  frame[3] = (pump_status << 3) | (led_status << 2) | (moi << 1) | rain; // Byte chứa trạng thái bơm, led, độ ẩm đất, mưa
 8001728:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <UartTask+0xc8>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	b25a      	sxtb	r2, r3
 8001730:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <UartTask+0xcc>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	b25b      	sxtb	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b25a      	sxtb	r2, r3
 800173c:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <UartTask+0xd0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	b25b      	sxtb	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b25a      	sxtb	r2, r3
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <UartTask+0xd4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	b25b      	sxtb	r3, r3
 800174e:	4313      	orrs	r3, r2
 8001750:	b25b      	sxtb	r3, r3
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <UartTask+0xb8>)
 8001756:	70da      	strb	r2, [r3, #3]

	  // Gửi frame qua UART
	  HAL_UART_Transmit(&huart1, frame, sizeof(frame), HAL_MAX_DELAY);
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	2204      	movs	r2, #4
 800175e:	4908      	ldr	r1, [pc, #32]	@ (8001780 <UartTask+0xb8>)
 8001760:	480f      	ldr	r0, [pc, #60]	@ (80017a0 <UartTask+0xd8>)
 8001762:	f003 fb6d 	bl	8004e40 <HAL_UART_Transmit>

	  osSemaphoreRelease(myBinarySemHandle);
 8001766:	4b05      	ldr	r3, [pc, #20]	@ (800177c <UartTask+0xb4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f004 faa0 	bl	8005cb0 <osSemaphoreRelease>
	  osDelay(1000);
 8001770:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001774:	f004 fa07 	bl	8005b86 <osDelay>
	  osSemaphoreWait(myBinarySemHandle, osWaitForever);
 8001778:	bf00      	nop
 800177a:	e7a9      	b.n	80016d0 <UartTask+0x8>
 800177c:	20000598 	.word	0x20000598
 8001780:	200005a0 	.word	0x200005a0
 8001784:	200005d4 	.word	0x200005d4
 8001788:	200005d0 	.word	0x200005d0
 800178c:	40010800 	.word	0x40010800
 8001790:	200005a4 	.word	0x200005a4
 8001794:	200005a5 	.word	0x200005a5
 8001798:	200005cc 	.word	0x200005cc
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000544 	.word	0x20000544

080017a4 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END UartTask */
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017b6:	f000 fda1 	bl	80022fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40012c00 	.word	0x40012c00

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
}
 80017ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <Error_Handler+0x8>

080017d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017da:	4b18      	ldr	r3, [pc, #96]	@ (800183c <HAL_MspInit+0x68>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	4a17      	ldr	r2, [pc, #92]	@ (800183c <HAL_MspInit+0x68>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6193      	str	r3, [r2, #24]
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <HAL_MspInit+0x68>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_MspInit+0x68>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a11      	ldr	r2, [pc, #68]	@ (800183c <HAL_MspInit+0x68>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_MspInit+0x68>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	210f      	movs	r1, #15
 800180e:	f06f 0001 	mvn.w	r0, #1
 8001812:	f000 fe86 	bl	8002522 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001816:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <HAL_MspInit+0x6c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <HAL_MspInit+0x6c>)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	40010000 	.word	0x40010000

08001844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a15      	ldr	r2, [pc, #84]	@ (80018b4 <HAL_I2C_MspInit+0x70>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d123      	bne.n	80018ac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <HAL_I2C_MspInit+0x74>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a13      	ldr	r2, [pc, #76]	@ (80018b8 <HAL_I2C_MspInit+0x74>)
 800186a:	f043 0308 	orr.w	r3, r3, #8
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <HAL_I2C_MspInit+0x74>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800187c:	23c0      	movs	r3, #192	@ 0xc0
 800187e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001880:	2312      	movs	r3, #18
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	4619      	mov	r1, r3
 800188e:	480b      	ldr	r0, [pc, #44]	@ (80018bc <HAL_I2C_MspInit+0x78>)
 8001890:	f000 ff32 	bl	80026f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <HAL_I2C_MspInit+0x74>)
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	4a07      	ldr	r2, [pc, #28]	@ (80018b8 <HAL_I2C_MspInit+0x74>)
 800189a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800189e:	61d3      	str	r3, [r2, #28]
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_I2C_MspInit+0x74>)
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40005400 	.word	0x40005400
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010c00 	.word	0x40010c00

080018c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018d0:	d10b      	bne.n	80018ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <HAL_TIM_Base_MspInit+0x34>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a07      	ldr	r2, [pc, #28]	@ (80018f4 <HAL_TIM_Base_MspInit+0x34>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_TIM_Base_MspInit+0x34>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a20      	ldr	r2, [pc, #128]	@ (8001994 <HAL_UART_MspInit+0x9c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d139      	bne.n	800198c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001918:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <HAL_UART_MspInit+0xa0>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a1e      	ldr	r2, [pc, #120]	@ (8001998 <HAL_UART_MspInit+0xa0>)
 800191e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <HAL_UART_MspInit+0xa0>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_UART_MspInit+0xa0>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a18      	ldr	r2, [pc, #96]	@ (8001998 <HAL_UART_MspInit+0xa0>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <HAL_UART_MspInit+0xa0>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800194c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4619      	mov	r1, r3
 800195c:	480f      	ldr	r0, [pc, #60]	@ (800199c <HAL_UART_MspInit+0xa4>)
 800195e:	f000 fecb 	bl	80026f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001966:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	4809      	ldr	r0, [pc, #36]	@ (800199c <HAL_UART_MspInit+0xa4>)
 8001978:	f000 febe 	bl	80026f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2107      	movs	r1, #7
 8001980:	2025      	movs	r0, #37	@ 0x25
 8001982:	f000 fdce 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001986:	2025      	movs	r0, #37	@ 0x25
 8001988:	f000 fde7 	bl	800255a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40013800 	.word	0x40013800
 8001998:	40021000 	.word	0x40021000
 800199c:	40010800 	.word	0x40010800

080019a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08c      	sub	sp, #48	@ 0x30
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001a70 <HAL_InitTick+0xd0>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001a70 <HAL_InitTick+0xd0>)
 80019bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019c0:	6193      	str	r3, [r2, #24]
 80019c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <HAL_InitTick+0xd0>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019ce:	f107 020c 	add.w	r2, r7, #12
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 fc95 	bl	8004308 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019de:	f002 fc7f 	bl	80042e0 <HAL_RCC_GetPCLK2Freq>
 80019e2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e6:	4a23      	ldr	r2, [pc, #140]	@ (8001a74 <HAL_InitTick+0xd4>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	0c9b      	lsrs	r3, r3, #18
 80019ee:	3b01      	subs	r3, #1
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019f2:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <HAL_InitTick+0xd8>)
 80019f4:	4a21      	ldr	r2, [pc, #132]	@ (8001a7c <HAL_InitTick+0xdc>)
 80019f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <HAL_InitTick+0xd8>)
 80019fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019fe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a00:	4a1d      	ldr	r2, [pc, #116]	@ (8001a78 <HAL_InitTick+0xd8>)
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <HAL_InitTick+0xd8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <HAL_InitTick+0xd8>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a12:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <HAL_InitTick+0xd8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a18:	4817      	ldr	r0, [pc, #92]	@ (8001a78 <HAL_InitTick+0xd8>)
 8001a1a:	f002 fd79 	bl	8004510 <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001a24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d11b      	bne.n	8001a64 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a2c:	4812      	ldr	r0, [pc, #72]	@ (8001a78 <HAL_InitTick+0xd8>)
 8001a2e:	f002 fe09 	bl	8004644 <HAL_TIM_Base_Start_IT>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d111      	bne.n	8001a64 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a40:	2019      	movs	r0, #25
 8001a42:	f000 fd8a 	bl	800255a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d808      	bhi.n	8001a5e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	2019      	movs	r0, #25
 8001a52:	f000 fd66 	bl	8002522 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a56:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <HAL_InitTick+0xe0>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e002      	b.n	8001a64 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3730      	adds	r7, #48	@ 0x30
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	431bde83 	.word	0x431bde83
 8001a78:	200005d8 	.word	0x200005d8
 8001a7c:	40012c00 	.word	0x40012c00
 8001a80:	20000018 	.word	0x20000018

08001a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <NMI_Handler+0x4>

08001a8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <HardFault_Handler+0x4>

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <BusFault_Handler+0x4>

08001aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <UsageFault_Handler+0x4>

08001aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001abc:	2002      	movs	r0, #2
 8001abe:	f000 ffcf 	bl	8002a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001acc:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <TIM1_UP_IRQHandler+0x10>)
 8001ace:	f002 fe0b 	bl	80046e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200005d8 	.word	0x200005d8

08001adc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ae0:	4802      	ldr	r0, [pc, #8]	@ (8001aec <USART1_IRQHandler+0x10>)
 8001ae2:	f003 fa55 	bl	8004f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000544 	.word	0x20000544

08001af0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001af4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001af8:	f000 ffb2 	bl	8002a60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001afc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b00:	f000 ffae 	bl	8002a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <_kill>:

int _kill(int pid, int sig)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b20:	f007 f97e 	bl	8008e20 <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2216      	movs	r2, #22
 8001b28:	601a      	str	r2, [r3, #0]
  return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_exit>:

void _exit (int status)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffe7 	bl	8001b16 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <_exit+0x12>

08001b4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e00a      	b.n	8001b74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b5e:	f3af 8000 	nop.w
 8001b62:	4601      	mov	r1, r0
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	60ba      	str	r2, [r7, #8]
 8001b6a:	b2ca      	uxtb	r2, r1
 8001b6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbf0      	blt.n	8001b5e <_read+0x12>
  }

  return len;
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e009      	b.n	8001bac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	60ba      	str	r2, [r7, #8]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbf1      	blt.n	8001b98 <_write+0x12>
  }
  return len;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_close>:

int _close(int file)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001be4:	605a      	str	r2, [r3, #4]
  return 0;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <_isatty>:

int _isatty(int file)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b085      	sub	sp, #20
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
	...

08001c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c28:	4a14      	ldr	r2, [pc, #80]	@ (8001c7c <_sbrk+0x5c>)
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <_sbrk+0x60>)
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c34:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <_sbrk+0x64>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	@ (8001c88 <_sbrk+0x68>)
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c42:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d207      	bcs.n	8001c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c50:	f007 f8e6 	bl	8008e20 <__errno>
 8001c54:	4603      	mov	r3, r0
 8001c56:	220c      	movs	r2, #12
 8001c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e009      	b.n	8001c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c60:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a05      	ldr	r2, [pc, #20]	@ (8001c84 <_sbrk+0x64>)
 8001c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 }
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20005000 	.word	0x20005000
 8001c80:	00000400 	.word	0x00000400
 8001c84:	20000620 	.word	0x20000620
 8001c88:	200014c0 	.word	0x200014c0

08001c8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c98:	f7ff fff8 	bl	8001c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c9c:	480b      	ldr	r0, [pc, #44]	@ (8001ccc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c9e:	490c      	ldr	r1, [pc, #48]	@ (8001cd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca4:	e002      	b.n	8001cac <LoopCopyDataInit>

08001ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001caa:	3304      	adds	r3, #4

08001cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb0:	d3f9      	bcc.n	8001ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb2:	4a09      	ldr	r2, [pc, #36]	@ (8001cd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cb4:	4c09      	ldr	r4, [pc, #36]	@ (8001cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb8:	e001      	b.n	8001cbe <LoopFillZerobss>

08001cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cbc:	3204      	adds	r2, #4

08001cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc0:	d3fb      	bcc.n	8001cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cc2:	f007 f8b3 	bl	8008e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cc6:	f7ff f8c1 	bl	8000e4c <main>
  bx lr
 8001cca:	4770      	bx	lr
  ldr r0, =_sdata
 8001ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001cd4:	0800b380 	.word	0x0800b380
  ldr r2, =_sbss
 8001cd8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001cdc:	200014c0 	.word	0x200014c0

08001ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ce0:	e7fe      	b.n	8001ce0 <ADC1_2_IRQHandler>
	...

08001ce4 <DHT11_Start>:

extern TIM_HandleTypeDef htim2;
void HAL_DelayMicroseconds(uint16_t us);

void DHT11_Start(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
    // Set pin as output
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cea:	463b      	mov	r3, r7
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT11_PIN;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8001d02:	463b      	mov	r3, r7
 8001d04:	4619      	mov	r1, r3
 8001d06:	480b      	ldr	r0, [pc, #44]	@ (8001d34 <DHT11_Start+0x50>)
 8001d08:	f000 fcf6 	bl	80026f8 <HAL_GPIO_Init>

    // Pull pin low for 18ms
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2101      	movs	r1, #1
 8001d10:	4808      	ldr	r0, [pc, #32]	@ (8001d34 <DHT11_Start+0x50>)
 8001d12:	f000 fe8c 	bl	8002a2e <HAL_GPIO_WritePin>
    HAL_Delay(18);
 8001d16:	2012      	movs	r0, #18
 8001d18:	f000 fb0c 	bl	8002334 <HAL_Delay>

    // Pull pin high for 20-40µs
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2101      	movs	r1, #1
 8001d20:	4804      	ldr	r0, [pc, #16]	@ (8001d34 <DHT11_Start+0x50>)
 8001d22:	f000 fe84 	bl	8002a2e <HAL_GPIO_WritePin>
    HAL_DelayMicroseconds(20);
 8001d26:	2014      	movs	r0, #20
 8001d28:	f000 f97a 	bl	8002020 <HAL_DelayMicroseconds>
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40010c00 	.word	0x40010c00

08001d38 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]

    // Set pin as input
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT11_PIN;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480f      	ldr	r0, [pc, #60]	@ (8001d9c <DHT11_Check_Response+0x64>)
 8001d60:	f000 fcca 	bl	80026f8 <HAL_GPIO_Init>

    // Wait for DHT11 response (low for 80us, then high for 80us)
    if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001d64:	2101      	movs	r1, #1
 8001d66:	480d      	ldr	r0, [pc, #52]	@ (8001d9c <DHT11_Check_Response+0x64>)
 8001d68:	f000 fe4a 	bl	8002a00 <HAL_GPIO_ReadPin>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10e      	bne.n	8001d90 <DHT11_Check_Response+0x58>
    {
        HAL_DelayMicroseconds(80);
 8001d72:	2050      	movs	r0, #80	@ 0x50
 8001d74:	f000 f954 	bl	8002020 <HAL_DelayMicroseconds>
        if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001d78:	2101      	movs	r1, #1
 8001d7a:	4808      	ldr	r0, [pc, #32]	@ (8001d9c <DHT11_Check_Response+0x64>)
 8001d7c:	f000 fe40 	bl	8002a00 <HAL_GPIO_ReadPin>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <DHT11_Check_Response+0x52>
            response = 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	75fb      	strb	r3, [r7, #23]
        HAL_DelayMicroseconds(80);
 8001d8a:	2050      	movs	r0, #80	@ 0x50
 8001d8c:	f000 f948 	bl	8002020 <HAL_DelayMicroseconds>
    }

    return response;
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40010c00 	.word	0x40010c00

08001da0 <DHT11_Read_Byte>:

uint8_t DHT11_Read_Byte(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
    uint8_t i, byte = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; i++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	71fb      	strb	r3, [r7, #7]
 8001dae:	e028      	b.n	8001e02 <DHT11_Read_Byte+0x62>
    {
        // Wait for pin to go high
        while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 8001db0:	bf00      	nop
 8001db2:	2101      	movs	r1, #1
 8001db4:	4817      	ldr	r0, [pc, #92]	@ (8001e14 <DHT11_Read_Byte+0x74>)
 8001db6:	f000 fe23 	bl	8002a00 <HAL_GPIO_ReadPin>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f8      	beq.n	8001db2 <DHT11_Read_Byte+0x12>

        HAL_DelayMicroseconds(30); // Wait 30µs to determine the bit value
 8001dc0:	201e      	movs	r0, #30
 8001dc2:	f000 f92d 	bl	8002020 <HAL_DelayMicroseconds>

        if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	4812      	ldr	r0, [pc, #72]	@ (8001e14 <DHT11_Read_Byte+0x74>)
 8001dca:	f000 fe19 	bl	8002a00 <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00b      	beq.n	8001dec <DHT11_Read_Byte+0x4c>
            byte |= (1 << (7 - i)); // If pin is high after 30µs, bit is 1
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2201      	movs	r2, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	b25a      	sxtb	r2, r3
 8001de2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	71bb      	strb	r3, [r7, #6]

        // Wait for pin to go low
        while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 8001dec:	bf00      	nop
 8001dee:	2101      	movs	r1, #1
 8001df0:	4808      	ldr	r0, [pc, #32]	@ (8001e14 <DHT11_Read_Byte+0x74>)
 8001df2:	f000 fe05 	bl	8002a00 <HAL_GPIO_ReadPin>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f8      	bne.n	8001dee <DHT11_Read_Byte+0x4e>
    for (i = 0; i < 8; i++)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	71fb      	strb	r3, [r7, #7]
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b07      	cmp	r3, #7
 8001e06:	d9d3      	bls.n	8001db0 <DHT11_Read_Byte+0x10>
    }
    return byte;
 8001e08:	79bb      	ldrb	r3, [r7, #6]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40010c00 	.word	0x40010c00

08001e18 <DHT11_Read_Data>:

void DHT11_Read_Data(float *temperature, float *humidity)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
    uint8_t rh_int, rh_dec, temp_int, temp_dec, checksum;

    DHT11_Start();
 8001e22:	f7ff ff5f 	bl	8001ce4 <DHT11_Start>
    if (DHT11_Check_Response())
 8001e26:	f7ff ff87 	bl	8001d38 <DHT11_Check_Response>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d02b      	beq.n	8001e88 <DHT11_Read_Data+0x70>
    {
        rh_int = DHT11_Read_Byte();
 8001e30:	f7ff ffb6 	bl	8001da0 <DHT11_Read_Byte>
 8001e34:	4603      	mov	r3, r0
 8001e36:	73fb      	strb	r3, [r7, #15]
        rh_dec = DHT11_Read_Byte();
 8001e38:	f7ff ffb2 	bl	8001da0 <DHT11_Read_Byte>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	73bb      	strb	r3, [r7, #14]
        temp_int = DHT11_Read_Byte();
 8001e40:	f7ff ffae 	bl	8001da0 <DHT11_Read_Byte>
 8001e44:	4603      	mov	r3, r0
 8001e46:	737b      	strb	r3, [r7, #13]
        temp_dec = DHT11_Read_Byte();
 8001e48:	f7ff ffaa 	bl	8001da0 <DHT11_Read_Byte>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	733b      	strb	r3, [r7, #12]
        checksum = DHT11_Read_Byte();
 8001e50:	f7ff ffa6 	bl	8001da0 <DHT11_Read_Byte>
 8001e54:	4603      	mov	r3, r0
 8001e56:	72fb      	strb	r3, [r7, #11]

        // Verify checksum
        if (checksum == (rh_int + rh_dec + temp_int + temp_dec))
 8001e58:	7afa      	ldrb	r2, [r7, #11]
 8001e5a:	7bf9      	ldrb	r1, [r7, #15]
 8001e5c:	7bbb      	ldrb	r3, [r7, #14]
 8001e5e:	4419      	add	r1, r3
 8001e60:	7b7b      	ldrb	r3, [r7, #13]
 8001e62:	4419      	add	r1, r3
 8001e64:	7b3b      	ldrb	r3, [r7, #12]
 8001e66:	440b      	add	r3, r1
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d10d      	bne.n	8001e88 <DHT11_Read_Data+0x70>
        {
            *humidity = (float)rh_int;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fec0 	bl	8000bf4 <__aeabi_ui2f>
 8001e74:	4602      	mov	r2, r0
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	601a      	str	r2, [r3, #0]
            *temperature = (float)temp_int;
 8001e7a:	7b7b      	ldrb	r3, [r7, #13]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe feb9 	bl	8000bf4 <__aeabi_ui2f>
 8001e82:	4602      	mov	r2, r0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	601a      	str	r2, [r3, #0]
        }
    }
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <Display_Temp>:

void Display_Temp (float Temp)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	@ 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

    char str[20] = "TE:";
 8001e98:	4b2d      	ldr	r3, [pc, #180]	@ (8001f50 <Display_Temp+0xc0>)
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
    int index = 3;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
    int integerPart = (int)Temp;
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe ff6e 	bl	8000d90 <__aeabi_f2iz>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	623b      	str	r3, [r7, #32]

    lcd_put_cur(1, 2);
 8001eb8:	2102      	movs	r1, #2
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f000 f996 	bl	80021ec <lcd_put_cur>

    // Add integer part
    if (integerPart == 0) {
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d108      	bne.n	8001ed8 <Display_Temp+0x48>
        str[index++] = '0';
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ecc:	3328      	adds	r3, #40	@ 0x28
 8001ece:	443b      	add	r3, r7
 8001ed0:	2230      	movs	r2, #48	@ 0x30
 8001ed2:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001ed6:	e029      	b.n	8001f2c <Display_Temp+0x9c>
    } else {
        if (integerPart >= 10) {
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	2b09      	cmp	r3, #9
 8001edc:	dd10      	ble.n	8001f00 <Display_Temp+0x70>
            str[index++] = '0' + (integerPart / 10);
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f54 <Display_Temp+0xc4>)
 8001ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee6:	1092      	asrs	r2, r2, #2
 8001ee8:	17db      	asrs	r3, r3, #31
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	1c59      	adds	r1, r3, #1
 8001ef2:	6279      	str	r1, [r7, #36]	@ 0x24
 8001ef4:	3230      	adds	r2, #48	@ 0x30
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	3328      	adds	r3, #40	@ 0x28
 8001efa:	443b      	add	r3, r7
 8001efc:	f803 2c1c 	strb.w	r2, [r3, #-28]
        }
        str[index++] = '0' + (integerPart % 10);
 8001f00:	6a3a      	ldr	r2, [r7, #32]
 8001f02:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <Display_Temp+0xc4>)
 8001f04:	fb83 1302 	smull	r1, r3, r3, r2
 8001f08:	1099      	asrs	r1, r3, #2
 8001f0a:	17d3      	asrs	r3, r2, #31
 8001f0c:	1ac9      	subs	r1, r1, r3
 8001f0e:	460b      	mov	r3, r1
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	1ad1      	subs	r1, r2, r3
 8001f18:	b2ca      	uxtb	r2, r1
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	1c59      	adds	r1, r3, #1
 8001f1e:	6279      	str	r1, [r7, #36]	@ 0x24
 8001f20:	3230      	adds	r2, #48	@ 0x30
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	3328      	adds	r3, #40	@ 0x28
 8001f26:	443b      	add	r3, r7
 8001f28:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }

    str[index] = '\0';
 8001f2c:	f107 020c 	add.w	r2, r7, #12
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	4413      	add	r3, r2
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
    lcd_send_string(str);
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 f9b1 	bl	80022a4 <lcd_send_string>
    lcd_send_data('C');
 8001f42:	2043      	movs	r0, #67	@ 0x43
 8001f44:	f000 f922 	bl	800218c <lcd_send_data>
}
 8001f48:	bf00      	nop
 8001f4a:	3728      	adds	r7, #40	@ 0x28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	003a4554 	.word	0x003a4554
 8001f54:	66666667 	.word	0x66666667

08001f58 <Display_Rh>:

void Display_Rh(float Rh)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	@ 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
    char str[20] = "HU:";
 8001f60:	4b2d      	ldr	r3, [pc, #180]	@ (8002018 <Display_Rh+0xc0>)
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
    int index = 3;
 8001f72:	2303      	movs	r3, #3
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
    int integerPart = (int)Rh;
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe ff0a 	bl	8000d90 <__aeabi_f2iz>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	623b      	str	r3, [r7, #32]

    lcd_put_cur(1, 9);
 8001f80:	2109      	movs	r1, #9
 8001f82:	2001      	movs	r0, #1
 8001f84:	f000 f932 	bl	80021ec <lcd_put_cur>
    // Add integer part
    if (integerPart == 0) {
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <Display_Rh+0x48>
        str[index++] = '0';
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f94:	3328      	adds	r3, #40	@ 0x28
 8001f96:	443b      	add	r3, r7
 8001f98:	2230      	movs	r2, #48	@ 0x30
 8001f9a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001f9e:	e029      	b.n	8001ff4 <Display_Rh+0x9c>
    } else {
        if (integerPart >= 10) {
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	2b09      	cmp	r3, #9
 8001fa4:	dd10      	ble.n	8001fc8 <Display_Rh+0x70>
            str[index++] = '0' + (integerPart / 10);
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800201c <Display_Rh+0xc4>)
 8001faa:	fb82 1203 	smull	r1, r2, r2, r3
 8001fae:	1092      	asrs	r2, r2, #2
 8001fb0:	17db      	asrs	r3, r3, #31
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	1c59      	adds	r1, r3, #1
 8001fba:	6279      	str	r1, [r7, #36]	@ 0x24
 8001fbc:	3230      	adds	r2, #48	@ 0x30
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	3328      	adds	r3, #40	@ 0x28
 8001fc2:	443b      	add	r3, r7
 8001fc4:	f803 2c1c 	strb.w	r2, [r3, #-28]
        }
        str[index++] = '0' + (integerPart % 10);
 8001fc8:	6a3a      	ldr	r2, [r7, #32]
 8001fca:	4b14      	ldr	r3, [pc, #80]	@ (800201c <Display_Rh+0xc4>)
 8001fcc:	fb83 1302 	smull	r1, r3, r3, r2
 8001fd0:	1099      	asrs	r1, r3, #2
 8001fd2:	17d3      	asrs	r3, r2, #31
 8001fd4:	1ac9      	subs	r1, r1, r3
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	1ad1      	subs	r1, r2, r3
 8001fe0:	b2ca      	uxtb	r2, r1
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	1c59      	adds	r1, r3, #1
 8001fe6:	6279      	str	r1, [r7, #36]	@ 0x24
 8001fe8:	3230      	adds	r2, #48	@ 0x30
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	3328      	adds	r3, #40	@ 0x28
 8001fee:	443b      	add	r3, r7
 8001ff0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }
    // Null-terminate the string
    str[index] = '\0';
 8001ff4:	f107 020c 	add.w	r2, r7, #12
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	4413      	add	r3, r2
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
    lcd_send_string(str);
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	4618      	mov	r0, r3
 8002006:	f000 f94d 	bl	80022a4 <lcd_send_string>
    lcd_send_data('%');
 800200a:	2025      	movs	r0, #37	@ 0x25
 800200c:	f000 f8be 	bl	800218c <lcd_send_data>
}
 8002010:	bf00      	nop
 8002012:	3728      	adds	r7, #40	@ 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	003a5548 	.word	0x003a5548
 800201c:	66666667 	.word	0x66666667

08002020 <HAL_DelayMicroseconds>:

void HAL_DelayMicroseconds(uint16_t us)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset counter
 800202a:	4b08      	ldr	r3, [pc, #32]	@ (800204c <HAL_DelayMicroseconds+0x2c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2200      	movs	r2, #0
 8002030:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us); // Đợi cho đến khi đạt đến giá trị cần
 8002032:	bf00      	nop
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_DelayMicroseconds+0x2c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	429a      	cmp	r2, r3
 800203e:	d3f9      	bcc.n	8002034 <HAL_DelayMicroseconds+0x14>
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	200004fc 	.word	0x200004fc

08002050 <bcdToDec>:

extern I2C_HandleTypeDef hi2c1;
extern 	TIME time;

int bcdToDec(uint8_t val)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
	uint8_t bin;
	bin=((val & 0xf0)>>4)*10 +(val & 0x0f);
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4413      	add	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	b2da      	uxtb	r2, r3
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4413      	add	r3, r2
 8002074:	73fb      	strb	r3, [r7, #15]
  return (bin);
 8002076:	7bfb      	ldrb	r3, [r7, #15]
  //return (int)( (val/16*10) + (val%16) );
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
	...

08002084 <Get_Time>:
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
	//(para1:which i2c,para2:target add,para3:internal mem add,para4:mem add size,para5:p data,para6:size data,para7:time out)
}

void Get_Time (uint8_t *Get_Sec , uint8_t *Get_min ,uint8_t *Get_hour,uint8_t *Get_day ,uint8_t *Get_date,uint8_t *Get_month ,uint8_t *Get_year)
{                      //struct use here//
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	@ 0x28
 8002088:	af04      	add	r7, sp, #16
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
	uint8_t get_time[7];

	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8002092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002096:	9302      	str	r3, [sp, #8]
 8002098:	2307      	movs	r3, #7
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2301      	movs	r3, #1
 80020a4:	2200      	movs	r2, #0
 80020a6:	21d0      	movs	r1, #208	@ 0xd0
 80020a8:	481f      	ldr	r0, [pc, #124]	@ (8002128 <Get_Time+0xa4>)
 80020aa:	f000 ff33 	bl	8002f14 <HAL_I2C_Mem_Read>
	//(para1:which i2c,para2:target add,para3:internal mem add,para4:mem add size,para5:p data,para6:size data,para7:time out)
	*Get_Sec = bcdToDec(get_time[0]);
 80020ae:	7c3b      	ldrb	r3, [r7, #16]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ffcd 	bl	8002050 <bcdToDec>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	701a      	strb	r2, [r3, #0]
	*Get_min= bcdToDec(get_time[1]);
 80020be:	7c7b      	ldrb	r3, [r7, #17]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ffc5 	bl	8002050 <bcdToDec>
 80020c6:	4603      	mov	r3, r0
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	701a      	strb	r2, [r3, #0]
	*Get_hour= bcdToDec(get_time[2]);
 80020ce:	7cbb      	ldrb	r3, [r7, #18]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ffbd 	bl	8002050 <bcdToDec>
 80020d6:	4603      	mov	r3, r0
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	701a      	strb	r2, [r3, #0]
	*Get_day= bcdToDec(get_time[3]);
 80020de:	7cfb      	ldrb	r3, [r7, #19]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ffb5 	bl	8002050 <bcdToDec>
 80020e6:	4603      	mov	r3, r0
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	701a      	strb	r2, [r3, #0]
	*Get_date= bcdToDec(get_time[4]);
 80020ee:	7d3b      	ldrb	r3, [r7, #20]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ffad 	bl	8002050 <bcdToDec>
 80020f6:	4603      	mov	r3, r0
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	701a      	strb	r2, [r3, #0]
	*Get_month= bcdToDec(get_time[5]);
 80020fe:	7d7b      	ldrb	r3, [r7, #21]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ffa5 	bl	8002050 <bcdToDec>
 8002106:	4603      	mov	r3, r0
 8002108:	b2da      	uxtb	r2, r3
 800210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210c:	701a      	strb	r2, [r3, #0]
	*Get_year= bcdToDec(get_time[6]);
 800210e:	7dbb      	ldrb	r3, [r7, #22]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff9d 	bl	8002050 <bcdToDec>
 8002116:	4603      	mov	r3, r0
 8002118:	b2da      	uxtb	r2, r3
 800211a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211c:	701a      	strb	r2, [r3, #0]
	
}  
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200004a8 	.word	0x200004a8

0800212c <lcd_send_cmd>:
#include "i2c-lcd.h"
extern I2C_HandleTypeDef hi2c1;


void lcd_send_cmd (char cmd)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af02      	add	r7, sp, #8
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f023 030f 	bic.w	r3, r3, #15
 800213c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	f043 030c 	orr.w	r3, r3, #12
 800214a:	b2db      	uxtb	r3, r3
 800214c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	b2db      	uxtb	r3, r3
 8002156:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002158:	7bbb      	ldrb	r3, [r7, #14]
 800215a:	f043 030c 	orr.w	r3, r3, #12
 800215e:	b2db      	uxtb	r3, r3
 8002160:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002162:	7bbb      	ldrb	r3, [r7, #14]
 8002164:	f043 0308 	orr.w	r3, r3, #8
 8002168:	b2db      	uxtb	r3, r3
 800216a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800216c:	f107 0208 	add.w	r2, r7, #8
 8002170:	2364      	movs	r3, #100	@ 0x64
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2304      	movs	r3, #4
 8002176:	214e      	movs	r1, #78	@ 0x4e
 8002178:	4803      	ldr	r0, [pc, #12]	@ (8002188 <lcd_send_cmd+0x5c>)
 800217a:	f000 fdcd 	bl	8002d18 <HAL_I2C_Master_Transmit>
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200004a8 	.word	0x200004a8

0800218c <lcd_send_data>:

void lcd_send_data (char data)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af02      	add	r7, sp, #8
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f023 030f 	bic.w	r3, r3, #15
 800219c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	f043 030d 	orr.w	r3, r3, #13
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	f043 0309 	orr.w	r3, r3, #9
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	f043 030d 	orr.w	r3, r3, #13
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	f043 0309 	orr.w	r3, r3, #9
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80021cc:	f107 0208 	add.w	r2, r7, #8
 80021d0:	2364      	movs	r3, #100	@ 0x64
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2304      	movs	r3, #4
 80021d6:	214e      	movs	r1, #78	@ 0x4e
 80021d8:	4803      	ldr	r0, [pc, #12]	@ (80021e8 <lcd_send_data+0x5c>)
 80021da:	f000 fd9d 	bl	8002d18 <HAL_I2C_Master_Transmit>
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200004a8 	.word	0x200004a8

080021ec <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
    switch (row)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <lcd_put_cur+0x18>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d005      	beq.n	800220e <lcd_put_cur+0x22>
 8002202:	e009      	b.n	8002218 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800220a:	603b      	str	r3, [r7, #0]
            break;
 800220c:	e004      	b.n	8002218 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002214:	603b      	str	r3, [r7, #0]
            break;
 8002216:	bf00      	nop
    }

    lcd_send_cmd (col);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff85 	bl	800212c <lcd_send_cmd>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <lcd_init>:


void lcd_init (void)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800222e:	2032      	movs	r0, #50	@ 0x32
 8002230:	f000 f880 	bl	8002334 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002234:	2030      	movs	r0, #48	@ 0x30
 8002236:	f7ff ff79 	bl	800212c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800223a:	2005      	movs	r0, #5
 800223c:	f000 f87a 	bl	8002334 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002240:	2030      	movs	r0, #48	@ 0x30
 8002242:	f7ff ff73 	bl	800212c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8002246:	2001      	movs	r0, #1
 8002248:	f000 f874 	bl	8002334 <HAL_Delay>
	lcd_send_cmd (0x30);
 800224c:	2030      	movs	r0, #48	@ 0x30
 800224e:	f7ff ff6d 	bl	800212c <lcd_send_cmd>
	HAL_Delay(10);
 8002252:	200a      	movs	r0, #10
 8002254:	f000 f86e 	bl	8002334 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8002258:	2020      	movs	r0, #32
 800225a:	f7ff ff67 	bl	800212c <lcd_send_cmd>
	HAL_Delay(10);
 800225e:	200a      	movs	r0, #10
 8002260:	f000 f868 	bl	8002334 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8002264:	2028      	movs	r0, #40	@ 0x28
 8002266:	f7ff ff61 	bl	800212c <lcd_send_cmd>
	HAL_Delay(1);
 800226a:	2001      	movs	r0, #1
 800226c:	f000 f862 	bl	8002334 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8002270:	2008      	movs	r0, #8
 8002272:	f7ff ff5b 	bl	800212c <lcd_send_cmd>
	HAL_Delay(1);
 8002276:	2001      	movs	r0, #1
 8002278:	f000 f85c 	bl	8002334 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800227c:	2001      	movs	r0, #1
 800227e:	f7ff ff55 	bl	800212c <lcd_send_cmd>
	HAL_Delay(1);
 8002282:	2001      	movs	r0, #1
 8002284:	f000 f856 	bl	8002334 <HAL_Delay>
	HAL_Delay(1);
 8002288:	2001      	movs	r0, #1
 800228a:	f000 f853 	bl	8002334 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800228e:	2006      	movs	r0, #6
 8002290:	f7ff ff4c 	bl	800212c <lcd_send_cmd>
	HAL_Delay(1);
 8002294:	2001      	movs	r0, #1
 8002296:	f000 f84d 	bl	8002334 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800229a:	200c      	movs	r0, #12
 800229c:	f7ff ff46 	bl	800212c <lcd_send_cmd>
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80022ac:	e006      	b.n	80022bc <lcd_send_string+0x18>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ff68 	bl	800218c <lcd_send_data>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f4      	bne.n	80022ae <lcd_send_string+0xa>
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d4:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <HAL_Init+0x28>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a07      	ldr	r2, [pc, #28]	@ (80022f8 <HAL_Init+0x28>)
 80022da:	f043 0310 	orr.w	r3, r3, #16
 80022de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e0:	2003      	movs	r0, #3
 80022e2:	f000 f913 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022e6:	200f      	movs	r0, #15
 80022e8:	f7ff fb5a 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ec:	f7ff fa72 	bl	80017d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40022000 	.word	0x40022000

080022fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <HAL_IncTick+0x1c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_IncTick+0x20>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4413      	add	r3, r2
 800230c:	4a03      	ldr	r2, [pc, #12]	@ (800231c <HAL_IncTick+0x20>)
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	2000001c 	.word	0x2000001c
 800231c:	20000624 	.word	0x20000624

08002320 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return uwTick;
 8002324:	4b02      	ldr	r3, [pc, #8]	@ (8002330 <HAL_GetTick+0x10>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	20000624 	.word	0x20000624

08002334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff fff0 	bl	8002320 <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d005      	beq.n	800235a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800234e:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <HAL_Delay+0x44>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800235a:	bf00      	nop
 800235c:	f7ff ffe0 	bl	8002320 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8f7      	bhi.n	800235c <HAL_Delay+0x28>
  {
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000001c 	.word	0x2000001c

0800237c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800238c:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ae:	4a04      	ldr	r2, [pc, #16]	@ (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60d3      	str	r3, [r2, #12]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <__NVIC_GetPriorityGrouping+0x18>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 0307 	and.w	r3, r3, #7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db0b      	blt.n	800240a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4906      	ldr	r1, [pc, #24]	@ (8002414 <__NVIC_EnableIRQ+0x34>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2001      	movs	r0, #1
 8002402:	fa00 f202 	lsl.w	r2, r0, r2
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	2b00      	cmp	r3, #0
 8002428:	db0c      	blt.n	8002444 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4907      	ldr	r1, [pc, #28]	@ (8002450 <__NVIC_ClearPendingIRQ+0x38>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2001      	movs	r0, #1
 800243a:	fa00 f202 	lsl.w	r2, r0, r2
 800243e:	3360      	adds	r3, #96	@ 0x60
 8002440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000e100 	.word	0xe000e100

08002454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	db0a      	blt.n	800247e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	490c      	ldr	r1, [pc, #48]	@ (80024a0 <__NVIC_SetPriority+0x4c>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	0112      	lsls	r2, r2, #4
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	440b      	add	r3, r1
 8002478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800247c:	e00a      	b.n	8002494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4908      	ldr	r1, [pc, #32]	@ (80024a4 <__NVIC_SetPriority+0x50>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3b04      	subs	r3, #4
 800248c:	0112      	lsls	r2, r2, #4
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	440b      	add	r3, r1
 8002492:	761a      	strb	r2, [r3, #24]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	@ 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f1c3 0307 	rsb	r3, r3, #7
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	bf28      	it	cs
 80024c6:	2304      	movcs	r3, #4
 80024c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d902      	bls.n	80024d8 <NVIC_EncodePriority+0x30>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3b03      	subs	r3, #3
 80024d6:	e000      	b.n	80024da <NVIC_EncodePriority+0x32>
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	401a      	ands	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	43d9      	mvns	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	4313      	orrs	r3, r2
         );
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	@ 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff31 	bl	800237c <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff46 	bl	80023c4 <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ffb2 	bl	80024a8 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff81 	bl	8002454 <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff39 	bl	80023e0 <__NVIC_EnableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff47 	bl	8002418 <__NVIC_ClearPendingIRQ>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d008      	beq.n	80025bc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2204      	movs	r2, #4
 80025ae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e020      	b.n	80025fe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 020e 	bic.w	r2, r2, #14
 80025ca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d005      	beq.n	800262c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2204      	movs	r2, #4
 8002624:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	e051      	b.n	80026d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 020e 	bic.w	r2, r2, #14
 800263a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a22      	ldr	r2, [pc, #136]	@ (80026dc <HAL_DMA_Abort_IT+0xd4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d029      	beq.n	80026aa <HAL_DMA_Abort_IT+0xa2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a21      	ldr	r2, [pc, #132]	@ (80026e0 <HAL_DMA_Abort_IT+0xd8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d022      	beq.n	80026a6 <HAL_DMA_Abort_IT+0x9e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1f      	ldr	r2, [pc, #124]	@ (80026e4 <HAL_DMA_Abort_IT+0xdc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01a      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x98>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1e      	ldr	r2, [pc, #120]	@ (80026e8 <HAL_DMA_Abort_IT+0xe0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d012      	beq.n	800269a <HAL_DMA_Abort_IT+0x92>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a1c      	ldr	r2, [pc, #112]	@ (80026ec <HAL_DMA_Abort_IT+0xe4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00a      	beq.n	8002694 <HAL_DMA_Abort_IT+0x8c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1b      	ldr	r2, [pc, #108]	@ (80026f0 <HAL_DMA_Abort_IT+0xe8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d102      	bne.n	800268e <HAL_DMA_Abort_IT+0x86>
 8002688:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800268c:	e00e      	b.n	80026ac <HAL_DMA_Abort_IT+0xa4>
 800268e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002692:	e00b      	b.n	80026ac <HAL_DMA_Abort_IT+0xa4>
 8002694:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002698:	e008      	b.n	80026ac <HAL_DMA_Abort_IT+0xa4>
 800269a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800269e:	e005      	b.n	80026ac <HAL_DMA_Abort_IT+0xa4>
 80026a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026a4:	e002      	b.n	80026ac <HAL_DMA_Abort_IT+0xa4>
 80026a6:	2310      	movs	r3, #16
 80026a8:	e000      	b.n	80026ac <HAL_DMA_Abort_IT+0xa4>
 80026aa:	2301      	movs	r3, #1
 80026ac:	4a11      	ldr	r2, [pc, #68]	@ (80026f4 <HAL_DMA_Abort_IT+0xec>)
 80026ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
    } 
  }
  return status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40020008 	.word	0x40020008
 80026e0:	4002001c 	.word	0x4002001c
 80026e4:	40020030 	.word	0x40020030
 80026e8:	40020044 	.word	0x40020044
 80026ec:	40020058 	.word	0x40020058
 80026f0:	4002006c 	.word	0x4002006c
 80026f4:	40020000 	.word	0x40020000

080026f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b08b      	sub	sp, #44	@ 0x2c
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270a:	e169      	b.n	80029e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800270c:	2201      	movs	r2, #1
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	429a      	cmp	r2, r3
 8002726:	f040 8158 	bne.w	80029da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4a9a      	ldr	r2, [pc, #616]	@ (8002998 <HAL_GPIO_Init+0x2a0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d05e      	beq.n	80027f2 <HAL_GPIO_Init+0xfa>
 8002734:	4a98      	ldr	r2, [pc, #608]	@ (8002998 <HAL_GPIO_Init+0x2a0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d875      	bhi.n	8002826 <HAL_GPIO_Init+0x12e>
 800273a:	4a98      	ldr	r2, [pc, #608]	@ (800299c <HAL_GPIO_Init+0x2a4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d058      	beq.n	80027f2 <HAL_GPIO_Init+0xfa>
 8002740:	4a96      	ldr	r2, [pc, #600]	@ (800299c <HAL_GPIO_Init+0x2a4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d86f      	bhi.n	8002826 <HAL_GPIO_Init+0x12e>
 8002746:	4a96      	ldr	r2, [pc, #600]	@ (80029a0 <HAL_GPIO_Init+0x2a8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d052      	beq.n	80027f2 <HAL_GPIO_Init+0xfa>
 800274c:	4a94      	ldr	r2, [pc, #592]	@ (80029a0 <HAL_GPIO_Init+0x2a8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d869      	bhi.n	8002826 <HAL_GPIO_Init+0x12e>
 8002752:	4a94      	ldr	r2, [pc, #592]	@ (80029a4 <HAL_GPIO_Init+0x2ac>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d04c      	beq.n	80027f2 <HAL_GPIO_Init+0xfa>
 8002758:	4a92      	ldr	r2, [pc, #584]	@ (80029a4 <HAL_GPIO_Init+0x2ac>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d863      	bhi.n	8002826 <HAL_GPIO_Init+0x12e>
 800275e:	4a92      	ldr	r2, [pc, #584]	@ (80029a8 <HAL_GPIO_Init+0x2b0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d046      	beq.n	80027f2 <HAL_GPIO_Init+0xfa>
 8002764:	4a90      	ldr	r2, [pc, #576]	@ (80029a8 <HAL_GPIO_Init+0x2b0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d85d      	bhi.n	8002826 <HAL_GPIO_Init+0x12e>
 800276a:	2b12      	cmp	r3, #18
 800276c:	d82a      	bhi.n	80027c4 <HAL_GPIO_Init+0xcc>
 800276e:	2b12      	cmp	r3, #18
 8002770:	d859      	bhi.n	8002826 <HAL_GPIO_Init+0x12e>
 8002772:	a201      	add	r2, pc, #4	@ (adr r2, 8002778 <HAL_GPIO_Init+0x80>)
 8002774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002778:	080027f3 	.word	0x080027f3
 800277c:	080027cd 	.word	0x080027cd
 8002780:	080027df 	.word	0x080027df
 8002784:	08002821 	.word	0x08002821
 8002788:	08002827 	.word	0x08002827
 800278c:	08002827 	.word	0x08002827
 8002790:	08002827 	.word	0x08002827
 8002794:	08002827 	.word	0x08002827
 8002798:	08002827 	.word	0x08002827
 800279c:	08002827 	.word	0x08002827
 80027a0:	08002827 	.word	0x08002827
 80027a4:	08002827 	.word	0x08002827
 80027a8:	08002827 	.word	0x08002827
 80027ac:	08002827 	.word	0x08002827
 80027b0:	08002827 	.word	0x08002827
 80027b4:	08002827 	.word	0x08002827
 80027b8:	08002827 	.word	0x08002827
 80027bc:	080027d5 	.word	0x080027d5
 80027c0:	080027e9 	.word	0x080027e9
 80027c4:	4a79      	ldr	r2, [pc, #484]	@ (80029ac <HAL_GPIO_Init+0x2b4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027ca:	e02c      	b.n	8002826 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	623b      	str	r3, [r7, #32]
          break;
 80027d2:	e029      	b.n	8002828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	3304      	adds	r3, #4
 80027da:	623b      	str	r3, [r7, #32]
          break;
 80027dc:	e024      	b.n	8002828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	3308      	adds	r3, #8
 80027e4:	623b      	str	r3, [r7, #32]
          break;
 80027e6:	e01f      	b.n	8002828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	330c      	adds	r3, #12
 80027ee:	623b      	str	r3, [r7, #32]
          break;
 80027f0:	e01a      	b.n	8002828 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027fa:	2304      	movs	r3, #4
 80027fc:	623b      	str	r3, [r7, #32]
          break;
 80027fe:	e013      	b.n	8002828 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002808:	2308      	movs	r3, #8
 800280a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	611a      	str	r2, [r3, #16]
          break;
 8002812:	e009      	b.n	8002828 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002814:	2308      	movs	r3, #8
 8002816:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	615a      	str	r2, [r3, #20]
          break;
 800281e:	e003      	b.n	8002828 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002820:	2300      	movs	r3, #0
 8002822:	623b      	str	r3, [r7, #32]
          break;
 8002824:	e000      	b.n	8002828 <HAL_GPIO_Init+0x130>
          break;
 8002826:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2bff      	cmp	r3, #255	@ 0xff
 800282c:	d801      	bhi.n	8002832 <HAL_GPIO_Init+0x13a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	e001      	b.n	8002836 <HAL_GPIO_Init+0x13e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2bff      	cmp	r3, #255	@ 0xff
 800283c:	d802      	bhi.n	8002844 <HAL_GPIO_Init+0x14c>
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	e002      	b.n	800284a <HAL_GPIO_Init+0x152>
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	3b08      	subs	r3, #8
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	210f      	movs	r1, #15
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	401a      	ands	r2, r3
 800285c:	6a39      	ldr	r1, [r7, #32]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	431a      	orrs	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80b1 	beq.w	80029da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002878:	4b4d      	ldr	r3, [pc, #308]	@ (80029b0 <HAL_GPIO_Init+0x2b8>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	4a4c      	ldr	r2, [pc, #304]	@ (80029b0 <HAL_GPIO_Init+0x2b8>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6193      	str	r3, [r2, #24]
 8002884:	4b4a      	ldr	r3, [pc, #296]	@ (80029b0 <HAL_GPIO_Init+0x2b8>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002890:	4a48      	ldr	r2, [pc, #288]	@ (80029b4 <HAL_GPIO_Init+0x2bc>)
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	3302      	adds	r3, #2
 8002898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	220f      	movs	r2, #15
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a40      	ldr	r2, [pc, #256]	@ (80029b8 <HAL_GPIO_Init+0x2c0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d013      	beq.n	80028e4 <HAL_GPIO_Init+0x1ec>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a3f      	ldr	r2, [pc, #252]	@ (80029bc <HAL_GPIO_Init+0x2c4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00d      	beq.n	80028e0 <HAL_GPIO_Init+0x1e8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a3e      	ldr	r2, [pc, #248]	@ (80029c0 <HAL_GPIO_Init+0x2c8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d007      	beq.n	80028dc <HAL_GPIO_Init+0x1e4>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3d      	ldr	r2, [pc, #244]	@ (80029c4 <HAL_GPIO_Init+0x2cc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d101      	bne.n	80028d8 <HAL_GPIO_Init+0x1e0>
 80028d4:	2303      	movs	r3, #3
 80028d6:	e006      	b.n	80028e6 <HAL_GPIO_Init+0x1ee>
 80028d8:	2304      	movs	r3, #4
 80028da:	e004      	b.n	80028e6 <HAL_GPIO_Init+0x1ee>
 80028dc:	2302      	movs	r3, #2
 80028de:	e002      	b.n	80028e6 <HAL_GPIO_Init+0x1ee>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <HAL_GPIO_Init+0x1ee>
 80028e4:	2300      	movs	r3, #0
 80028e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e8:	f002 0203 	and.w	r2, r2, #3
 80028ec:	0092      	lsls	r2, r2, #2
 80028ee:	4093      	lsls	r3, r2
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028f6:	492f      	ldr	r1, [pc, #188]	@ (80029b4 <HAL_GPIO_Init+0x2bc>)
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3302      	adds	r3, #2
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002910:	4b2d      	ldr	r3, [pc, #180]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	492c      	ldr	r1, [pc, #176]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]
 800291c:	e006      	b.n	800292c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800291e:	4b2a      	ldr	r3, [pc, #168]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	43db      	mvns	r3, r3
 8002926:	4928      	ldr	r1, [pc, #160]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002928:	4013      	ands	r3, r2
 800292a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d006      	beq.n	8002946 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002938:	4b23      	ldr	r3, [pc, #140]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	4922      	ldr	r1, [pc, #136]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	60cb      	str	r3, [r1, #12]
 8002944:	e006      	b.n	8002954 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002946:	4b20      	ldr	r3, [pc, #128]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	43db      	mvns	r3, r3
 800294e:	491e      	ldr	r1, [pc, #120]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002950:	4013      	ands	r3, r2
 8002952:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002960:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4918      	ldr	r1, [pc, #96]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800296e:	4b16      	ldr	r3, [pc, #88]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	43db      	mvns	r3, r3
 8002976:	4914      	ldr	r1, [pc, #80]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 8002978:	4013      	ands	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d021      	beq.n	80029cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002988:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	490e      	ldr	r1, [pc, #56]	@ (80029c8 <HAL_GPIO_Init+0x2d0>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
 8002994:	e021      	b.n	80029da <HAL_GPIO_Init+0x2e2>
 8002996:	bf00      	nop
 8002998:	10320000 	.word	0x10320000
 800299c:	10310000 	.word	0x10310000
 80029a0:	10220000 	.word	0x10220000
 80029a4:	10210000 	.word	0x10210000
 80029a8:	10120000 	.word	0x10120000
 80029ac:	10110000 	.word	0x10110000
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010000 	.word	0x40010000
 80029b8:	40010800 	.word	0x40010800
 80029bc:	40010c00 	.word	0x40010c00
 80029c0:	40011000 	.word	0x40011000
 80029c4:	40011400 	.word	0x40011400
 80029c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029cc:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <HAL_GPIO_Init+0x304>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	4909      	ldr	r1, [pc, #36]	@ (80029fc <HAL_GPIO_Init+0x304>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	3301      	adds	r3, #1
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f47f ae8e 	bne.w	800270c <HAL_GPIO_Init+0x14>
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	372c      	adds	r7, #44	@ 0x2c
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	40010400 	.word	0x40010400

08002a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	e001      	b.n	8002a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	460b      	mov	r3, r1
 8002a38:	807b      	strh	r3, [r7, #2]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a3e:	787b      	ldrb	r3, [r7, #1]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a44:	887a      	ldrh	r2, [r7, #2]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a4a:	e003      	b.n	8002a54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a4c:	887b      	ldrh	r3, [r7, #2]
 8002a4e:	041a      	lsls	r2, r3, #16
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	611a      	str	r2, [r3, #16]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a6a:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a76:	4a05      	ldr	r2, [pc, #20]	@ (8002a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fc12 	bl	80012a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40010400 	.word	0x40010400

08002a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e12b      	b.n	8002cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe fec4 	bl	8001844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2224      	movs	r2, #36	@ 0x24
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002af4:	f001 fbe0 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 8002af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4a81      	ldr	r2, [pc, #516]	@ (8002d04 <HAL_I2C_Init+0x274>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d807      	bhi.n	8002b14 <HAL_I2C_Init+0x84>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a80      	ldr	r2, [pc, #512]	@ (8002d08 <HAL_I2C_Init+0x278>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	bf94      	ite	ls
 8002b0c:	2301      	movls	r3, #1
 8002b0e:	2300      	movhi	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e006      	b.n	8002b22 <HAL_I2C_Init+0x92>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4a7d      	ldr	r2, [pc, #500]	@ (8002d0c <HAL_I2C_Init+0x27c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	bf94      	ite	ls
 8002b1c:	2301      	movls	r3, #1
 8002b1e:	2300      	movhi	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0e7      	b.n	8002cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4a78      	ldr	r2, [pc, #480]	@ (8002d10 <HAL_I2C_Init+0x280>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	0c9b      	lsrs	r3, r3, #18
 8002b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a6a      	ldr	r2, [pc, #424]	@ (8002d04 <HAL_I2C_Init+0x274>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d802      	bhi.n	8002b64 <HAL_I2C_Init+0xd4>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3301      	adds	r3, #1
 8002b62:	e009      	b.n	8002b78 <HAL_I2C_Init+0xe8>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	4a69      	ldr	r2, [pc, #420]	@ (8002d14 <HAL_I2C_Init+0x284>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	3301      	adds	r3, #1
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	495c      	ldr	r1, [pc, #368]	@ (8002d04 <HAL_I2C_Init+0x274>)
 8002b94:	428b      	cmp	r3, r1
 8002b96:	d819      	bhi.n	8002bcc <HAL_I2C_Init+0x13c>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1e59      	subs	r1, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba6:	1c59      	adds	r1, r3, #1
 8002ba8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bac:	400b      	ands	r3, r1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_I2C_Init+0x138>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1e59      	subs	r1, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc6:	e051      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002bc8:	2304      	movs	r3, #4
 8002bca:	e04f      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d111      	bne.n	8002bf8 <HAL_I2C_Init+0x168>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e58      	subs	r0, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	440b      	add	r3, r1
 8002be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e012      	b.n	8002c1e <HAL_I2C_Init+0x18e>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e58      	subs	r0, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	0099      	lsls	r1, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Init+0x196>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e022      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10e      	bne.n	8002c4c <HAL_I2C_Init+0x1bc>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1e58      	subs	r0, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6859      	ldr	r1, [r3, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	440b      	add	r3, r1
 8002c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c4a:	e00f      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e58      	subs	r0, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	0099      	lsls	r1, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	6809      	ldr	r1, [r1, #0]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6911      	ldr	r1, [r2, #16]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68d2      	ldr	r2, [r2, #12]
 8002ca6:	4311      	orrs	r1, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	000186a0 	.word	0x000186a0
 8002d08:	001e847f 	.word	0x001e847f
 8002d0c:	003d08ff 	.word	0x003d08ff
 8002d10:	431bde83 	.word	0x431bde83
 8002d14:	10624dd3 	.word	0x10624dd3

08002d18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	461a      	mov	r2, r3
 8002d24:	460b      	mov	r3, r1
 8002d26:	817b      	strh	r3, [r7, #10]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d2c:	f7ff faf8 	bl	8002320 <HAL_GetTick>
 8002d30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	f040 80e0 	bne.w	8002f00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2319      	movs	r3, #25
 8002d46:	2201      	movs	r2, #1
 8002d48:	4970      	ldr	r1, [pc, #448]	@ (8002f0c <HAL_I2C_Master_Transmit+0x1f4>)
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fcb4 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
 8002d58:	e0d3      	b.n	8002f02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_I2C_Master_Transmit+0x50>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e0cc      	b.n	8002f02 <HAL_I2C_Master_Transmit+0x1ea>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d007      	beq.n	8002d8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0201 	orr.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2221      	movs	r2, #33	@ 0x21
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2210      	movs	r2, #16
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	893a      	ldrh	r2, [r7, #8]
 8002dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a50      	ldr	r2, [pc, #320]	@ (8002f10 <HAL_I2C_Master_Transmit+0x1f8>)
 8002dce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dd0:	8979      	ldrh	r1, [r7, #10]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fb04 	bl	80033e4 <I2C_MasterRequestWrite>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e08d      	b.n	8002f02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002dfc:	e066      	b.n	8002ecc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	6a39      	ldr	r1, [r7, #32]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fd72 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d107      	bne.n	8002e26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e06b      	b.n	8002f02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	781a      	ldrb	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d11b      	bne.n	8002ea0 <HAL_I2C_Master_Transmit+0x188>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d017      	beq.n	8002ea0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	6a39      	ldr	r1, [r7, #32]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fd69 	bl	800397c <I2C_WaitOnBTFFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00d      	beq.n	8002ecc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d107      	bne.n	8002ec8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e01a      	b.n	8002f02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d194      	bne.n	8002dfe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	00100002 	.word	0x00100002
 8002f10:	ffff0000 	.word	0xffff0000

08002f14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08c      	sub	sp, #48	@ 0x30
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	4608      	mov	r0, r1
 8002f1e:	4611      	mov	r1, r2
 8002f20:	461a      	mov	r2, r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	817b      	strh	r3, [r7, #10]
 8002f26:	460b      	mov	r3, r1
 8002f28:	813b      	strh	r3, [r7, #8]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f32:	f7ff f9f5 	bl	8002320 <HAL_GetTick>
 8002f36:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	f040 8244 	bne.w	80033ce <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2319      	movs	r3, #25
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4982      	ldr	r1, [pc, #520]	@ (8003158 <HAL_I2C_Mem_Read+0x244>)
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fbb1 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e237      	b.n	80033d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_I2C_Mem_Read+0x5a>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e230      	b.n	80033d0 <HAL_I2C_Mem_Read+0x4bc>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d007      	beq.n	8002f94 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2222      	movs	r2, #34	@ 0x22
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2240      	movs	r2, #64	@ 0x40
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a62      	ldr	r2, [pc, #392]	@ (800315c <HAL_I2C_Mem_Read+0x248>)
 8002fd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fd6:	88f8      	ldrh	r0, [r7, #6]
 8002fd8:	893a      	ldrh	r2, [r7, #8]
 8002fda:	8979      	ldrh	r1, [r7, #10]
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fa7e 	bl	80034e8 <I2C_RequestMemoryRead>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e1ec      	b.n	80033d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d113      	bne.n	8003026 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e1c0      	b.n	80033a8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	2b01      	cmp	r3, #1
 800302c:	d11e      	bne.n	800306c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800303c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800303e:	b672      	cpsid	i
}
 8003040:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003066:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003068:	b662      	cpsie	i
}
 800306a:	e035      	b.n	80030d8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003070:	2b02      	cmp	r3, #2
 8003072:	d11e      	bne.n	80030b2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003082:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003084:	b672      	cpsid	i
}
 8003086:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030ae:	b662      	cpsie	i
}
 80030b0:	e012      	b.n	80030d8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80030d8:	e166      	b.n	80033a8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030de:	2b03      	cmp	r3, #3
 80030e0:	f200 811f 	bhi.w	8003322 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d123      	bne.n	8003134 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fc8b 	bl	8003a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e167      	b.n	80033d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003132:	e139      	b.n	80033a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003138:	2b02      	cmp	r3, #2
 800313a:	d152      	bne.n	80031e2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003142:	2200      	movs	r2, #0
 8003144:	4906      	ldr	r1, [pc, #24]	@ (8003160 <HAL_I2C_Mem_Read+0x24c>)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fab6 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e13c      	b.n	80033d0 <HAL_I2C_Mem_Read+0x4bc>
 8003156:	bf00      	nop
 8003158:	00100002 	.word	0x00100002
 800315c:	ffff0000 	.word	0xffff0000
 8003160:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003164:	b672      	cpsid	i
}
 8003166:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003176:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031aa:	b662      	cpsie	i
}
 80031ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031e0:	e0e2      	b.n	80033a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e8:	2200      	movs	r2, #0
 80031ea:	497b      	ldr	r1, [pc, #492]	@ (80033d8 <HAL_I2C_Mem_Read+0x4c4>)
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fa63 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0e9      	b.n	80033d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800320a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800320c:	b672      	cpsid	i
}
 800320e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003242:	4b66      	ldr	r3, [pc, #408]	@ (80033dc <HAL_I2C_Mem_Read+0x4c8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	08db      	lsrs	r3, r3, #3
 8003248:	4a65      	ldr	r2, [pc, #404]	@ (80033e0 <HAL_I2C_Mem_Read+0x4cc>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	0a1a      	lsrs	r2, r3, #8
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00da      	lsls	r2, r3, #3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	3b01      	subs	r3, #1
 8003260:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d118      	bne.n	800329a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	f043 0220 	orr.w	r2, r3, #32
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800328a:	b662      	cpsie	i
}
 800328c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e09a      	b.n	80033d0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d1d9      	bne.n	800325c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032ea:	b662      	cpsie	i
}
 80032ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003320:	e042      	b.n	80033a8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003324:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 fb70 	bl	8003a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e04c      	b.n	80033d0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d118      	bne.n	80033a8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f47f ae94 	bne.w	80030da <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
  }
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3728      	adds	r7, #40	@ 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	00010004 	.word	0x00010004
 80033dc:	20000014 	.word	0x20000014
 80033e0:	14f8b589 	.word	0x14f8b589

080033e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	460b      	mov	r3, r1
 80033f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d006      	beq.n	800340e <I2C_MasterRequestWrite+0x2a>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d003      	beq.n	800340e <I2C_MasterRequestWrite+0x2a>
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800340c:	d108      	bne.n	8003420 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e00b      	b.n	8003438 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003424:	2b12      	cmp	r3, #18
 8003426:	d107      	bne.n	8003438 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003436:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f937 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800345e:	d103      	bne.n	8003468 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003466:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e035      	b.n	80034d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003474:	d108      	bne.n	8003488 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003484:	611a      	str	r2, [r3, #16]
 8003486:	e01b      	b.n	80034c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003488:	897b      	ldrh	r3, [r7, #10]
 800348a:	11db      	asrs	r3, r3, #7
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f003 0306 	and.w	r3, r3, #6
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f063 030f 	orn	r3, r3, #15
 8003498:	b2da      	uxtb	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	490e      	ldr	r1, [pc, #56]	@ (80034e0 <I2C_MasterRequestWrite+0xfc>)
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f980 	bl	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e010      	b.n	80034d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034b6:	897b      	ldrh	r3, [r7, #10]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4907      	ldr	r1, [pc, #28]	@ (80034e4 <I2C_MasterRequestWrite+0x100>)
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f970 	bl	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	00010008 	.word	0x00010008
 80034e4:	00010002 	.word	0x00010002

080034e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	4608      	mov	r0, r1
 80034f2:	4611      	mov	r1, r2
 80034f4:	461a      	mov	r2, r3
 80034f6:	4603      	mov	r3, r0
 80034f8:	817b      	strh	r3, [r7, #10]
 80034fa:	460b      	mov	r3, r1
 80034fc:	813b      	strh	r3, [r7, #8]
 80034fe:	4613      	mov	r3, r2
 8003500:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003510:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003520:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	2200      	movs	r2, #0
 800352a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f8c2 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003548:	d103      	bne.n	8003552 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003550:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0aa      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003556:	897b      	ldrh	r3, [r7, #10]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003564:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003568:	6a3a      	ldr	r2, [r7, #32]
 800356a:	4952      	ldr	r1, [pc, #328]	@ (80036b4 <I2C_RequestMemoryRead+0x1cc>)
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 f91d 	bl	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e097      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003594:	6a39      	ldr	r1, [r7, #32]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f9a8 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d107      	bne.n	80035ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e076      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d105      	bne.n	80035d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035c4:	893b      	ldrh	r3, [r7, #8]
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	611a      	str	r2, [r3, #16]
 80035ce:	e021      	b.n	8003614 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035d0:	893b      	ldrh	r3, [r7, #8]
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e0:	6a39      	ldr	r1, [r7, #32]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f982 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00d      	beq.n	800360a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d107      	bne.n	8003606 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003604:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e050      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800360a:	893b      	ldrh	r3, [r7, #8]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003616:	6a39      	ldr	r1, [r7, #32]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f967 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	2b04      	cmp	r3, #4
 800362a:	d107      	bne.n	800363c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e035      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800364e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	2200      	movs	r2, #0
 8003658:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f82b 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00d      	beq.n	8003684 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003676:	d103      	bne.n	8003680 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800367e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e013      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003684:	897b      	ldrh	r3, [r7, #10]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	6a3a      	ldr	r2, [r7, #32]
 8003698:	4906      	ldr	r1, [pc, #24]	@ (80036b4 <I2C_RequestMemoryRead+0x1cc>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f886 	bl	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	00010002 	.word	0x00010002

080036b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	4613      	mov	r3, r2
 80036c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c8:	e048      	b.n	800375c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d044      	beq.n	800375c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d2:	f7fe fe25 	bl	8002320 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d139      	bne.n	800375c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	0c1b      	lsrs	r3, r3, #16
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d10d      	bne.n	800370e <I2C_WaitOnFlagUntilTimeout+0x56>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	43da      	mvns	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4013      	ands	r3, r2
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	e00c      	b.n	8003728 <I2C_WaitOnFlagUntilTimeout+0x70>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	43da      	mvns	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4013      	ands	r3, r2
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	429a      	cmp	r2, r3
 800372c:	d116      	bne.n	800375c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e023      	b.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	0c1b      	lsrs	r3, r3, #16
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d10d      	bne.n	8003782 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	43da      	mvns	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	e00c      	b.n	800379c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	43da      	mvns	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4013      	ands	r3, r2
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d093      	beq.n	80036ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037ba:	e071      	b.n	80038a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ca:	d123      	bne.n	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	f043 0204 	orr.w	r2, r3, #4
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e067      	b.n	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d041      	beq.n	80038a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381c:	f7fe fd80 	bl	8002320 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	d302      	bcc.n	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d136      	bne.n	80038a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d10c      	bne.n	8003856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	43da      	mvns	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4013      	ands	r3, r2
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	bf14      	ite	ne
 800384e:	2301      	movne	r3, #1
 8003850:	2300      	moveq	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e00b      	b.n	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	43da      	mvns	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4013      	ands	r3, r2
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d016      	beq.n	80038a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388c:	f043 0220 	orr.w	r2, r3, #32
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e021      	b.n	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d10c      	bne.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	43da      	mvns	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4013      	ands	r3, r2
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf14      	ite	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	2300      	moveq	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	e00b      	b.n	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4013      	ands	r3, r2
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bf14      	ite	ne
 80038d6:	2301      	movne	r3, #1
 80038d8:	2300      	moveq	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f47f af6d 	bne.w	80037bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f8:	e034      	b.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f8e3 	bl	8003ac6 <I2C_IsAcknowledgeFailed>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e034      	b.n	8003974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d028      	beq.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fe fd05 	bl	8002320 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d11d      	bne.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003932:	2b80      	cmp	r3, #128	@ 0x80
 8003934:	d016      	beq.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e007      	b.n	8003974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396e:	2b80      	cmp	r3, #128	@ 0x80
 8003970:	d1c3      	bne.n	80038fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003988:	e034      	b.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f89b 	bl	8003ac6 <I2C_IsAcknowledgeFailed>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e034      	b.n	8003a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d028      	beq.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fe fcbd 	bl	8002320 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d11d      	bne.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d016      	beq.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e007      	b.n	8003a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d1c3      	bne.n	800398a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a18:	e049      	b.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d119      	bne.n	8003a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0210 	mvn.w	r2, #16
 8003a30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e030      	b.n	8003abe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5c:	f7fe fc60 	bl	8002320 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d302      	bcc.n	8003a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d11d      	bne.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7c:	2b40      	cmp	r3, #64	@ 0x40
 8003a7e:	d016      	beq.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	f043 0220 	orr.w	r2, r3, #32
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e007      	b.n	8003abe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab8:	2b40      	cmp	r3, #64	@ 0x40
 8003aba:	d1ae      	bne.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003adc:	d11b      	bne.n	8003b16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ae6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b02:	f043 0204 	orr.w	r2, r3, #4
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr
	...

08003b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e272      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8087 	beq.w	8003c52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b44:	4b92      	ldr	r3, [pc, #584]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d00c      	beq.n	8003b6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b50:	4b8f      	ldr	r3, [pc, #572]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d112      	bne.n	8003b82 <HAL_RCC_OscConfig+0x5e>
 8003b5c:	4b8c      	ldr	r3, [pc, #560]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b68:	d10b      	bne.n	8003b82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6a:	4b89      	ldr	r3, [pc, #548]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d06c      	beq.n	8003c50 <HAL_RCC_OscConfig+0x12c>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d168      	bne.n	8003c50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e24c      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8a:	d106      	bne.n	8003b9a <HAL_RCC_OscConfig+0x76>
 8003b8c:	4b80      	ldr	r3, [pc, #512]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a7f      	ldr	r2, [pc, #508]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	e02e      	b.n	8003bf8 <HAL_RCC_OscConfig+0xd4>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x98>
 8003ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a7a      	ldr	r2, [pc, #488]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b78      	ldr	r3, [pc, #480]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a77      	ldr	r2, [pc, #476]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e01d      	b.n	8003bf8 <HAL_RCC_OscConfig+0xd4>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bc4:	d10c      	bne.n	8003be0 <HAL_RCC_OscConfig+0xbc>
 8003bc6:	4b72      	ldr	r3, [pc, #456]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a71      	ldr	r2, [pc, #452]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	4b6f      	ldr	r3, [pc, #444]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a6e      	ldr	r2, [pc, #440]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e00b      	b.n	8003bf8 <HAL_RCC_OscConfig+0xd4>
 8003be0:	4b6b      	ldr	r3, [pc, #428]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a6a      	ldr	r2, [pc, #424]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	4b68      	ldr	r3, [pc, #416]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a67      	ldr	r2, [pc, #412]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d013      	beq.n	8003c28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe fb8e 	bl	8002320 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c08:	f7fe fb8a 	bl	8002320 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	@ 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e200      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0xe4>
 8003c26:	e014      	b.n	8003c52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fe fb7a 	bl	8002320 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c30:	f7fe fb76 	bl	8002320 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	@ 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e1ec      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c42:	4b53      	ldr	r3, [pc, #332]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x10c>
 8003c4e:	e000      	b.n	8003c52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d063      	beq.n	8003d26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c6a:	4b49      	ldr	r3, [pc, #292]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d11c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x18c>
 8003c76:	4b46      	ldr	r3, [pc, #280]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d116      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c82:	4b43      	ldr	r3, [pc, #268]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_RCC_OscConfig+0x176>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e1c0      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4939      	ldr	r1, [pc, #228]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cae:	e03a      	b.n	8003d26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb8:	4b36      	ldr	r3, [pc, #216]	@ (8003d94 <HAL_RCC_OscConfig+0x270>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fe fb2f 	bl	8002320 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc6:	f7fe fb2b 	bl	8002320 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e1a1      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4927      	ldr	r1, [pc, #156]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	600b      	str	r3, [r1, #0]
 8003cf8:	e015      	b.n	8003d26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfa:	4b26      	ldr	r3, [pc, #152]	@ (8003d94 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fe fb0e 	bl	8002320 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d08:	f7fe fb0a 	bl	8002320 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e180      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d03a      	beq.n	8003da8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d019      	beq.n	8003d6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d3a:	4b17      	ldr	r3, [pc, #92]	@ (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d40:	f7fe faee 	bl	8002320 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d48:	f7fe faea 	bl	8002320 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e160      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d66:	2001      	movs	r0, #1
 8003d68:	f000 fafe 	bl	8004368 <RCC_Delay>
 8003d6c:	e01c      	b.n	8003da8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d74:	f7fe fad4 	bl	8002320 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d7a:	e00f      	b.n	8003d9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d7c:	f7fe fad0 	bl	8002320 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d908      	bls.n	8003d9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e146      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	42420000 	.word	0x42420000
 8003d98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9c:	4b92      	ldr	r3, [pc, #584]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e9      	bne.n	8003d7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80a6 	beq.w	8003f02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db6:	2300      	movs	r3, #0
 8003db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dba:	4b8b      	ldr	r3, [pc, #556]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc6:	4b88      	ldr	r3, [pc, #544]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	4a87      	ldr	r2, [pc, #540]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	61d3      	str	r3, [r2, #28]
 8003dd2:	4b85      	ldr	r3, [pc, #532]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de2:	4b82      	ldr	r3, [pc, #520]	@ (8003fec <HAL_RCC_OscConfig+0x4c8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d118      	bne.n	8003e20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dee:	4b7f      	ldr	r3, [pc, #508]	@ (8003fec <HAL_RCC_OscConfig+0x4c8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a7e      	ldr	r2, [pc, #504]	@ (8003fec <HAL_RCC_OscConfig+0x4c8>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfa:	f7fe fa91 	bl	8002320 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e02:	f7fe fa8d 	bl	8002320 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b64      	cmp	r3, #100	@ 0x64
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e103      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e14:	4b75      	ldr	r3, [pc, #468]	@ (8003fec <HAL_RCC_OscConfig+0x4c8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d106      	bne.n	8003e36 <HAL_RCC_OscConfig+0x312>
 8003e28:	4b6f      	ldr	r3, [pc, #444]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	6213      	str	r3, [r2, #32]
 8003e34:	e02d      	b.n	8003e92 <HAL_RCC_OscConfig+0x36e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x334>
 8003e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4a69      	ldr	r2, [pc, #420]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	6213      	str	r3, [r2, #32]
 8003e4a:	4b67      	ldr	r3, [pc, #412]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	4a66      	ldr	r2, [pc, #408]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	f023 0304 	bic.w	r3, r3, #4
 8003e54:	6213      	str	r3, [r2, #32]
 8003e56:	e01c      	b.n	8003e92 <HAL_RCC_OscConfig+0x36e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b05      	cmp	r3, #5
 8003e5e:	d10c      	bne.n	8003e7a <HAL_RCC_OscConfig+0x356>
 8003e60:	4b61      	ldr	r3, [pc, #388]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4a60      	ldr	r2, [pc, #384]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e66:	f043 0304 	orr.w	r3, r3, #4
 8003e6a:	6213      	str	r3, [r2, #32]
 8003e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	4a5d      	ldr	r2, [pc, #372]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6213      	str	r3, [r2, #32]
 8003e78:	e00b      	b.n	8003e92 <HAL_RCC_OscConfig+0x36e>
 8003e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4a5a      	ldr	r2, [pc, #360]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	6213      	str	r3, [r2, #32]
 8003e86:	4b58      	ldr	r3, [pc, #352]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	4a57      	ldr	r2, [pc, #348]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d015      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7fe fa41 	bl	8002320 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7fe fa3d 	bl	8002320 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e0b1      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ee      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x37e>
 8003ec4:	e014      	b.n	8003ef0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fa2b 	bl	8002320 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fe fa27 	bl	8002320 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e09b      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee4:	4b40      	ldr	r3, [pc, #256]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ee      	bne.n	8003ece <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d105      	bne.n	8003f02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef6:	4b3c      	ldr	r3, [pc, #240]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	4a3b      	ldr	r2, [pc, #236]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8087 	beq.w	800401a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f0c:	4b36      	ldr	r3, [pc, #216]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d061      	beq.n	8003fdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d146      	bne.n	8003fae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f20:	4b33      	ldr	r3, [pc, #204]	@ (8003ff0 <HAL_RCC_OscConfig+0x4cc>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f26:	f7fe f9fb 	bl	8002320 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2e:	f7fe f9f7 	bl	8002320 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e06d      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f40:	4b29      	ldr	r3, [pc, #164]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f0      	bne.n	8003f2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f54:	d108      	bne.n	8003f68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f56:	4b24      	ldr	r3, [pc, #144]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	4921      	ldr	r1, [pc, #132]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f68:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a19      	ldr	r1, [r3, #32]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	491b      	ldr	r1, [pc, #108]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f80:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff0 <HAL_RCC_OscConfig+0x4cc>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f86:	f7fe f9cb 	bl	8002320 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8e:	f7fe f9c7 	bl	8002320 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e03d      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fa0:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCC_OscConfig+0x46a>
 8003fac:	e035      	b.n	800401a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fae:	4b10      	ldr	r3, [pc, #64]	@ (8003ff0 <HAL_RCC_OscConfig+0x4cc>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fe f9b4 	bl	8002320 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fe f9b0 	bl	8002320 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e026      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fce:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x498>
 8003fda:	e01e      	b.n	800401a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e019      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <HAL_RCC_OscConfig+0x500>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	429a      	cmp	r2, r3
 8004006:	d106      	bne.n	8004016 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d001      	beq.n	800401a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000

08004028 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0d0      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800403c:	4b6a      	ldr	r3, [pc, #424]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d910      	bls.n	800406c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b67      	ldr	r3, [pc, #412]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 0207 	bic.w	r2, r3, #7
 8004052:	4965      	ldr	r1, [pc, #404]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b63      	ldr	r3, [pc, #396]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0b8      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004084:	4b59      	ldr	r3, [pc, #356]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a58      	ldr	r2, [pc, #352]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 800408a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800408e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800409c:	4b53      	ldr	r3, [pc, #332]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	4a52      	ldr	r2, [pc, #328]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80040a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80040a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a8:	4b50      	ldr	r3, [pc, #320]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	494d      	ldr	r1, [pc, #308]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d040      	beq.n	8004148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d107      	bne.n	80040de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	4b47      	ldr	r3, [pc, #284]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d115      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e07f      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e6:	4b41      	ldr	r3, [pc, #260]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e073      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f6:	4b3d      	ldr	r3, [pc, #244]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e06b      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004106:	4b39      	ldr	r3, [pc, #228]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f023 0203 	bic.w	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4936      	ldr	r1, [pc, #216]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	4313      	orrs	r3, r2
 8004116:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004118:	f7fe f902 	bl	8002320 <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	e00a      	b.n	8004136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004120:	f7fe f8fe 	bl	8002320 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e053      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004136:	4b2d      	ldr	r3, [pc, #180]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 020c 	and.w	r2, r3, #12
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	429a      	cmp	r2, r3
 8004146:	d1eb      	bne.n	8004120 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004148:	4b27      	ldr	r3, [pc, #156]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d210      	bcs.n	8004178 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b24      	ldr	r3, [pc, #144]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 0207 	bic.w	r2, r3, #7
 800415e:	4922      	ldr	r1, [pc, #136]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b20      	ldr	r3, [pc, #128]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e032      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004184:	4b19      	ldr	r3, [pc, #100]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4916      	ldr	r1, [pc, #88]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041a2:	4b12      	ldr	r3, [pc, #72]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	490e      	ldr	r1, [pc, #56]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041b6:	f000 f821 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80041ba:	4602      	mov	r2, r0
 80041bc:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	490a      	ldr	r1, [pc, #40]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041c8:	5ccb      	ldrb	r3, [r1, r3]
 80041ca:	fa22 f303 	lsr.w	r3, r2, r3
 80041ce:	4a09      	ldr	r2, [pc, #36]	@ (80041f4 <HAL_RCC_ClockConfig+0x1cc>)
 80041d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041d2:	4b09      	ldr	r3, [pc, #36]	@ (80041f8 <HAL_RCC_ClockConfig+0x1d0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fd fbe2 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40022000 	.word	0x40022000
 80041ec:	40021000 	.word	0x40021000
 80041f0:	0800afd4 	.word	0x0800afd4
 80041f4:	20000014 	.word	0x20000014
 80041f8:	20000018 	.word	0x20000018

080041fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004216:	4b1e      	ldr	r3, [pc, #120]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x94>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b04      	cmp	r3, #4
 8004224:	d002      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x30>
 8004226:	2b08      	cmp	r3, #8
 8004228:	d003      	beq.n	8004232 <HAL_RCC_GetSysClockFreq+0x36>
 800422a:	e027      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800422c:	4b19      	ldr	r3, [pc, #100]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x98>)
 800422e:	613b      	str	r3, [r7, #16]
      break;
 8004230:	e027      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	0c9b      	lsrs	r3, r3, #18
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	4a17      	ldr	r2, [pc, #92]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x9c>)
 800423c:	5cd3      	ldrb	r3, [r2, r3]
 800423e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d010      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800424a:	4b11      	ldr	r3, [pc, #68]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x94>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	0c5b      	lsrs	r3, r3, #17
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	4a11      	ldr	r2, [pc, #68]	@ (800429c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004256:	5cd3      	ldrb	r3, [r2, r3]
 8004258:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a0d      	ldr	r2, [pc, #52]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x98>)
 800425e:	fb03 f202 	mul.w	r2, r3, r2
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e004      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a0c      	ldr	r2, [pc, #48]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004270:	fb02 f303 	mul.w	r3, r2, r3
 8004274:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	613b      	str	r3, [r7, #16]
      break;
 800427a:	e002      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800427c:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x98>)
 800427e:	613b      	str	r3, [r7, #16]
      break;
 8004280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004282:	693b      	ldr	r3, [r7, #16]
}
 8004284:	4618      	mov	r0, r3
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	007a1200 	.word	0x007a1200
 8004298:	0800afec 	.word	0x0800afec
 800429c:	0800affc 	.word	0x0800affc
 80042a0:	003d0900 	.word	0x003d0900

080042a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a8:	4b02      	ldr	r3, [pc, #8]	@ (80042b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80042aa:	681b      	ldr	r3, [r3, #0]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr
 80042b4:	20000014 	.word	0x20000014

080042b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042bc:	f7ff fff2 	bl	80042a4 <HAL_RCC_GetHCLKFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	4903      	ldr	r1, [pc, #12]	@ (80042dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	0800afe4 	.word	0x0800afe4

080042e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042e4:	f7ff ffde 	bl	80042a4 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	@ (8004300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	0adb      	lsrs	r3, r3, #11
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4903      	ldr	r1, [pc, #12]	@ (8004304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40021000 	.word	0x40021000
 8004304:	0800afe4 	.word	0x0800afe4

08004308 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	220f      	movs	r2, #15
 8004316:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004318:	4b11      	ldr	r3, [pc, #68]	@ (8004360 <HAL_RCC_GetClockConfig+0x58>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0203 	and.w	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004324:	4b0e      	ldr	r3, [pc, #56]	@ (8004360 <HAL_RCC_GetClockConfig+0x58>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_RCC_GetClockConfig+0x58>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800433c:	4b08      	ldr	r3, [pc, #32]	@ (8004360 <HAL_RCC_GetClockConfig+0x58>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	08db      	lsrs	r3, r3, #3
 8004342:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800434a:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0207 	and.w	r2, r3, #7
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr
 8004360:	40021000 	.word	0x40021000
 8004364:	40022000 	.word	0x40022000

08004368 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004370:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <RCC_Delay+0x34>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a0a      	ldr	r2, [pc, #40]	@ (80043a0 <RCC_Delay+0x38>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	0a5b      	lsrs	r3, r3, #9
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004384:	bf00      	nop
  }
  while (Delay --);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	60fa      	str	r2, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f9      	bne.n	8004384 <RCC_Delay+0x1c>
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	20000014 	.word	0x20000014
 80043a0:	10624dd3 	.word	0x10624dd3

080043a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d07d      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80043c0:	2300      	movs	r3, #0
 80043c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10d      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	4a4b      	ldr	r2, [pc, #300]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043da:	61d3      	str	r3, [r2, #28]
 80043dc:	4b49      	ldr	r3, [pc, #292]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043e8:	2301      	movs	r3, #1
 80043ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ec:	4b46      	ldr	r3, [pc, #280]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d118      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043f8:	4b43      	ldr	r3, [pc, #268]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a42      	ldr	r2, [pc, #264]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004402:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004404:	f7fd ff8c 	bl	8002320 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440a:	e008      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440c:	f7fd ff88 	bl	8002320 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	@ 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e06d      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441e:	4b3a      	ldr	r3, [pc, #232]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800442a:	4b36      	ldr	r3, [pc, #216]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004432:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d02e      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d027      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004448:	4b2e      	ldr	r3, [pc, #184]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004450:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004452:	4b2e      	ldr	r3, [pc, #184]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004458:	4b2c      	ldr	r3, [pc, #176]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800445e:	4a29      	ldr	r2, [pc, #164]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d014      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fd ff57 	bl	8002320 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	e00a      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7fd ff53 	bl	8002320 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e036      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448c:	4b1d      	ldr	r3, [pc, #116]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ee      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004498:	4b1a      	ldr	r3, [pc, #104]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4917      	ldr	r1, [pc, #92]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b0:	4b14      	ldr	r3, [pc, #80]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	4a13      	ldr	r2, [pc, #76]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	490b      	ldr	r1, [pc, #44]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044e6:	4b07      	ldr	r3, [pc, #28]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	4904      	ldr	r1, [pc, #16]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	40007000 	.word	0x40007000
 800450c:	42420440 	.word	0x42420440

08004510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e041      	b.n	80045a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fd f9c2 	bl	80018c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3304      	adds	r3, #4
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f000 fabe 	bl	8004ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d001      	beq.n	80045c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e032      	b.n	800462e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a18      	ldr	r2, [pc, #96]	@ (8004638 <HAL_TIM_Base_Start+0x88>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00e      	beq.n	80045f8 <HAL_TIM_Base_Start+0x48>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e2:	d009      	beq.n	80045f8 <HAL_TIM_Base_Start+0x48>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a14      	ldr	r2, [pc, #80]	@ (800463c <HAL_TIM_Base_Start+0x8c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_TIM_Base_Start+0x48>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a13      	ldr	r2, [pc, #76]	@ (8004640 <HAL_TIM_Base_Start+0x90>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d111      	bne.n	800461c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b06      	cmp	r3, #6
 8004608:	d010      	beq.n	800462c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0201 	orr.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461a:	e007      	b.n	800462c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800

08004644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b01      	cmp	r3, #1
 8004656:	d001      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e03a      	b.n	80046d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a18      	ldr	r2, [pc, #96]	@ (80046dc <HAL_TIM_Base_Start_IT+0x98>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00e      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x58>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004686:	d009      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x58>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a14      	ldr	r2, [pc, #80]	@ (80046e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x58>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a13      	ldr	r2, [pc, #76]	@ (80046e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d111      	bne.n	80046c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b06      	cmp	r3, #6
 80046ac:	d010      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0201 	orr.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046be:	e007      	b.n	80046d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	40012c00 	.word	0x40012c00
 80046e0:	40000400 	.word	0x40000400
 80046e4:	40000800 	.word	0x40000800

080046e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d122      	bne.n	8004744 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b02      	cmp	r3, #2
 800470a:	d11b      	bne.n	8004744 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0202 	mvn.w	r2, #2
 8004714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f9b4 	bl	8004a98 <HAL_TIM_IC_CaptureCallback>
 8004730:	e005      	b.n	800473e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f9a7 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f9b6 	bl	8004aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b04      	cmp	r3, #4
 8004750:	d122      	bne.n	8004798 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b04      	cmp	r3, #4
 800475e:	d11b      	bne.n	8004798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0204 	mvn.w	r2, #4
 8004768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2202      	movs	r2, #2
 800476e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f98a 	bl	8004a98 <HAL_TIM_IC_CaptureCallback>
 8004784:	e005      	b.n	8004792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f97d 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f98c 	bl	8004aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d122      	bne.n	80047ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d11b      	bne.n	80047ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0208 	mvn.w	r2, #8
 80047bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2204      	movs	r2, #4
 80047c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f960 	bl	8004a98 <HAL_TIM_IC_CaptureCallback>
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f953 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f962 	bl	8004aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d122      	bne.n	8004840 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b10      	cmp	r3, #16
 8004806:	d11b      	bne.n	8004840 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0210 	mvn.w	r2, #16
 8004810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2208      	movs	r2, #8
 8004816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f936 	bl	8004a98 <HAL_TIM_IC_CaptureCallback>
 800482c:	e005      	b.n	800483a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f929 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f938 	bl	8004aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b01      	cmp	r3, #1
 800484c:	d10e      	bne.n	800486c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b01      	cmp	r3, #1
 800485a:	d107      	bne.n	800486c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0201 	mvn.w	r2, #1
 8004864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc ff9c 	bl	80017a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004876:	2b80      	cmp	r3, #128	@ 0x80
 8004878:	d10e      	bne.n	8004898 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004884:	2b80      	cmp	r3, #128	@ 0x80
 8004886:	d107      	bne.n	8004898 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fa7b 	bl	8004d8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a2:	2b40      	cmp	r3, #64	@ 0x40
 80048a4:	d10e      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b0:	2b40      	cmp	r3, #64	@ 0x40
 80048b2:	d107      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f8fc 	bl	8004abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d10e      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d107      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0220 	mvn.w	r2, #32
 80048e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fa46 	bl	8004d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_TIM_ConfigClockSource+0x1c>
 8004910:	2302      	movs	r3, #2
 8004912:	e0b4      	b.n	8004a7e <HAL_TIM_ConfigClockSource+0x186>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800493a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800494c:	d03e      	beq.n	80049cc <HAL_TIM_ConfigClockSource+0xd4>
 800494e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004952:	f200 8087 	bhi.w	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 8004956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800495a:	f000 8086 	beq.w	8004a6a <HAL_TIM_ConfigClockSource+0x172>
 800495e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004962:	d87f      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 8004964:	2b70      	cmp	r3, #112	@ 0x70
 8004966:	d01a      	beq.n	800499e <HAL_TIM_ConfigClockSource+0xa6>
 8004968:	2b70      	cmp	r3, #112	@ 0x70
 800496a:	d87b      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 800496c:	2b60      	cmp	r3, #96	@ 0x60
 800496e:	d050      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x11a>
 8004970:	2b60      	cmp	r3, #96	@ 0x60
 8004972:	d877      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b50      	cmp	r3, #80	@ 0x50
 8004976:	d03c      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004978:	2b50      	cmp	r3, #80	@ 0x50
 800497a:	d873      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 800497c:	2b40      	cmp	r3, #64	@ 0x40
 800497e:	d058      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x13a>
 8004980:	2b40      	cmp	r3, #64	@ 0x40
 8004982:	d86f      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 8004984:	2b30      	cmp	r3, #48	@ 0x30
 8004986:	d064      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x15a>
 8004988:	2b30      	cmp	r3, #48	@ 0x30
 800498a:	d86b      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 800498c:	2b20      	cmp	r3, #32
 800498e:	d060      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x15a>
 8004990:	2b20      	cmp	r3, #32
 8004992:	d867      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d05c      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x15a>
 8004998:	2b10      	cmp	r3, #16
 800499a:	d05a      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x15a>
 800499c:	e062      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049ae:	f000 f968 	bl	8004c82 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	609a      	str	r2, [r3, #8]
      break;
 80049ca:	e04f      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049dc:	f000 f951 	bl	8004c82 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049ee:	609a      	str	r2, [r3, #8]
      break;
 80049f0:	e03c      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fe:	461a      	mov	r2, r3
 8004a00:	f000 f8c8 	bl	8004b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2150      	movs	r1, #80	@ 0x50
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f91f 	bl	8004c4e <TIM_ITRx_SetConfig>
      break;
 8004a10:	e02c      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f000 f8e6 	bl	8004bf0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2160      	movs	r1, #96	@ 0x60
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 f90f 	bl	8004c4e <TIM_ITRx_SetConfig>
      break;
 8004a30:	e01c      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f000 f8a8 	bl	8004b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2140      	movs	r1, #64	@ 0x40
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f8ff 	bl	8004c4e <TIM_ITRx_SetConfig>
      break;
 8004a50:	e00c      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f000 f8f6 	bl	8004c4e <TIM_ITRx_SetConfig>
      break;
 8004a62:	e003      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      break;
 8004a68:	e000      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr

08004aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr
	...

08004ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a29      	ldr	r2, [pc, #164]	@ (8004b88 <TIM_Base_SetConfig+0xb8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00b      	beq.n	8004b00 <TIM_Base_SetConfig+0x30>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aee:	d007      	beq.n	8004b00 <TIM_Base_SetConfig+0x30>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a26      	ldr	r2, [pc, #152]	@ (8004b8c <TIM_Base_SetConfig+0xbc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_Base_SetConfig+0x30>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a25      	ldr	r2, [pc, #148]	@ (8004b90 <TIM_Base_SetConfig+0xc0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d108      	bne.n	8004b12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a1c      	ldr	r2, [pc, #112]	@ (8004b88 <TIM_Base_SetConfig+0xb8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00b      	beq.n	8004b32 <TIM_Base_SetConfig+0x62>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b20:	d007      	beq.n	8004b32 <TIM_Base_SetConfig+0x62>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a19      	ldr	r2, [pc, #100]	@ (8004b8c <TIM_Base_SetConfig+0xbc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d003      	beq.n	8004b32 <TIM_Base_SetConfig+0x62>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a18      	ldr	r2, [pc, #96]	@ (8004b90 <TIM_Base_SetConfig+0xc0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d108      	bne.n	8004b44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a07      	ldr	r2, [pc, #28]	@ (8004b88 <TIM_Base_SetConfig+0xb8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d103      	bne.n	8004b78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	615a      	str	r2, [r3, #20]
}
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40000800 	.word	0x40000800

08004b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	f023 0201 	bic.w	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f023 030a 	bic.w	r3, r3, #10
 8004bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr

08004bf0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f023 0210 	bic.w	r2, r3, #16
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	031b      	lsls	r3, r3, #12
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	621a      	str	r2, [r3, #32]
}
 8004c44:	bf00      	nop
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr

08004c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f043 0307 	orr.w	r3, r3, #7
 8004c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	609a      	str	r2, [r3, #8]
}
 8004c78:	bf00      	nop
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr

08004c82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b087      	sub	sp, #28
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]
 8004c8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	021a      	lsls	r2, r3, #8
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	609a      	str	r2, [r3, #8]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e046      	b.n	8004d66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a16      	ldr	r2, [pc, #88]	@ (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d24:	d009      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a12      	ldr	r2, [pc, #72]	@ (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a10      	ldr	r2, [pc, #64]	@ (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d10c      	bne.n	8004d54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800

08004d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr

08004d8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e042      	b.n	8004e38 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fc fd96 	bl	80018f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2224      	movs	r2, #36	@ 0x24
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fdc5 	bl	8005974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	@ 0x28
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d16d      	bne.n	8004f3c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <HAL_UART_Transmit+0x2c>
 8004e66:	88fb      	ldrh	r3, [r7, #6]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e066      	b.n	8004f3e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2221      	movs	r2, #33	@ 0x21
 8004e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e7e:	f7fd fa4f 	bl	8002320 <HAL_GetTick>
 8004e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	88fa      	ldrh	r2, [r7, #6]
 8004e88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	88fa      	ldrh	r2, [r7, #6]
 8004e8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e98:	d108      	bne.n	8004eac <HAL_UART_Transmit+0x6c>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d104      	bne.n	8004eac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	e003      	b.n	8004eb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004eb4:	e02a      	b.n	8004f0c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2180      	movs	r1, #128	@ 0x80
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fb14 	bl	80054ee <UART_WaitOnFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e036      	b.n	8004f3e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	3302      	adds	r3, #2
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	e007      	b.n	8004efe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	781a      	ldrb	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	3301      	adds	r3, #1
 8004efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1cf      	bne.n	8004eb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2140      	movs	r1, #64	@ 0x40
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fae4 	bl	80054ee <UART_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e006      	b.n	8004f3e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e000      	b.n	8004f3e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004f3c:	2302      	movs	r3, #2
  }
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	4613      	mov	r3, r2
 8004f52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d112      	bne.n	8004f86 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_UART_Receive_IT+0x26>
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e00b      	b.n	8004f88 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fb24 	bl	80055ca <UART_Start_Receive_IT>
 8004f82:	4603      	mov	r3, r0
 8004f84:	e000      	b.n	8004f88 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b0ba      	sub	sp, #232	@ 0xe8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10f      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x66>
 8004fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fc01 	bl	80057f6 <UART_Receive_IT>
      return;
 8004ff4:	e25b      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80de 	beq.w	80051bc <HAL_UART_IRQHandler+0x22c>
 8005000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005010:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80d1 	beq.w	80051bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00b      	beq.n	800503e <HAL_UART_IRQHandler+0xae>
 8005026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800502a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005036:	f043 0201 	orr.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800503e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_UART_IRQHandler+0xd2>
 800504a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505a:	f043 0202 	orr.w	r2, r3, #2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <HAL_UART_IRQHandler+0xf6>
 800506e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507e:	f043 0204 	orr.w	r2, r3, #4
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d011      	beq.n	80050b6 <HAL_UART_IRQHandler+0x126>
 8005092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800509e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ae:	f043 0208 	orr.w	r2, r3, #8
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 81f2 	beq.w	80054a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <HAL_UART_IRQHandler+0x14e>
 80050cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fb8c 	bl	80057f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <HAL_UART_IRQHandler+0x17a>
 8005102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d04f      	beq.n	80051aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa96 	bl	800563c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d041      	beq.n	80051a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3314      	adds	r3, #20
 8005124:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005134:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005138:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800513c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3314      	adds	r3, #20
 8005146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800514a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800514e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1d9      	bne.n	800511e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d013      	beq.n	800519a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005176:	4a7e      	ldr	r2, [pc, #504]	@ (8005370 <HAL_UART_IRQHandler+0x3e0>)
 8005178:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517e:	4618      	mov	r0, r3
 8005180:	f7fd fa42 	bl	8002608 <HAL_DMA_Abort_IT>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d016      	beq.n	80051b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005194:	4610      	mov	r0, r2
 8005196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005198:	e00e      	b.n	80051b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f993 	bl	80054c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a0:	e00a      	b.n	80051b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f98f 	bl	80054c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a8:	e006      	b.n	80051b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f98b 	bl	80054c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80051b6:	e175      	b.n	80054a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	bf00      	nop
    return;
 80051ba:	e173      	b.n	80054a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	f040 814f 	bne.w	8005464 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8148 	beq.w	8005464 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8141 	beq.w	8005464 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80b6 	beq.w	8005374 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005214:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8145 	beq.w	80054a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005226:	429a      	cmp	r2, r3
 8005228:	f080 813e 	bcs.w	80054a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005232:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	2b20      	cmp	r3, #32
 800523c:	f000 8088 	beq.w	8005350 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005256:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800525a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800525e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800526c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005270:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005278:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005284:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1d9      	bne.n	8005240 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3314      	adds	r3, #20
 8005292:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800529c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052b0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e1      	bne.n	800528c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3314      	adds	r3, #20
 80052ce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3314      	adds	r3, #20
 80052e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e3      	bne.n	80052c8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800531e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005332:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005334:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005338:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e3      	bne.n	800530e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534a:	4618      	mov	r0, r3
 800534c:	f7fd f921 	bl	8002592 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800535e:	b29b      	uxth	r3, r3
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	b29b      	uxth	r3, r3
 8005364:	4619      	mov	r1, r3
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f8b6 	bl	80054d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800536c:	e09c      	b.n	80054a8 <HAL_UART_IRQHandler+0x518>
 800536e:	bf00      	nop
 8005370:	08005701 	.word	0x08005701
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800537c:	b29b      	uxth	r3, r3
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 808e 	beq.w	80054ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005390:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8089 	beq.w	80054ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80053be:	647a      	str	r2, [r7, #68]	@ 0x44
 80053c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e3      	bne.n	800539a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	623b      	str	r3, [r7, #32]
   return(result);
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3314      	adds	r3, #20
 80053f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80053f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e3      	bne.n	80053d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	60fb      	str	r3, [r7, #12]
   return(result);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0310 	bic.w	r3, r3, #16
 800542e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	330c      	adds	r3, #12
 8005438:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800543c:	61fa      	str	r2, [r7, #28]
 800543e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	69b9      	ldr	r1, [r7, #24]
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	617b      	str	r3, [r7, #20]
   return(result);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e3      	bne.n	8005418 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f83b 	bl	80054d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005462:	e023      	b.n	80054ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546c:	2b00      	cmp	r3, #0
 800546e:	d009      	beq.n	8005484 <HAL_UART_IRQHandler+0x4f4>
 8005470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f953 	bl	8005728 <UART_Transmit_IT>
    return;
 8005482:	e014      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00e      	beq.n	80054ae <HAL_UART_IRQHandler+0x51e>
 8005490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f992 	bl	80057c6 <UART_EndTransmit_IT>
    return;
 80054a2:	e004      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
    return;
 80054a4:	bf00      	nop
 80054a6:	e002      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
      return;
 80054a8:	bf00      	nop
 80054aa:	e000      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
      return;
 80054ac:	bf00      	nop
  }
}
 80054ae:	37e8      	adds	r7, #232	@ 0xe8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr

080054ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b090      	sub	sp, #64	@ 0x40
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	603b      	str	r3, [r7, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054fe:	e050      	b.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d04c      	beq.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800550a:	2b00      	cmp	r3, #0
 800550c:	d007      	beq.n	800551e <UART_WaitOnFlagUntilTimeout+0x30>
 800550e:	f7fc ff07 	bl	8002320 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800551a:	429a      	cmp	r2, r3
 800551c:	d241      	bcs.n	80055a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	330c      	adds	r3, #12
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005534:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	330c      	adds	r3, #12
 800553c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800553e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005540:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005544:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e5      	bne.n	800551e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3314      	adds	r3, #20
 8005558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	613b      	str	r3, [r7, #16]
   return(result);
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	63bb      	str	r3, [r7, #56]	@ 0x38
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3314      	adds	r3, #20
 8005570:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005572:	623a      	str	r2, [r7, #32]
 8005574:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	69f9      	ldr	r1, [r7, #28]
 8005578:	6a3a      	ldr	r2, [r7, #32]
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e00f      	b.n	80055c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4013      	ands	r3, r2
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	bf0c      	ite	eq
 80055b2:	2301      	moveq	r3, #1
 80055b4:	2300      	movne	r3, #0
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d09f      	beq.n	8005500 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3740      	adds	r7, #64	@ 0x40
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	4613      	mov	r3, r2
 80055d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	88fa      	ldrh	r2, [r7, #6]
 80055e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2222      	movs	r2, #34	@ 0x22
 80055f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800560e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0220 	orr.w	r2, r2, #32
 800562e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b095      	sub	sp, #84	@ 0x54
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800565a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005664:	643a      	str	r2, [r7, #64]	@ 0x40
 8005666:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800566a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e5      	bne.n	8005644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3314      	adds	r3, #20
 800567e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	61fb      	str	r3, [r7, #28]
   return(result);
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f023 0301 	bic.w	r3, r3, #1
 800568e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3314      	adds	r3, #20
 8005696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005698:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800569a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800569e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e5      	bne.n	8005678 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d119      	bne.n	80056e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	330c      	adds	r3, #12
 80056ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f023 0310 	bic.w	r3, r3, #16
 80056ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056d4:	61ba      	str	r2, [r7, #24]
 80056d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	6979      	ldr	r1, [r7, #20]
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	613b      	str	r3, [r7, #16]
   return(result);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e5      	bne.n	80056b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80056f6:	bf00      	nop
 80056f8:	3754      	adds	r7, #84	@ 0x54
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff fed3 	bl	80054c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005720:	bf00      	nop
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b21      	cmp	r3, #33	@ 0x21
 800573a:	d13e      	bne.n	80057ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005744:	d114      	bne.n	8005770 <UART_Transmit_IT+0x48>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d110      	bne.n	8005770 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005762:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	1c9a      	adds	r2, r3, #2
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	621a      	str	r2, [r3, #32]
 800576e:	e008      	b.n	8005782 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	1c59      	adds	r1, r3, #1
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6211      	str	r1, [r2, #32]
 800577a:	781a      	ldrb	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29b      	uxth	r3, r3
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	4619      	mov	r1, r3
 8005790:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10f      	bne.n	80057b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	e000      	b.n	80057bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057ba:	2302      	movs	r3, #2
  }
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bc80      	pop	{r7}
 80057c4:	4770      	bx	lr

080057c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff fe64 	bl	80054b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b08c      	sub	sp, #48	@ 0x30
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b22      	cmp	r3, #34	@ 0x22
 8005808:	f040 80ae 	bne.w	8005968 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005814:	d117      	bne.n	8005846 <UART_Receive_IT+0x50>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d113      	bne.n	8005846 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005834:	b29a      	uxth	r2, r3
 8005836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005838:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583e:	1c9a      	adds	r2, r3, #2
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	629a      	str	r2, [r3, #40]	@ 0x28
 8005844:	e026      	b.n	8005894 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005858:	d007      	beq.n	800586a <UART_Receive_IT+0x74>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <UART_Receive_IT+0x82>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	b2da      	uxtb	r2, r3
 8005872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	e008      	b.n	800588a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	b2db      	uxtb	r3, r3
 8005880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005884:	b2da      	uxtb	r2, r3
 8005886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005888:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29b      	uxth	r3, r3
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	4619      	mov	r1, r3
 80058a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d15d      	bne.n	8005964 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0220 	bic.w	r2, r2, #32
 80058b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695a      	ldr	r2, [r3, #20]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0201 	bic.w	r2, r2, #1
 80058d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d135      	bne.n	800595a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	330c      	adds	r3, #12
 80058fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	613b      	str	r3, [r7, #16]
   return(result);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f023 0310 	bic.w	r3, r3, #16
 800590a:	627b      	str	r3, [r7, #36]	@ 0x24
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005914:	623a      	str	r2, [r7, #32]
 8005916:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	69f9      	ldr	r1, [r7, #28]
 800591a:	6a3a      	ldr	r2, [r7, #32]
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	61bb      	str	r3, [r7, #24]
   return(result);
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e5      	bne.n	80058f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b10      	cmp	r3, #16
 8005934:	d10a      	bne.n	800594c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005950:	4619      	mov	r1, r3
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff fdc0 	bl	80054d8 <HAL_UARTEx_RxEventCallback>
 8005958:	e002      	b.n	8005960 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fb fcfa 	bl	8001354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	e002      	b.n	800596a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005968:	2302      	movs	r3, #2
  }
}
 800596a:	4618      	mov	r0, r3
 800596c:	3730      	adds	r7, #48	@ 0x30
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80059ae:	f023 030c 	bic.w	r3, r3, #12
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	430b      	orrs	r3, r1
 80059ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005a88 <UART_SetConfig+0x114>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d103      	bne.n	80059e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059dc:	f7fe fc80 	bl	80042e0 <HAL_RCC_GetPCLK2Freq>
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	e002      	b.n	80059ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059e4:	f7fe fc68 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 80059e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009a      	lsls	r2, r3, #2
 80059f4:	441a      	add	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	4a22      	ldr	r2, [pc, #136]	@ (8005a8c <UART_SetConfig+0x118>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	0119      	lsls	r1, r3, #4
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009a      	lsls	r2, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a20:	4b1a      	ldr	r3, [pc, #104]	@ (8005a8c <UART_SetConfig+0x118>)
 8005a22:	fba3 0302 	umull	r0, r3, r3, r2
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	2064      	movs	r0, #100	@ 0x64
 8005a2a:	fb00 f303 	mul.w	r3, r0, r3
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	3332      	adds	r3, #50	@ 0x32
 8005a34:	4a15      	ldr	r2, [pc, #84]	@ (8005a8c <UART_SetConfig+0x118>)
 8005a36:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a40:	4419      	add	r1, r3
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	009a      	lsls	r2, r3, #2
 8005a4c:	441a      	add	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a58:	4b0c      	ldr	r3, [pc, #48]	@ (8005a8c <UART_SetConfig+0x118>)
 8005a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	2064      	movs	r0, #100	@ 0x64
 8005a62:	fb00 f303 	mul.w	r3, r0, r3
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	3332      	adds	r3, #50	@ 0x32
 8005a6c:	4a07      	ldr	r2, [pc, #28]	@ (8005a8c <UART_SetConfig+0x118>)
 8005a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	f003 020f 	and.w	r2, r3, #15
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a80:	bf00      	nop
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40013800 	.word	0x40013800
 8005a8c:	51eb851f 	.word	0x51eb851f

08005a90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aa2:	2b84      	cmp	r3, #132	@ 0x84
 8005aa4:	d005      	beq.n	8005ab2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005aa6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4413      	add	r3, r2
 8005aae:	3303      	adds	r3, #3
 8005ab0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ac4:	f3ef 8305 	mrs	r3, IPSR
 8005ac8:	607b      	str	r3, [r7, #4]
  return(result);
 8005aca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ae4:	f001 f936 	bl	8006d54 <vTaskStartScheduler>
  
  return osOK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	bd80      	pop	{r7, pc}

08005aee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005af0:	b089      	sub	sp, #36	@ 0x24
 8005af2:	af04      	add	r7, sp, #16
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d020      	beq.n	8005b42 <osThreadCreate+0x54>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01c      	beq.n	8005b42 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685c      	ldr	r4, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691e      	ldr	r6, [r3, #16]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff ffb8 	bl	8005a90 <makeFreeRtosPriority>
 8005b20:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b2a:	9202      	str	r2, [sp, #8]
 8005b2c:	9301      	str	r3, [sp, #4]
 8005b2e:	9100      	str	r1, [sp, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	4632      	mov	r2, r6
 8005b34:	4629      	mov	r1, r5
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 ff2f 	bl	800699a <xTaskCreateStatic>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e01c      	b.n	8005b7c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685c      	ldr	r4, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b4e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff ff9a 	bl	8005a90 <makeFreeRtosPriority>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	f107 030c 	add.w	r3, r7, #12
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	9200      	str	r2, [sp, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	4632      	mov	r2, r6
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f000 ff73 	bl	8006a58 <xTaskCreate>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d001      	beq.n	8005b7c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e000      	b.n	8005b7e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b86 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <osDelay+0x16>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	e000      	b.n	8005b9e <osDelay+0x18>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 f8a2 	bl	8006ce8 <vTaskDelay>
  
  return osOK;
 8005ba4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b086      	sub	sp, #24
 8005bb2:	af02      	add	r7, sp, #8
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00f      	beq.n	8005be0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d10a      	bne.n	8005bdc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2203      	movs	r2, #3
 8005bcc:	9200      	str	r2, [sp, #0]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	f000 f9bc 	bl	8005f50 <xQueueGenericCreateStatic>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	e016      	b.n	8005c0a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e014      	b.n	8005c0a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d110      	bne.n	8005c08 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005be6:	2203      	movs	r2, #3
 8005be8:	2100      	movs	r1, #0
 8005bea:	2001      	movs	r0, #1
 8005bec:	f000 fa2c 	bl	8006048 <xQueueGenericCreate>
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <osSemaphoreCreate+0x56>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 fa80 	bl	8006104 <xQueueGenericSend>
      return sema;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	e000      	b.n	8005c0a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005c08:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005c28:	2380      	movs	r3, #128	@ 0x80
 8005c2a:	e03a      	b.n	8005ca2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c36:	d103      	bne.n	8005c40 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005c38:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	e009      	b.n	8005c54 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <osSemaphoreWait+0x40>
      ticks = 1;
 8005c50:	2301      	movs	r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005c54:	f7ff ff33 	bl	8005abe <inHandlerMode>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d017      	beq.n	8005c8e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005c5e:	f107 0308 	add.w	r3, r7, #8
 8005c62:	461a      	mov	r2, r3
 8005c64:	2100      	movs	r1, #0
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fcee 	bl	8006648 <xQueueReceiveFromISR>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d001      	beq.n	8005c76 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005c72:	23ff      	movs	r3, #255	@ 0xff
 8005c74:	e015      	b.n	8005ca2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d011      	beq.n	8005ca0 <osSemaphoreWait+0x8c>
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cac <osSemaphoreWait+0x98>)
 8005c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	e008      	b.n	8005ca0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fbc9 	bl	8006428 <xQueueSemaphoreTake>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d001      	beq.n	8005ca0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005c9c:	23ff      	movs	r3, #255	@ 0xff
 8005c9e:	e000      	b.n	8005ca2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	e000ed04 	.word	0xe000ed04

08005cb0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005cc0:	f7ff fefd 	bl	8005abe <inHandlerMode>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d016      	beq.n	8005cf8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005cca:	f107 0308 	add.w	r3, r7, #8
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fb19 	bl	8006308 <xQueueGiveFromISR>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d001      	beq.n	8005ce0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005cdc:	23ff      	movs	r3, #255	@ 0xff
 8005cde:	e017      	b.n	8005d10 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d013      	beq.n	8005d0e <osSemaphoreRelease+0x5e>
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8005d18 <osSemaphoreRelease+0x68>)
 8005ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	e00a      	b.n	8005d0e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa00 	bl	8006104 <xQueueGenericSend>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d001      	beq.n	8005d0e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005d0a:	23ff      	movs	r3, #255	@ 0xff
 8005d0c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f103 0208 	add.w	r2, r3, #8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f04f 32ff 	mov.w	r2, #4294967295
 8005d34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f103 0208 	add.w	r2, r3, #8
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f103 0208 	add.w	r2, r3, #8
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr

08005d5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr

08005d72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	601a      	str	r2, [r3, #0]
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d103      	bne.n	8005dd8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	e00c      	b.n	8005df2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3308      	adds	r3, #8
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e002      	b.n	8005de6 <vListInsert+0x2e>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d2f6      	bcs.n	8005de0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	601a      	str	r2, [r3, #0]
}
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6892      	ldr	r2, [r2, #8]
 8005e3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6852      	ldr	r2, [r2, #4]
 8005e48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d103      	bne.n	8005e5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	1e5a      	subs	r2, r3, #1
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr
	...

08005e7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10b      	bne.n	8005ea8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ea2:	bf00      	nop
 8005ea4:	bf00      	nop
 8005ea6:	e7fd      	b.n	8005ea4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ea8:	f001 feb0 	bl	8007c0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb4:	68f9      	ldr	r1, [r7, #12]
 8005eb6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	441a      	add	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	68f9      	ldr	r1, [r7, #12]
 8005edc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ede:	fb01 f303 	mul.w	r3, r1, r3
 8005ee2:	441a      	add	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	22ff      	movs	r2, #255	@ 0xff
 8005eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	22ff      	movs	r2, #255	@ 0xff
 8005ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d114      	bne.n	8005f28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d01a      	beq.n	8005f3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3310      	adds	r3, #16
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 f97e 	bl	800720c <xTaskRemoveFromEventList>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d012      	beq.n	8005f3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f16:	4b0d      	ldr	r3, [pc, #52]	@ (8005f4c <xQueueGenericReset+0xd0>)
 8005f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	e009      	b.n	8005f3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3310      	adds	r3, #16
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff fef5 	bl	8005d1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3324      	adds	r3, #36	@ 0x24
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fef0 	bl	8005d1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f3c:	f001 fe96 	bl	8007c6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f40:	2301      	movs	r3, #1
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	e000ed04 	.word	0xe000ed04

08005f50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08e      	sub	sp, #56	@ 0x38
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10b      	bne.n	8005f7c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f76:	bf00      	nop
 8005f78:	bf00      	nop
 8005f7a:	e7fd      	b.n	8005f78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10b      	bne.n	8005f9a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	e7fd      	b.n	8005f96 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <xQueueGenericCreateStatic+0x56>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <xQueueGenericCreateStatic+0x5a>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <xQueueGenericCreateStatic+0x5c>
 8005faa:	2300      	movs	r3, #0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10b      	bne.n	8005fc8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	623b      	str	r3, [r7, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	bf00      	nop
 8005fc6:	e7fd      	b.n	8005fc4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d102      	bne.n	8005fd4 <xQueueGenericCreateStatic+0x84>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <xQueueGenericCreateStatic+0x88>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <xQueueGenericCreateStatic+0x8a>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10b      	bne.n	8005ff6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	61fb      	str	r3, [r7, #28]
}
 8005ff0:	bf00      	nop
 8005ff2:	bf00      	nop
 8005ff4:	e7fd      	b.n	8005ff2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ff6:	2348      	movs	r3, #72	@ 0x48
 8005ff8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b48      	cmp	r3, #72	@ 0x48
 8005ffe:	d00b      	beq.n	8006018 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	61bb      	str	r3, [r7, #24]
}
 8006012:	bf00      	nop
 8006014:	bf00      	nop
 8006016:	e7fd      	b.n	8006014 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800601c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00d      	beq.n	800603e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800602a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800602e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	4613      	mov	r3, r2
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 f844 	bl	80060c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800603e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006040:	4618      	mov	r0, r3
 8006042:	3730      	adds	r7, #48	@ 0x30
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	@ 0x28
 800604c:	af02      	add	r7, sp, #8
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	4613      	mov	r3, r2
 8006054:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <xQueueGenericCreate+0x2c>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	613b      	str	r3, [r7, #16]
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d102      	bne.n	8006080 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	e004      	b.n	800608a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	fb02 f303 	mul.w	r3, r2, r3
 8006088:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	3348      	adds	r3, #72	@ 0x48
 800608e:	4618      	mov	r0, r3
 8006090:	f001 febe 	bl	8007e10 <pvPortMalloc>
 8006094:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00f      	beq.n	80060bc <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	3348      	adds	r3, #72	@ 0x48
 80060a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060aa:	79fa      	ldrb	r2, [r7, #7]
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	4613      	mov	r3, r2
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 f805 	bl	80060c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80060bc:	69bb      	ldr	r3, [r7, #24]
	}
 80060be:	4618      	mov	r0, r3
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d103      	bne.n	80060e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	e002      	b.n	80060e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060f4:	2101      	movs	r1, #1
 80060f6:	69b8      	ldr	r0, [r7, #24]
 80060f8:	f7ff fec0 	bl	8005e7c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060fc:	bf00      	nop
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08e      	sub	sp, #56	@ 0x38
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006112:	2300      	movs	r3, #0
 8006114:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800611a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10b      	bne.n	8006138 <xQueueGenericSend+0x34>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	e7fd      	b.n	8006134 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <xQueueGenericSend+0x42>
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <xQueueGenericSend+0x46>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <xQueueGenericSend+0x48>
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <xQueueGenericSend+0x64>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d103      	bne.n	8006176 <xQueueGenericSend+0x72>
 800616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <xQueueGenericSend+0x76>
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <xQueueGenericSend+0x78>
 800617a:	2300      	movs	r3, #0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10b      	bne.n	8006198 <xQueueGenericSend+0x94>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	623b      	str	r3, [r7, #32]
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006198:	f001 fa02 	bl	80075a0 <xTaskGetSchedulerState>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d102      	bne.n	80061a8 <xQueueGenericSend+0xa4>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <xQueueGenericSend+0xa8>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e000      	b.n	80061ae <xQueueGenericSend+0xaa>
 80061ac:	2300      	movs	r3, #0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10b      	bne.n	80061ca <xQueueGenericSend+0xc6>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	61fb      	str	r3, [r7, #28]
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	e7fd      	b.n	80061c6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061ca:	f001 fd1f 	bl	8007c0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d302      	bcc.n	80061e0 <xQueueGenericSend+0xdc>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d129      	bne.n	8006234 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	68b9      	ldr	r1, [r7, #8]
 80061e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061e6:	f000 fac8 	bl	800677a <prvCopyDataToQueue>
 80061ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d010      	beq.n	8006216 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	3324      	adds	r3, #36	@ 0x24
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 f807 	bl	800720c <xTaskRemoveFromEventList>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d013      	beq.n	800622c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006204:	4b3f      	ldr	r3, [pc, #252]	@ (8006304 <xQueueGenericSend+0x200>)
 8006206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	e00a      	b.n	800622c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800621c:	4b39      	ldr	r3, [pc, #228]	@ (8006304 <xQueueGenericSend+0x200>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800622c:	f001 fd1e 	bl	8007c6c <vPortExitCritical>
				return pdPASS;
 8006230:	2301      	movs	r3, #1
 8006232:	e063      	b.n	80062fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d103      	bne.n	8006242 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800623a:	f001 fd17 	bl	8007c6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800623e:	2300      	movs	r3, #0
 8006240:	e05c      	b.n	80062fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006248:	f107 0314 	add.w	r3, r7, #20
 800624c:	4618      	mov	r0, r3
 800624e:	f001 f841 	bl	80072d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006252:	2301      	movs	r3, #1
 8006254:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006256:	f001 fd09 	bl	8007c6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800625a:	f000 fde5 	bl	8006e28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800625e:	f001 fcd5 	bl	8007c0c <vPortEnterCritical>
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006268:	b25b      	sxtb	r3, r3
 800626a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626e:	d103      	bne.n	8006278 <xQueueGenericSend+0x174>
 8006270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800627e:	b25b      	sxtb	r3, r3
 8006280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006284:	d103      	bne.n	800628e <xQueueGenericSend+0x18a>
 8006286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800628e:	f001 fced 	bl	8007c6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006292:	1d3a      	adds	r2, r7, #4
 8006294:	f107 0314 	add.w	r3, r7, #20
 8006298:	4611      	mov	r1, r2
 800629a:	4618      	mov	r0, r3
 800629c:	f001 f830 	bl	8007300 <xTaskCheckForTimeOut>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d124      	bne.n	80062f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062a8:	f000 fb5f 	bl	800696a <prvIsQueueFull>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d018      	beq.n	80062e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	3310      	adds	r3, #16
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	4611      	mov	r1, r2
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 ff80 	bl	80071c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062c2:	f000 faea 	bl	800689a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062c6:	f000 fdbd 	bl	8006e44 <xTaskResumeAll>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f47f af7c 	bne.w	80061ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80062d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006304 <xQueueGenericSend+0x200>)
 80062d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	e772      	b.n	80061ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062e6:	f000 fad8 	bl	800689a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062ea:	f000 fdab 	bl	8006e44 <xTaskResumeAll>
 80062ee:	e76c      	b.n	80061ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062f2:	f000 fad2 	bl	800689a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062f6:	f000 fda5 	bl	8006e44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062fa:	2300      	movs	r3, #0
		}
	}
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3738      	adds	r7, #56	@ 0x38
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	e000ed04 	.word	0xe000ed04

08006308 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08e      	sub	sp, #56	@ 0x38
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10b      	bne.n	8006334 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	623b      	str	r3, [r7, #32]
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	e7fd      	b.n	8006330 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00b      	beq.n	8006354 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	61fb      	str	r3, [r7, #28]
}
 800634e:	bf00      	nop
 8006350:	bf00      	nop
 8006352:	e7fd      	b.n	8006350 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d103      	bne.n	8006364 <xQueueGiveFromISR+0x5c>
 800635c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <xQueueGiveFromISR+0x60>
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <xQueueGiveFromISR+0x62>
 8006368:	2300      	movs	r3, #0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10b      	bne.n	8006386 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	61bb      	str	r3, [r7, #24]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006386:	f001 fd03 	bl	8007d90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800638a:	f3ef 8211 	mrs	r2, BASEPRI
 800638e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	617a      	str	r2, [r7, #20]
 80063a0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80063ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d22b      	bcs.n	800640e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d112      	bne.n	80063f8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d016      	beq.n	8006408 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063dc:	3324      	adds	r3, #36	@ 0x24
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 ff14 	bl	800720c <xTaskRemoveFromEventList>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00e      	beq.n	8006408 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2201      	movs	r2, #1
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	e007      	b.n	8006408 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063fc:	3301      	adds	r3, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	b25a      	sxtb	r2, r3
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006408:	2301      	movs	r3, #1
 800640a:	637b      	str	r3, [r7, #52]	@ 0x34
 800640c:	e001      	b.n	8006412 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800640e:	2300      	movs	r3, #0
 8006410:	637b      	str	r3, [r7, #52]	@ 0x34
 8006412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006414:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800641c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800641e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006420:	4618      	mov	r0, r3
 8006422:	3738      	adds	r7, #56	@ 0x38
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08e      	sub	sp, #56	@ 0x38
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006432:	2300      	movs	r3, #0
 8006434:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800643a:	2300      	movs	r3, #0
 800643c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10b      	bne.n	800645c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	623b      	str	r3, [r7, #32]
}
 8006456:	bf00      	nop
 8006458:	bf00      	nop
 800645a:	e7fd      	b.n	8006458 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800645c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00b      	beq.n	800647c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	61fb      	str	r3, [r7, #28]
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	e7fd      	b.n	8006478 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800647c:	f001 f890 	bl	80075a0 <xTaskGetSchedulerState>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d102      	bne.n	800648c <xQueueSemaphoreTake+0x64>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <xQueueSemaphoreTake+0x68>
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <xQueueSemaphoreTake+0x6a>
 8006490:	2300      	movs	r3, #0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10b      	bne.n	80064ae <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	61bb      	str	r3, [r7, #24]
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	e7fd      	b.n	80064aa <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80064ae:	f001 fbad 	bl	8007c0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80064b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80064b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d024      	beq.n	8006508 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80064be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c0:	1e5a      	subs	r2, r3, #1
 80064c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d104      	bne.n	80064d8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80064ce:	f001 fa35 	bl	800793c <pvTaskIncrementMutexHeldCount>
 80064d2:	4602      	mov	r2, r0
 80064d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00f      	beq.n	8006500 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e2:	3310      	adds	r3, #16
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fe91 	bl	800720c <xTaskRemoveFromEventList>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064f0:	4b54      	ldr	r3, [pc, #336]	@ (8006644 <xQueueSemaphoreTake+0x21c>)
 80064f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006500:	f001 fbb4 	bl	8007c6c <vPortExitCritical>
				return pdPASS;
 8006504:	2301      	movs	r3, #1
 8006506:	e098      	b.n	800663a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d112      	bne.n	8006534 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800650e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	617b      	str	r3, [r7, #20]
}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	e7fd      	b.n	8006528 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800652c:	f001 fb9e 	bl	8007c6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006530:	2300      	movs	r3, #0
 8006532:	e082      	b.n	800663a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800653a:	f107 030c 	add.w	r3, r7, #12
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fec8 	bl	80072d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006544:	2301      	movs	r3, #1
 8006546:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006548:	f001 fb90 	bl	8007c6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800654c:	f000 fc6c 	bl	8006e28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006550:	f001 fb5c 	bl	8007c0c <vPortEnterCritical>
 8006554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006556:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800655a:	b25b      	sxtb	r3, r3
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d103      	bne.n	800656a <xQueueSemaphoreTake+0x142>
 8006562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006570:	b25b      	sxtb	r3, r3
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d103      	bne.n	8006580 <xQueueSemaphoreTake+0x158>
 8006578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006580:	f001 fb74 	bl	8007c6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006584:	463a      	mov	r2, r7
 8006586:	f107 030c 	add.w	r3, r7, #12
 800658a:	4611      	mov	r1, r2
 800658c:	4618      	mov	r0, r3
 800658e:	f000 feb7 	bl	8007300 <xTaskCheckForTimeOut>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d132      	bne.n	80065fe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006598:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800659a:	f000 f9d0 	bl	800693e <prvIsQueueEmpty>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d026      	beq.n	80065f2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d109      	bne.n	80065c0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80065ac:	f001 fb2e 	bl	8007c0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80065b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 f811 	bl	80075dc <xTaskPriorityInherit>
 80065ba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80065bc:	f001 fb56 	bl	8007c6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c2:	3324      	adds	r3, #36	@ 0x24
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	4611      	mov	r1, r2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fdf9 	bl	80071c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065d0:	f000 f963 	bl	800689a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065d4:	f000 fc36 	bl	8006e44 <xTaskResumeAll>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f47f af67 	bne.w	80064ae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80065e0:	4b18      	ldr	r3, [pc, #96]	@ (8006644 <xQueueSemaphoreTake+0x21c>)
 80065e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	e75d      	b.n	80064ae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80065f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065f4:	f000 f951 	bl	800689a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065f8:	f000 fc24 	bl	8006e44 <xTaskResumeAll>
 80065fc:	e757      	b.n	80064ae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80065fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006600:	f000 f94b 	bl	800689a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006604:	f000 fc1e 	bl	8006e44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006608:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800660a:	f000 f998 	bl	800693e <prvIsQueueEmpty>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	f43f af4c 	beq.w	80064ae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00d      	beq.n	8006638 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800661c:	f001 faf6 	bl	8007c0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006620:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006622:	f000 f893 	bl	800674c <prvGetDisinheritPriorityAfterTimeout>
 8006626:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800662e:	4618      	mov	r0, r3
 8006630:	f001 f8e2 	bl	80077f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006634:	f001 fb1a 	bl	8007c6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006638:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800663a:	4618      	mov	r0, r3
 800663c:	3738      	adds	r7, #56	@ 0x38
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	e000ed04 	.word	0xe000ed04

08006648 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08e      	sub	sp, #56	@ 0x38
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10b      	bne.n	8006676 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	623b      	str	r3, [r7, #32]
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	e7fd      	b.n	8006672 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <xQueueReceiveFromISR+0x3c>
 800667c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <xQueueReceiveFromISR+0x40>
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <xQueueReceiveFromISR+0x42>
 8006688:	2300      	movs	r3, #0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10b      	bne.n	80066a6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	61fb      	str	r3, [r7, #28]
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	e7fd      	b.n	80066a2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066a6:	f001 fb73 	bl	8007d90 <vPortValidateInterruptPriority>
	__asm volatile
 80066aa:	f3ef 8211 	mrs	r2, BASEPRI
 80066ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	61ba      	str	r2, [r7, #24]
 80066c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80066c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d02f      	beq.n	8006732 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80066d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066e0:	f000 f8b5 	bl	800684e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e6:	1e5a      	subs	r2, r3, #1
 80066e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80066ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f4:	d112      	bne.n	800671c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d016      	beq.n	800672c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	3310      	adds	r3, #16
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fd82 	bl	800720c <xTaskRemoveFromEventList>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00e      	beq.n	800672c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00b      	beq.n	800672c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	e007      	b.n	800672c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800671c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006720:	3301      	adds	r3, #1
 8006722:	b2db      	uxtb	r3, r3
 8006724:	b25a      	sxtb	r2, r3
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800672c:	2301      	movs	r3, #1
 800672e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006730:	e001      	b.n	8006736 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006732:	2300      	movs	r3, #0
 8006734:	637b      	str	r3, [r7, #52]	@ 0x34
 8006736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006738:	613b      	str	r3, [r7, #16]
	__asm volatile
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f383 8811 	msr	BASEPRI, r3
}
 8006740:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006744:	4618      	mov	r0, r3
 8006746:	3738      	adds	r7, #56	@ 0x38
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d006      	beq.n	800676a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f1c3 0307 	rsb	r3, r3, #7
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	e001      	b.n	800676e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800676e:	68fb      	ldr	r3, [r7, #12]
	}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr

0800677a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b086      	sub	sp, #24
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10d      	bne.n	80067b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d14d      	bne.n	800683c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 ff9f 	bl	80076e8 <xTaskPriorityDisinherit>
 80067aa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	605a      	str	r2, [r3, #4]
 80067b2:	e043      	b.n	800683c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d119      	bne.n	80067ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6898      	ldr	r0, [r3, #8]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c2:	461a      	mov	r2, r3
 80067c4:	68b9      	ldr	r1, [r7, #8]
 80067c6:	f002 fb66 	bl	8008e96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d2:	441a      	add	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d32b      	bcc.n	800683c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	609a      	str	r2, [r3, #8]
 80067ec:	e026      	b.n	800683c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	68d8      	ldr	r0, [r3, #12]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f6:	461a      	mov	r2, r3
 80067f8:	68b9      	ldr	r1, [r7, #8]
 80067fa:	f002 fb4c 	bl	8008e96 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006806:	425b      	negs	r3, r3
 8006808:	441a      	add	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d207      	bcs.n	800682a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006822:	425b      	negs	r3, r3
 8006824:	441a      	add	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b02      	cmp	r3, #2
 800682e:	d105      	bne.n	800683c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	3b01      	subs	r3, #1
 800683a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006844:	697b      	ldr	r3, [r7, #20]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685c:	2b00      	cmp	r3, #0
 800685e:	d018      	beq.n	8006892 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006868:	441a      	add	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	429a      	cmp	r2, r3
 8006878:	d303      	bcc.n	8006882 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68d9      	ldr	r1, [r3, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688a:	461a      	mov	r2, r3
 800688c:	6838      	ldr	r0, [r7, #0]
 800688e:	f002 fb02 	bl	8008e96 <memcpy>
	}
}
 8006892:	bf00      	nop
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068a2:	f001 f9b3 	bl	8007c0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068ae:	e011      	b.n	80068d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d012      	beq.n	80068de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3324      	adds	r3, #36	@ 0x24
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fca5 	bl	800720c <xTaskRemoveFromEventList>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068c8:	f000 fd7e 	bl	80073c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dce9      	bgt.n	80068b0 <prvUnlockQueue+0x16>
 80068dc:	e000      	b.n	80068e0 <prvUnlockQueue+0x46>
					break;
 80068de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	22ff      	movs	r2, #255	@ 0xff
 80068e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80068e8:	f001 f9c0 	bl	8007c6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068ec:	f001 f98e 	bl	8007c0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068f8:	e011      	b.n	800691e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d012      	beq.n	8006928 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3310      	adds	r3, #16
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fc80 	bl	800720c <xTaskRemoveFromEventList>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006912:	f000 fd59 	bl	80073c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	3b01      	subs	r3, #1
 800691a:	b2db      	uxtb	r3, r3
 800691c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800691e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006922:	2b00      	cmp	r3, #0
 8006924:	dce9      	bgt.n	80068fa <prvUnlockQueue+0x60>
 8006926:	e000      	b.n	800692a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006928:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	22ff      	movs	r2, #255	@ 0xff
 800692e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006932:	f001 f99b 	bl	8007c6c <vPortExitCritical>
}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006946:	f001 f961 	bl	8007c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694e:	2b00      	cmp	r3, #0
 8006950:	d102      	bne.n	8006958 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006952:	2301      	movs	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	e001      	b.n	800695c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800695c:	f001 f986 	bl	8007c6c <vPortExitCritical>

	return xReturn;
 8006960:	68fb      	ldr	r3, [r7, #12]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006972:	f001 f94b 	bl	8007c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800697e:	429a      	cmp	r2, r3
 8006980:	d102      	bne.n	8006988 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006982:	2301      	movs	r3, #1
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	e001      	b.n	800698c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006988:	2300      	movs	r3, #0
 800698a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800698c:	f001 f96e 	bl	8007c6c <vPortExitCritical>

	return xReturn;
 8006990:	68fb      	ldr	r3, [r7, #12]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800699a:	b580      	push	{r7, lr}
 800699c:	b08e      	sub	sp, #56	@ 0x38
 800699e:	af04      	add	r7, sp, #16
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	60b9      	str	r1, [r7, #8]
 80069a4:	607a      	str	r2, [r7, #4]
 80069a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <xTaskCreateStatic+0x2c>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	623b      	str	r3, [r7, #32]
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	e7fd      	b.n	80069c2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10b      	bne.n	80069e4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	61fb      	str	r3, [r7, #28]
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069e4:	23a0      	movs	r3, #160	@ 0xa0
 80069e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80069ec:	d00b      	beq.n	8006a06 <xTaskCreateStatic+0x6c>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	61bb      	str	r3, [r7, #24]
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01e      	beq.n	8006a4a <xTaskCreateStatic+0xb0>
 8006a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01b      	beq.n	8006a4a <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a24:	2300      	movs	r3, #0
 8006a26:	9303      	str	r3, [sp, #12]
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	9302      	str	r3, [sp, #8]
 8006a2c:	f107 0314 	add.w	r3, r7, #20
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f851 	bl	8006ae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a44:	f000 f8e6 	bl	8006c14 <prvAddNewTaskToReadyList>
 8006a48:	e001      	b.n	8006a4e <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a4e:	697b      	ldr	r3, [r7, #20]
	}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3728      	adds	r7, #40	@ 0x28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08c      	sub	sp, #48	@ 0x30
 8006a5c:	af04      	add	r7, sp, #16
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	4613      	mov	r3, r2
 8006a66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f001 f9cf 	bl	8007e10 <pvPortMalloc>
 8006a72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00e      	beq.n	8006a98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006a7a:	20a0      	movs	r0, #160	@ 0xa0
 8006a7c:	f001 f9c8 	bl	8007e10 <pvPortMalloc>
 8006a80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a8e:	e005      	b.n	8006a9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a90:	6978      	ldr	r0, [r7, #20]
 8006a92:	f001 fa85 	bl	8007fa0 <vPortFree>
 8006a96:	e001      	b.n	8006a9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d017      	beq.n	8006ad2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006aaa:	88fa      	ldrh	r2, [r7, #6]
 8006aac:	2300      	movs	r3, #0
 8006aae:	9303      	str	r3, [sp, #12]
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	9302      	str	r3, [sp, #8]
 8006ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 f80f 	bl	8006ae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ac6:	69f8      	ldr	r0, [r7, #28]
 8006ac8:	f000 f8a4 	bl	8006c14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006acc:	2301      	movs	r3, #1
 8006ace:	61bb      	str	r3, [r7, #24]
 8006ad0:	e002      	b.n	8006ad8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ad8:	69bb      	ldr	r3, [r7, #24]
	}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3720      	adds	r7, #32
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006afc:	3b01      	subs	r3, #1
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f023 0307 	bic.w	r3, r3, #7
 8006b0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	617b      	str	r3, [r7, #20]
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	e7fd      	b.n	8006b2a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61fb      	str	r3, [r7, #28]
 8006b32:	e012      	b.n	8006b5a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	4413      	add	r3, r2
 8006b3a:	7819      	ldrb	r1, [r3, #0]
 8006b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	3334      	adds	r3, #52	@ 0x34
 8006b44:	460a      	mov	r2, r1
 8006b46:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d006      	beq.n	8006b62 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3301      	adds	r3, #1
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	2b0f      	cmp	r3, #15
 8006b5e:	d9e9      	bls.n	8006b34 <prvInitialiseNewTask+0x50>
 8006b60:	e000      	b.n	8006b64 <prvInitialiseNewTask+0x80>
		{
			break;
 8006b62:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6e:	2b06      	cmp	r3, #6
 8006b70:	d901      	bls.n	8006b76 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b72:	2306      	movs	r3, #6
 8006b74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b80:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	2200      	movs	r2, #0
 8006b86:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff f8e4 	bl	8005d5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b94:	3318      	adds	r3, #24
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff f8df 	bl	8005d5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba4:	f1c3 0207 	rsb	r2, r3, #7
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	334c      	adds	r3, #76	@ 0x4c
 8006bc6:	224c      	movs	r2, #76	@ 0x4c
 8006bc8:	2100      	movs	r1, #0
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f002 f87f 	bl	8008cce <memset>
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	4a0d      	ldr	r2, [pc, #52]	@ (8006c08 <prvInitialiseNewTask+0x124>)
 8006bd4:	651a      	str	r2, [r3, #80]	@ 0x50
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8006c0c <prvInitialiseNewTask+0x128>)
 8006bda:	655a      	str	r2, [r3, #84]	@ 0x54
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bde:	4a0c      	ldr	r2, [pc, #48]	@ (8006c10 <prvInitialiseNewTask+0x12c>)
 8006be0:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	68f9      	ldr	r1, [r7, #12]
 8006be6:	69b8      	ldr	r0, [r7, #24]
 8006be8:	f000 ff22 	bl	8007a30 <pxPortInitialiseStack>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bfe:	bf00      	nop
 8006c00:	3720      	adds	r7, #32
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20001374 	.word	0x20001374
 8006c0c:	200013dc 	.word	0x200013dc
 8006c10:	20001444 	.word	0x20001444

08006c14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c1c:	f000 fff6 	bl	8007c0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c20:	4b2a      	ldr	r3, [pc, #168]	@ (8006ccc <prvAddNewTaskToReadyList+0xb8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3301      	adds	r3, #1
 8006c26:	4a29      	ldr	r2, [pc, #164]	@ (8006ccc <prvAddNewTaskToReadyList+0xb8>)
 8006c28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c2a:	4b29      	ldr	r3, [pc, #164]	@ (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c32:	4a27      	ldr	r2, [pc, #156]	@ (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c38:	4b24      	ldr	r3, [pc, #144]	@ (8006ccc <prvAddNewTaskToReadyList+0xb8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d110      	bne.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c40:	f000 fbe6 	bl	8007410 <prvInitialiseTaskLists>
 8006c44:	e00d      	b.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c46:	4b23      	ldr	r3, [pc, #140]	@ (8006cd4 <prvAddNewTaskToReadyList+0xc0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c4e:	4b20      	ldr	r3, [pc, #128]	@ (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d802      	bhi.n	8006c62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c62:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd8 <prvAddNewTaskToReadyList+0xc4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3301      	adds	r3, #1
 8006c68:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd8 <prvAddNewTaskToReadyList+0xc4>)
 8006c6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c70:	2201      	movs	r2, #1
 8006c72:	409a      	lsls	r2, r3
 8006c74:	4b19      	ldr	r3, [pc, #100]	@ (8006cdc <prvAddNewTaskToReadyList+0xc8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	4a18      	ldr	r2, [pc, #96]	@ (8006cdc <prvAddNewTaskToReadyList+0xc8>)
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4a15      	ldr	r2, [pc, #84]	@ (8006ce0 <prvAddNewTaskToReadyList+0xcc>)
 8006c8c:	441a      	add	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4619      	mov	r1, r3
 8006c94:	4610      	mov	r0, r2
 8006c96:	f7ff f86c 	bl	8005d72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c9a:	f000 ffe7 	bl	8007c6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd4 <prvAddNewTaskToReadyList+0xc0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00e      	beq.n	8006cc4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd0 <prvAddNewTaskToReadyList+0xbc>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d207      	bcs.n	8006cc4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce4 <prvAddNewTaskToReadyList+0xd0>)
 8006cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	20000728 	.word	0x20000728
 8006cd0:	20000628 	.word	0x20000628
 8006cd4:	20000734 	.word	0x20000734
 8006cd8:	20000744 	.word	0x20000744
 8006cdc:	20000730 	.word	0x20000730
 8006ce0:	2000062c 	.word	0x2000062c
 8006ce4:	e000ed04 	.word	0xe000ed04

08006ce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d018      	beq.n	8006d2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cfa:	4b14      	ldr	r3, [pc, #80]	@ (8006d4c <vTaskDelay+0x64>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00b      	beq.n	8006d1a <vTaskDelay+0x32>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	60bb      	str	r3, [r7, #8]
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
 8006d18:	e7fd      	b.n	8006d16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d1a:	f000 f885 	bl	8006e28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d1e:	2100      	movs	r1, #0
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fe1f 	bl	8007964 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d26:	f000 f88d 	bl	8006e44 <xTaskResumeAll>
 8006d2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d107      	bne.n	8006d42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006d32:	4b07      	ldr	r3, [pc, #28]	@ (8006d50 <vTaskDelay+0x68>)
 8006d34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000750 	.word	0x20000750
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08a      	sub	sp, #40	@ 0x28
 8006d58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d62:	463a      	mov	r2, r7
 8006d64:	1d39      	adds	r1, r7, #4
 8006d66:	f107 0308 	add.w	r3, r7, #8
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fa f856 	bl	8000e1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	9202      	str	r2, [sp, #8]
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	460a      	mov	r2, r1
 8006d82:	4921      	ldr	r1, [pc, #132]	@ (8006e08 <vTaskStartScheduler+0xb4>)
 8006d84:	4821      	ldr	r0, [pc, #132]	@ (8006e0c <vTaskStartScheduler+0xb8>)
 8006d86:	f7ff fe08 	bl	800699a <xTaskCreateStatic>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4a20      	ldr	r2, [pc, #128]	@ (8006e10 <vTaskStartScheduler+0xbc>)
 8006d8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d90:	4b1f      	ldr	r3, [pc, #124]	@ (8006e10 <vTaskStartScheduler+0xbc>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	e001      	b.n	8006da2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d11b      	bne.n	8006de0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	613b      	str	r3, [r7, #16]
}
 8006dba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dbc:	4b15      	ldr	r3, [pc, #84]	@ (8006e14 <vTaskStartScheduler+0xc0>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	334c      	adds	r3, #76	@ 0x4c
 8006dc2:	4a15      	ldr	r2, [pc, #84]	@ (8006e18 <vTaskStartScheduler+0xc4>)
 8006dc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dc6:	4b15      	ldr	r3, [pc, #84]	@ (8006e1c <vTaskStartScheduler+0xc8>)
 8006dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dce:	4b14      	ldr	r3, [pc, #80]	@ (8006e20 <vTaskStartScheduler+0xcc>)
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006dd4:	4b13      	ldr	r3, [pc, #76]	@ (8006e24 <vTaskStartScheduler+0xd0>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dda:	f000 fea5 	bl	8007b28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dde:	e00f      	b.n	8006e00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de6:	d10b      	bne.n	8006e00 <vTaskStartScheduler+0xac>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	60fb      	str	r3, [r7, #12]
}
 8006dfa:	bf00      	nop
 8006dfc:	bf00      	nop
 8006dfe:	e7fd      	b.n	8006dfc <vTaskStartScheduler+0xa8>
}
 8006e00:	bf00      	nop
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	0800afcc 	.word	0x0800afcc
 8006e0c:	080073e1 	.word	0x080073e1
 8006e10:	2000074c 	.word	0x2000074c
 8006e14:	20000628 	.word	0x20000628
 8006e18:	20000030 	.word	0x20000030
 8006e1c:	20000748 	.word	0x20000748
 8006e20:	20000734 	.word	0x20000734
 8006e24:	2000072c 	.word	0x2000072c

08006e28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e2c:	4b04      	ldr	r3, [pc, #16]	@ (8006e40 <vTaskSuspendAll+0x18>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3301      	adds	r3, #1
 8006e32:	4a03      	ldr	r2, [pc, #12]	@ (8006e40 <vTaskSuspendAll+0x18>)
 8006e34:	6013      	str	r3, [r2, #0]
}
 8006e36:	bf00      	nop
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	20000750 	.word	0x20000750

08006e44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e52:	4b42      	ldr	r3, [pc, #264]	@ (8006f5c <xTaskResumeAll+0x118>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10b      	bne.n	8006e72 <xTaskResumeAll+0x2e>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	603b      	str	r3, [r7, #0]
}
 8006e6c:	bf00      	nop
 8006e6e:	bf00      	nop
 8006e70:	e7fd      	b.n	8006e6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e72:	f000 fecb 	bl	8007c0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e76:	4b39      	ldr	r3, [pc, #228]	@ (8006f5c <xTaskResumeAll+0x118>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	4a37      	ldr	r2, [pc, #220]	@ (8006f5c <xTaskResumeAll+0x118>)
 8006e7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e80:	4b36      	ldr	r3, [pc, #216]	@ (8006f5c <xTaskResumeAll+0x118>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d161      	bne.n	8006f4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e88:	4b35      	ldr	r3, [pc, #212]	@ (8006f60 <xTaskResumeAll+0x11c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d05d      	beq.n	8006f4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e90:	e02e      	b.n	8006ef0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006e92:	4b34      	ldr	r3, [pc, #208]	@ (8006f64 <xTaskResumeAll+0x120>)
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3318      	adds	r3, #24
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe ffc2 	bl	8005e28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe ffbd 	bl	8005e28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	409a      	lsls	r2, r3
 8006eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8006f68 <xTaskResumeAll+0x124>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8006f68 <xTaskResumeAll+0x124>)
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4a27      	ldr	r2, [pc, #156]	@ (8006f6c <xTaskResumeAll+0x128>)
 8006ece:	441a      	add	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	f7fe ff4b 	bl	8005d72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee0:	4b23      	ldr	r3, [pc, #140]	@ (8006f70 <xTaskResumeAll+0x12c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d302      	bcc.n	8006ef0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006eea:	4b22      	ldr	r3, [pc, #136]	@ (8006f74 <xTaskResumeAll+0x130>)
 8006eec:	2201      	movs	r2, #1
 8006eee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8006f64 <xTaskResumeAll+0x120>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1cc      	bne.n	8006e92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006efe:	f000 fb2b 	bl	8007558 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f02:	4b1d      	ldr	r3, [pc, #116]	@ (8006f78 <xTaskResumeAll+0x134>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d010      	beq.n	8006f30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f0e:	f000 f837 	bl	8006f80 <xTaskIncrementTick>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f18:	4b16      	ldr	r3, [pc, #88]	@ (8006f74 <xTaskResumeAll+0x130>)
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3b01      	subs	r3, #1
 8006f22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1f1      	bne.n	8006f0e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006f2a:	4b13      	ldr	r3, [pc, #76]	@ (8006f78 <xTaskResumeAll+0x134>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f30:	4b10      	ldr	r3, [pc, #64]	@ (8006f74 <xTaskResumeAll+0x130>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d009      	beq.n	8006f4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f7c <xTaskResumeAll+0x138>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f4c:	f000 fe8e 	bl	8007c6c <vPortExitCritical>

	return xAlreadyYielded;
 8006f50:	68bb      	ldr	r3, [r7, #8]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000750 	.word	0x20000750
 8006f60:	20000728 	.word	0x20000728
 8006f64:	200006e8 	.word	0x200006e8
 8006f68:	20000730 	.word	0x20000730
 8006f6c:	2000062c 	.word	0x2000062c
 8006f70:	20000628 	.word	0x20000628
 8006f74:	2000073c 	.word	0x2000073c
 8006f78:	20000738 	.word	0x20000738
 8006f7c:	e000ed04 	.word	0xe000ed04

08006f80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f86:	2300      	movs	r3, #0
 8006f88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f8a:	4b51      	ldr	r3, [pc, #324]	@ (80070d0 <xTaskIncrementTick+0x150>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f040 808e 	bne.w	80070b0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f94:	4b4f      	ldr	r3, [pc, #316]	@ (80070d4 <xTaskIncrementTick+0x154>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f9c:	4a4d      	ldr	r2, [pc, #308]	@ (80070d4 <xTaskIncrementTick+0x154>)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d121      	bne.n	8006fec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80070d8 <xTaskIncrementTick+0x158>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00b      	beq.n	8006fca <xTaskIncrementTick+0x4a>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	603b      	str	r3, [r7, #0]
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	e7fd      	b.n	8006fc6 <xTaskIncrementTick+0x46>
 8006fca:	4b43      	ldr	r3, [pc, #268]	@ (80070d8 <xTaskIncrementTick+0x158>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	4b42      	ldr	r3, [pc, #264]	@ (80070dc <xTaskIncrementTick+0x15c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a40      	ldr	r2, [pc, #256]	@ (80070d8 <xTaskIncrementTick+0x158>)
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	4a40      	ldr	r2, [pc, #256]	@ (80070dc <xTaskIncrementTick+0x15c>)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	4b40      	ldr	r3, [pc, #256]	@ (80070e0 <xTaskIncrementTick+0x160>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	4a3e      	ldr	r2, [pc, #248]	@ (80070e0 <xTaskIncrementTick+0x160>)
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	f000 fab6 	bl	8007558 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fec:	4b3d      	ldr	r3, [pc, #244]	@ (80070e4 <xTaskIncrementTick+0x164>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d34d      	bcc.n	8007092 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ff6:	4b38      	ldr	r3, [pc, #224]	@ (80070d8 <xTaskIncrementTick+0x158>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <xTaskIncrementTick+0x84>
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <xTaskIncrementTick+0x86>
 8007004:	2300      	movs	r3, #0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800700a:	4b36      	ldr	r3, [pc, #216]	@ (80070e4 <xTaskIncrementTick+0x164>)
 800700c:	f04f 32ff 	mov.w	r2, #4294967295
 8007010:	601a      	str	r2, [r3, #0]
					break;
 8007012:	e03e      	b.n	8007092 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007014:	4b30      	ldr	r3, [pc, #192]	@ (80070d8 <xTaskIncrementTick+0x158>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	429a      	cmp	r2, r3
 800702a:	d203      	bcs.n	8007034 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800702c:	4a2d      	ldr	r2, [pc, #180]	@ (80070e4 <xTaskIncrementTick+0x164>)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6013      	str	r3, [r2, #0]
						break;
 8007032:	e02e      	b.n	8007092 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	3304      	adds	r3, #4
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe fef5 	bl	8005e28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	3318      	adds	r3, #24
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe feec 	bl	8005e28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007054:	2201      	movs	r2, #1
 8007056:	409a      	lsls	r2, r3
 8007058:	4b23      	ldr	r3, [pc, #140]	@ (80070e8 <xTaskIncrementTick+0x168>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4313      	orrs	r3, r2
 800705e:	4a22      	ldr	r2, [pc, #136]	@ (80070e8 <xTaskIncrementTick+0x168>)
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4a1f      	ldr	r2, [pc, #124]	@ (80070ec <xTaskIncrementTick+0x16c>)
 8007070:	441a      	add	r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	3304      	adds	r3, #4
 8007076:	4619      	mov	r1, r3
 8007078:	4610      	mov	r0, r2
 800707a:	f7fe fe7a 	bl	8005d72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007082:	4b1b      	ldr	r3, [pc, #108]	@ (80070f0 <xTaskIncrementTick+0x170>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007088:	429a      	cmp	r2, r3
 800708a:	d3b4      	bcc.n	8006ff6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800708c:	2301      	movs	r3, #1
 800708e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007090:	e7b1      	b.n	8006ff6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007092:	4b17      	ldr	r3, [pc, #92]	@ (80070f0 <xTaskIncrementTick+0x170>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007098:	4914      	ldr	r1, [pc, #80]	@ (80070ec <xTaskIncrementTick+0x16c>)
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d907      	bls.n	80070ba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80070aa:	2301      	movs	r3, #1
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	e004      	b.n	80070ba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80070b0:	4b10      	ldr	r3, [pc, #64]	@ (80070f4 <xTaskIncrementTick+0x174>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3301      	adds	r3, #1
 80070b6:	4a0f      	ldr	r2, [pc, #60]	@ (80070f4 <xTaskIncrementTick+0x174>)
 80070b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80070ba:	4b0f      	ldr	r3, [pc, #60]	@ (80070f8 <xTaskIncrementTick+0x178>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80070c2:	2301      	movs	r3, #1
 80070c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80070c6:	697b      	ldr	r3, [r7, #20]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000750 	.word	0x20000750
 80070d4:	2000072c 	.word	0x2000072c
 80070d8:	200006e0 	.word	0x200006e0
 80070dc:	200006e4 	.word	0x200006e4
 80070e0:	20000740 	.word	0x20000740
 80070e4:	20000748 	.word	0x20000748
 80070e8:	20000730 	.word	0x20000730
 80070ec:	2000062c 	.word	0x2000062c
 80070f0:	20000628 	.word	0x20000628
 80070f4:	20000738 	.word	0x20000738
 80070f8:	2000073c 	.word	0x2000073c

080070fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007102:	4b29      	ldr	r3, [pc, #164]	@ (80071a8 <vTaskSwitchContext+0xac>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800710a:	4b28      	ldr	r3, [pc, #160]	@ (80071ac <vTaskSwitchContext+0xb0>)
 800710c:	2201      	movs	r2, #1
 800710e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007110:	e045      	b.n	800719e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007112:	4b26      	ldr	r3, [pc, #152]	@ (80071ac <vTaskSwitchContext+0xb0>)
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007118:	4b25      	ldr	r3, [pc, #148]	@ (80071b0 <vTaskSwitchContext+0xb4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	fab3 f383 	clz	r3, r3
 8007124:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007126:	7afb      	ldrb	r3, [r7, #11]
 8007128:	f1c3 031f 	rsb	r3, r3, #31
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	4921      	ldr	r1, [pc, #132]	@ (80071b4 <vTaskSwitchContext+0xb8>)
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	440b      	add	r3, r1
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10b      	bne.n	800715a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	607b      	str	r3, [r7, #4]
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	e7fd      	b.n	8007156 <vTaskSwitchContext+0x5a>
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4a13      	ldr	r2, [pc, #76]	@ (80071b4 <vTaskSwitchContext+0xb8>)
 8007166:	4413      	add	r3, r2
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	605a      	str	r2, [r3, #4]
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	3308      	adds	r3, #8
 800717c:	429a      	cmp	r2, r3
 800717e:	d104      	bne.n	800718a <vTaskSwitchContext+0x8e>
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	605a      	str	r2, [r3, #4]
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	4a09      	ldr	r2, [pc, #36]	@ (80071b8 <vTaskSwitchContext+0xbc>)
 8007192:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007194:	4b08      	ldr	r3, [pc, #32]	@ (80071b8 <vTaskSwitchContext+0xbc>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	334c      	adds	r3, #76	@ 0x4c
 800719a:	4a08      	ldr	r2, [pc, #32]	@ (80071bc <vTaskSwitchContext+0xc0>)
 800719c:	6013      	str	r3, [r2, #0]
}
 800719e:	bf00      	nop
 80071a0:	371c      	adds	r7, #28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bc80      	pop	{r7}
 80071a6:	4770      	bx	lr
 80071a8:	20000750 	.word	0x20000750
 80071ac:	2000073c 	.word	0x2000073c
 80071b0:	20000730 	.word	0x20000730
 80071b4:	2000062c 	.word	0x2000062c
 80071b8:	20000628 	.word	0x20000628
 80071bc:	20000030 	.word	0x20000030

080071c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10b      	bne.n	80071e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	60fb      	str	r3, [r7, #12]
}
 80071e2:	bf00      	nop
 80071e4:	bf00      	nop
 80071e6:	e7fd      	b.n	80071e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071e8:	4b07      	ldr	r3, [pc, #28]	@ (8007208 <vTaskPlaceOnEventList+0x48>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3318      	adds	r3, #24
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7fe fde1 	bl	8005db8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071f6:	2101      	movs	r1, #1
 80071f8:	6838      	ldr	r0, [r7, #0]
 80071fa:	f000 fbb3 	bl	8007964 <prvAddCurrentTaskToDelayedList>
}
 80071fe:	bf00      	nop
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20000628 	.word	0x20000628

0800720c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10b      	bne.n	800723a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	60fb      	str	r3, [r7, #12]
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	e7fd      	b.n	8007236 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	3318      	adds	r3, #24
 800723e:	4618      	mov	r0, r3
 8007240:	f7fe fdf2 	bl	8005e28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007244:	4b1d      	ldr	r3, [pc, #116]	@ (80072bc <xTaskRemoveFromEventList+0xb0>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d11c      	bne.n	8007286 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	3304      	adds	r3, #4
 8007250:	4618      	mov	r0, r3
 8007252:	f7fe fde9 	bl	8005e28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725a:	2201      	movs	r2, #1
 800725c:	409a      	lsls	r2, r3
 800725e:	4b18      	ldr	r3, [pc, #96]	@ (80072c0 <xTaskRemoveFromEventList+0xb4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4313      	orrs	r3, r2
 8007264:	4a16      	ldr	r2, [pc, #88]	@ (80072c0 <xTaskRemoveFromEventList+0xb4>)
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4a13      	ldr	r2, [pc, #76]	@ (80072c4 <xTaskRemoveFromEventList+0xb8>)
 8007276:	441a      	add	r2, r3
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	3304      	adds	r3, #4
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f7fe fd77 	bl	8005d72 <vListInsertEnd>
 8007284:	e005      	b.n	8007292 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	3318      	adds	r3, #24
 800728a:	4619      	mov	r1, r3
 800728c:	480e      	ldr	r0, [pc, #56]	@ (80072c8 <xTaskRemoveFromEventList+0xbc>)
 800728e:	f7fe fd70 	bl	8005d72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007296:	4b0d      	ldr	r3, [pc, #52]	@ (80072cc <xTaskRemoveFromEventList+0xc0>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729c:	429a      	cmp	r2, r3
 800729e:	d905      	bls.n	80072ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072a0:	2301      	movs	r3, #1
 80072a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072a4:	4b0a      	ldr	r3, [pc, #40]	@ (80072d0 <xTaskRemoveFromEventList+0xc4>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	e001      	b.n	80072b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80072b0:	697b      	ldr	r3, [r7, #20]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000750 	.word	0x20000750
 80072c0:	20000730 	.word	0x20000730
 80072c4:	2000062c 	.word	0x2000062c
 80072c8:	200006e8 	.word	0x200006e8
 80072cc:	20000628 	.word	0x20000628
 80072d0:	2000073c 	.word	0x2000073c

080072d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072dc:	4b06      	ldr	r3, [pc, #24]	@ (80072f8 <vTaskInternalSetTimeOutState+0x24>)
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072e4:	4b05      	ldr	r3, [pc, #20]	@ (80072fc <vTaskInternalSetTimeOutState+0x28>)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	605a      	str	r2, [r3, #4]
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bc80      	pop	{r7}
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	20000740 	.word	0x20000740
 80072fc:	2000072c 	.word	0x2000072c

08007300 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10b      	bne.n	8007328 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	613b      	str	r3, [r7, #16]
}
 8007322:	bf00      	nop
 8007324:	bf00      	nop
 8007326:	e7fd      	b.n	8007324 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10b      	bne.n	8007346 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	60fb      	str	r3, [r7, #12]
}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	e7fd      	b.n	8007342 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007346:	f000 fc61 	bl	8007c0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800734a:	4b1d      	ldr	r3, [pc, #116]	@ (80073c0 <xTaskCheckForTimeOut+0xc0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007362:	d102      	bne.n	800736a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007364:	2300      	movs	r3, #0
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	e023      	b.n	80073b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	4b15      	ldr	r3, [pc, #84]	@ (80073c4 <xTaskCheckForTimeOut+0xc4>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d007      	beq.n	8007386 <xTaskCheckForTimeOut+0x86>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	429a      	cmp	r2, r3
 800737e:	d302      	bcc.n	8007386 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007380:	2301      	movs	r3, #1
 8007382:	61fb      	str	r3, [r7, #28]
 8007384:	e015      	b.n	80073b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	429a      	cmp	r2, r3
 800738e:	d20b      	bcs.n	80073a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	1ad2      	subs	r2, r2, r3
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff ff99 	bl	80072d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61fb      	str	r3, [r7, #28]
 80073a6:	e004      	b.n	80073b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073ae:	2301      	movs	r3, #1
 80073b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073b2:	f000 fc5b 	bl	8007c6c <vPortExitCritical>

	return xReturn;
 80073b6:	69fb      	ldr	r3, [r7, #28]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3720      	adds	r7, #32
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	2000072c 	.word	0x2000072c
 80073c4:	20000740 	.word	0x20000740

080073c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073cc:	4b03      	ldr	r3, [pc, #12]	@ (80073dc <vTaskMissedYield+0x14>)
 80073ce:	2201      	movs	r2, #1
 80073d0:	601a      	str	r2, [r3, #0]
}
 80073d2:	bf00      	nop
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	2000073c 	.word	0x2000073c

080073e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073e8:	f000 f852 	bl	8007490 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073ec:	4b06      	ldr	r3, [pc, #24]	@ (8007408 <prvIdleTask+0x28>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d9f9      	bls.n	80073e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073f4:	4b05      	ldr	r3, [pc, #20]	@ (800740c <prvIdleTask+0x2c>)
 80073f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007404:	e7f0      	b.n	80073e8 <prvIdleTask+0x8>
 8007406:	bf00      	nop
 8007408:	2000062c 	.word	0x2000062c
 800740c:	e000ed04 	.word	0xe000ed04

08007410 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007416:	2300      	movs	r3, #0
 8007418:	607b      	str	r3, [r7, #4]
 800741a:	e00c      	b.n	8007436 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4a12      	ldr	r2, [pc, #72]	@ (8007470 <prvInitialiseTaskLists+0x60>)
 8007428:	4413      	add	r3, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fc76 	bl	8005d1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3301      	adds	r3, #1
 8007434:	607b      	str	r3, [r7, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b06      	cmp	r3, #6
 800743a:	d9ef      	bls.n	800741c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800743c:	480d      	ldr	r0, [pc, #52]	@ (8007474 <prvInitialiseTaskLists+0x64>)
 800743e:	f7fe fc6d 	bl	8005d1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007442:	480d      	ldr	r0, [pc, #52]	@ (8007478 <prvInitialiseTaskLists+0x68>)
 8007444:	f7fe fc6a 	bl	8005d1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007448:	480c      	ldr	r0, [pc, #48]	@ (800747c <prvInitialiseTaskLists+0x6c>)
 800744a:	f7fe fc67 	bl	8005d1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800744e:	480c      	ldr	r0, [pc, #48]	@ (8007480 <prvInitialiseTaskLists+0x70>)
 8007450:	f7fe fc64 	bl	8005d1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007454:	480b      	ldr	r0, [pc, #44]	@ (8007484 <prvInitialiseTaskLists+0x74>)
 8007456:	f7fe fc61 	bl	8005d1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800745a:	4b0b      	ldr	r3, [pc, #44]	@ (8007488 <prvInitialiseTaskLists+0x78>)
 800745c:	4a05      	ldr	r2, [pc, #20]	@ (8007474 <prvInitialiseTaskLists+0x64>)
 800745e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007460:	4b0a      	ldr	r3, [pc, #40]	@ (800748c <prvInitialiseTaskLists+0x7c>)
 8007462:	4a05      	ldr	r2, [pc, #20]	@ (8007478 <prvInitialiseTaskLists+0x68>)
 8007464:	601a      	str	r2, [r3, #0]
}
 8007466:	bf00      	nop
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	2000062c 	.word	0x2000062c
 8007474:	200006b8 	.word	0x200006b8
 8007478:	200006cc 	.word	0x200006cc
 800747c:	200006e8 	.word	0x200006e8
 8007480:	200006fc 	.word	0x200006fc
 8007484:	20000714 	.word	0x20000714
 8007488:	200006e0 	.word	0x200006e0
 800748c:	200006e4 	.word	0x200006e4

08007490 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007496:	e019      	b.n	80074cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007498:	f000 fbb8 	bl	8007c0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800749c:	4b10      	ldr	r3, [pc, #64]	@ (80074e0 <prvCheckTasksWaitingTermination+0x50>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3304      	adds	r3, #4
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fe fcbd 	bl	8005e28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074ae:	4b0d      	ldr	r3, [pc, #52]	@ (80074e4 <prvCheckTasksWaitingTermination+0x54>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	4a0b      	ldr	r2, [pc, #44]	@ (80074e4 <prvCheckTasksWaitingTermination+0x54>)
 80074b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074b8:	4b0b      	ldr	r3, [pc, #44]	@ (80074e8 <prvCheckTasksWaitingTermination+0x58>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3b01      	subs	r3, #1
 80074be:	4a0a      	ldr	r2, [pc, #40]	@ (80074e8 <prvCheckTasksWaitingTermination+0x58>)
 80074c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074c2:	f000 fbd3 	bl	8007c6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f810 	bl	80074ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074cc:	4b06      	ldr	r3, [pc, #24]	@ (80074e8 <prvCheckTasksWaitingTermination+0x58>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e1      	bne.n	8007498 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	200006fc 	.word	0x200006fc
 80074e4:	20000728 	.word	0x20000728
 80074e8:	20000710 	.word	0x20000710

080074ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	334c      	adds	r3, #76	@ 0x4c
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 fc05 	bl	8008d08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007504:	2b00      	cmp	r3, #0
 8007506:	d108      	bne.n	800751a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750c:	4618      	mov	r0, r3
 800750e:	f000 fd47 	bl	8007fa0 <vPortFree>
				vPortFree( pxTCB );
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fd44 	bl	8007fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007518:	e019      	b.n	800754e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007520:	2b01      	cmp	r3, #1
 8007522:	d103      	bne.n	800752c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fd3b 	bl	8007fa0 <vPortFree>
	}
 800752a:	e010      	b.n	800754e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007532:	2b02      	cmp	r3, #2
 8007534:	d00b      	beq.n	800754e <prvDeleteTCB+0x62>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	60fb      	str	r3, [r7, #12]
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	e7fd      	b.n	800754a <prvDeleteTCB+0x5e>
	}
 800754e:	bf00      	nop
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800755e:	4b0e      	ldr	r3, [pc, #56]	@ (8007598 <prvResetNextTaskUnblockTime+0x40>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <prvResetNextTaskUnblockTime+0x14>
 8007568:	2301      	movs	r3, #1
 800756a:	e000      	b.n	800756e <prvResetNextTaskUnblockTime+0x16>
 800756c:	2300      	movs	r3, #0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d004      	beq.n	800757c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007572:	4b0a      	ldr	r3, [pc, #40]	@ (800759c <prvResetNextTaskUnblockTime+0x44>)
 8007574:	f04f 32ff 	mov.w	r2, #4294967295
 8007578:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800757a:	e008      	b.n	800758e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800757c:	4b06      	ldr	r3, [pc, #24]	@ (8007598 <prvResetNextTaskUnblockTime+0x40>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	4a04      	ldr	r2, [pc, #16]	@ (800759c <prvResetNextTaskUnblockTime+0x44>)
 800758c:	6013      	str	r3, [r2, #0]
}
 800758e:	bf00      	nop
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	bc80      	pop	{r7}
 8007596:	4770      	bx	lr
 8007598:	200006e0 	.word	0x200006e0
 800759c:	20000748 	.word	0x20000748

080075a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075a6:	4b0b      	ldr	r3, [pc, #44]	@ (80075d4 <xTaskGetSchedulerState+0x34>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d102      	bne.n	80075b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075ae:	2301      	movs	r3, #1
 80075b0:	607b      	str	r3, [r7, #4]
 80075b2:	e008      	b.n	80075c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b4:	4b08      	ldr	r3, [pc, #32]	@ (80075d8 <xTaskGetSchedulerState+0x38>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075bc:	2302      	movs	r3, #2
 80075be:	607b      	str	r3, [r7, #4]
 80075c0:	e001      	b.n	80075c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075c2:	2300      	movs	r3, #0
 80075c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075c6:	687b      	ldr	r3, [r7, #4]
	}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000734 	.word	0x20000734
 80075d8:	20000750 	.word	0x20000750

080075dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d06e      	beq.n	80076d0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f6:	4b39      	ldr	r3, [pc, #228]	@ (80076dc <xTaskPriorityInherit+0x100>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d25e      	bcs.n	80076be <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	db06      	blt.n	8007616 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007608:	4b34      	ldr	r3, [pc, #208]	@ (80076dc <xTaskPriorityInherit+0x100>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760e:	f1c3 0207 	rsb	r2, r3, #7
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	6959      	ldr	r1, [r3, #20]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4a2e      	ldr	r2, [pc, #184]	@ (80076e0 <xTaskPriorityInherit+0x104>)
 8007628:	4413      	add	r3, r2
 800762a:	4299      	cmp	r1, r3
 800762c:	d101      	bne.n	8007632 <xTaskPriorityInherit+0x56>
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <xTaskPriorityInherit+0x58>
 8007632:	2300      	movs	r3, #0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d03a      	beq.n	80076ae <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	3304      	adds	r3, #4
 800763c:	4618      	mov	r0, r3
 800763e:	f7fe fbf3 	bl	8005e28 <uxListRemove>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d115      	bne.n	8007674 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800764c:	4924      	ldr	r1, [pc, #144]	@ (80076e0 <xTaskPriorityInherit+0x104>)
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	440b      	add	r3, r1
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10a      	bne.n	8007674 <xTaskPriorityInherit+0x98>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007662:	2201      	movs	r2, #1
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	43da      	mvns	r2, r3
 800766a:	4b1e      	ldr	r3, [pc, #120]	@ (80076e4 <xTaskPriorityInherit+0x108>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4013      	ands	r3, r2
 8007670:	4a1c      	ldr	r2, [pc, #112]	@ (80076e4 <xTaskPriorityInherit+0x108>)
 8007672:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007674:	4b19      	ldr	r3, [pc, #100]	@ (80076dc <xTaskPriorityInherit+0x100>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007682:	2201      	movs	r2, #1
 8007684:	409a      	lsls	r2, r3
 8007686:	4b17      	ldr	r3, [pc, #92]	@ (80076e4 <xTaskPriorityInherit+0x108>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4313      	orrs	r3, r2
 800768c:	4a15      	ldr	r2, [pc, #84]	@ (80076e4 <xTaskPriorityInherit+0x108>)
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4a10      	ldr	r2, [pc, #64]	@ (80076e0 <xTaskPriorityInherit+0x104>)
 800769e:	441a      	add	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	3304      	adds	r3, #4
 80076a4:	4619      	mov	r1, r3
 80076a6:	4610      	mov	r0, r2
 80076a8:	f7fe fb63 	bl	8005d72 <vListInsertEnd>
 80076ac:	e004      	b.n	80076b8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076ae:	4b0b      	ldr	r3, [pc, #44]	@ (80076dc <xTaskPriorityInherit+0x100>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80076b8:	2301      	movs	r3, #1
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	e008      	b.n	80076d0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076c2:	4b06      	ldr	r3, [pc, #24]	@ (80076dc <xTaskPriorityInherit+0x100>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d201      	bcs.n	80076d0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80076cc:	2301      	movs	r3, #1
 80076ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076d0:	68fb      	ldr	r3, [r7, #12]
	}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20000628 	.word	0x20000628
 80076e0:	2000062c 	.word	0x2000062c
 80076e4:	20000730 	.word	0x20000730

080076e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076f4:	2300      	movs	r3, #0
 80076f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d070      	beq.n	80077e0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076fe:	4b3b      	ldr	r3, [pc, #236]	@ (80077ec <xTaskPriorityDisinherit+0x104>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	429a      	cmp	r2, r3
 8007706:	d00b      	beq.n	8007720 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	60fb      	str	r3, [r7, #12]
}
 800771a:	bf00      	nop
 800771c:	bf00      	nop
 800771e:	e7fd      	b.n	800771c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10b      	bne.n	8007740 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	60bb      	str	r3, [r7, #8]
}
 800773a:	bf00      	nop
 800773c:	bf00      	nop
 800773e:	e7fd      	b.n	800773c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007744:	1e5a      	subs	r2, r3, #1
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007752:	429a      	cmp	r2, r3
 8007754:	d044      	beq.n	80077e0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800775a:	2b00      	cmp	r3, #0
 800775c:	d140      	bne.n	80077e0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	3304      	adds	r3, #4
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fb60 	bl	8005e28 <uxListRemove>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d115      	bne.n	800779a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007772:	491f      	ldr	r1, [pc, #124]	@ (80077f0 <xTaskPriorityDisinherit+0x108>)
 8007774:	4613      	mov	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	440b      	add	r3, r1
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10a      	bne.n	800779a <xTaskPriorityDisinherit+0xb2>
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007788:	2201      	movs	r2, #1
 800778a:	fa02 f303 	lsl.w	r3, r2, r3
 800778e:	43da      	mvns	r2, r3
 8007790:	4b18      	ldr	r3, [pc, #96]	@ (80077f4 <xTaskPriorityDisinherit+0x10c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4013      	ands	r3, r2
 8007796:	4a17      	ldr	r2, [pc, #92]	@ (80077f4 <xTaskPriorityDisinherit+0x10c>)
 8007798:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a6:	f1c3 0207 	rsb	r2, r3, #7
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b2:	2201      	movs	r2, #1
 80077b4:	409a      	lsls	r2, r3
 80077b6:	4b0f      	ldr	r3, [pc, #60]	@ (80077f4 <xTaskPriorityDisinherit+0x10c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	4a0d      	ldr	r2, [pc, #52]	@ (80077f4 <xTaskPriorityDisinherit+0x10c>)
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4a08      	ldr	r2, [pc, #32]	@ (80077f0 <xTaskPriorityDisinherit+0x108>)
 80077ce:	441a      	add	r2, r3
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7fe facb 	bl	8005d72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077dc:	2301      	movs	r3, #1
 80077de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077e0:	697b      	ldr	r3, [r7, #20]
	}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20000628 	.word	0x20000628
 80077f0:	2000062c 	.word	0x2000062c
 80077f4:	20000730 	.word	0x20000730

080077f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007806:	2301      	movs	r3, #1
 8007808:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 808a 	beq.w	8007926 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10b      	bne.n	8007832 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	60fb      	str	r3, [r7, #12]
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	e7fd      	b.n	800782e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d902      	bls.n	8007842 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	61fb      	str	r3, [r7, #28]
 8007840:	e002      	b.n	8007848 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007846:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	429a      	cmp	r2, r3
 8007850:	d069      	beq.n	8007926 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	429a      	cmp	r2, r3
 800785a:	d164      	bne.n	8007926 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800785c:	4b34      	ldr	r3, [pc, #208]	@ (8007930 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	429a      	cmp	r2, r3
 8007864:	d10b      	bne.n	800787e <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	60bb      	str	r3, [r7, #8]
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	e7fd      	b.n	800787a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007882:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	69fa      	ldr	r2, [r7, #28]
 8007888:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	2b00      	cmp	r3, #0
 8007890:	db04      	blt.n	800789c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	f1c3 0207 	rsb	r2, r3, #7
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	6959      	ldr	r1, [r3, #20]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4613      	mov	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4a22      	ldr	r2, [pc, #136]	@ (8007934 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80078ac:	4413      	add	r3, r2
 80078ae:	4299      	cmp	r1, r3
 80078b0:	d101      	bne.n	80078b6 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 80078b6:	2300      	movs	r3, #0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d034      	beq.n	8007926 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	3304      	adds	r3, #4
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe fab1 	bl	8005e28 <uxListRemove>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d115      	bne.n	80078f8 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d0:	4918      	ldr	r1, [pc, #96]	@ (8007934 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80078d2:	4613      	mov	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	440b      	add	r3, r1
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <vTaskPriorityDisinheritAfterTimeout+0x100>
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e6:	2201      	movs	r2, #1
 80078e8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ec:	43da      	mvns	r2, r3
 80078ee:	4b12      	ldr	r3, [pc, #72]	@ (8007938 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4013      	ands	r3, r2
 80078f4:	4a10      	ldr	r2, [pc, #64]	@ (8007938 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80078f6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fc:	2201      	movs	r2, #1
 80078fe:	409a      	lsls	r2, r3
 8007900:	4b0d      	ldr	r3, [pc, #52]	@ (8007938 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4313      	orrs	r3, r2
 8007906:	4a0c      	ldr	r2, [pc, #48]	@ (8007938 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4a07      	ldr	r2, [pc, #28]	@ (8007934 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007918:	441a      	add	r2, r3
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	3304      	adds	r3, #4
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f7fe fa26 	bl	8005d72 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007926:	bf00      	nop
 8007928:	3720      	adds	r7, #32
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	20000628 	.word	0x20000628
 8007934:	2000062c 	.word	0x2000062c
 8007938:	20000730 	.word	0x20000730

0800793c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007940:	4b07      	ldr	r3, [pc, #28]	@ (8007960 <pvTaskIncrementMutexHeldCount+0x24>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d004      	beq.n	8007952 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007948:	4b05      	ldr	r3, [pc, #20]	@ (8007960 <pvTaskIncrementMutexHeldCount+0x24>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800794e:	3201      	adds	r2, #1
 8007950:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007952:	4b03      	ldr	r3, [pc, #12]	@ (8007960 <pvTaskIncrementMutexHeldCount+0x24>)
 8007954:	681b      	ldr	r3, [r3, #0]
	}
 8007956:	4618      	mov	r0, r3
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	20000628 	.word	0x20000628

08007964 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800796e:	4b29      	ldr	r3, [pc, #164]	@ (8007a14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007974:	4b28      	ldr	r3, [pc, #160]	@ (8007a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3304      	adds	r3, #4
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe fa54 	bl	8005e28 <uxListRemove>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10b      	bne.n	800799e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007986:	4b24      	ldr	r3, [pc, #144]	@ (8007a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798c:	2201      	movs	r2, #1
 800798e:	fa02 f303 	lsl.w	r3, r2, r3
 8007992:	43da      	mvns	r2, r3
 8007994:	4b21      	ldr	r3, [pc, #132]	@ (8007a1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4013      	ands	r3, r2
 800799a:	4a20      	ldr	r2, [pc, #128]	@ (8007a1c <prvAddCurrentTaskToDelayedList+0xb8>)
 800799c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a4:	d10a      	bne.n	80079bc <prvAddCurrentTaskToDelayedList+0x58>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3304      	adds	r3, #4
 80079b2:	4619      	mov	r1, r3
 80079b4:	481a      	ldr	r0, [pc, #104]	@ (8007a20 <prvAddCurrentTaskToDelayedList+0xbc>)
 80079b6:	f7fe f9dc 	bl	8005d72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079ba:	e026      	b.n	8007a0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4413      	add	r3, r2
 80079c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079c4:	4b14      	ldr	r3, [pc, #80]	@ (8007a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d209      	bcs.n	80079e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079d4:	4b13      	ldr	r3, [pc, #76]	@ (8007a24 <prvAddCurrentTaskToDelayedList+0xc0>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	4b0f      	ldr	r3, [pc, #60]	@ (8007a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3304      	adds	r3, #4
 80079de:	4619      	mov	r1, r3
 80079e0:	4610      	mov	r0, r2
 80079e2:	f7fe f9e9 	bl	8005db8 <vListInsert>
}
 80079e6:	e010      	b.n	8007a0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007a28 <prvAddCurrentTaskToDelayedList+0xc4>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007a18 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3304      	adds	r3, #4
 80079f2:	4619      	mov	r1, r3
 80079f4:	4610      	mov	r0, r2
 80079f6:	f7fe f9df 	bl	8005db8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079fa:	4b0c      	ldr	r3, [pc, #48]	@ (8007a2c <prvAddCurrentTaskToDelayedList+0xc8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d202      	bcs.n	8007a0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a04:	4a09      	ldr	r2, [pc, #36]	@ (8007a2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	6013      	str	r3, [r2, #0]
}
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	2000072c 	.word	0x2000072c
 8007a18:	20000628 	.word	0x20000628
 8007a1c:	20000730 	.word	0x20000730
 8007a20:	20000714 	.word	0x20000714
 8007a24:	200006e4 	.word	0x200006e4
 8007a28:	200006e0 	.word	0x200006e0
 8007a2c:	20000748 	.word	0x20000748

08007a30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3b04      	subs	r3, #4
 8007a40:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f023 0201 	bic.w	r2, r3, #1
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3b04      	subs	r3, #4
 8007a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a60:	4a08      	ldr	r2, [pc, #32]	@ (8007a84 <pxPortInitialiseStack+0x54>)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3b14      	subs	r3, #20
 8007a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3b20      	subs	r3, #32
 8007a76:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a78:	68fb      	ldr	r3, [r7, #12]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bc80      	pop	{r7}
 8007a82:	4770      	bx	lr
 8007a84:	08007a89 	.word	0x08007a89

08007a88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a92:	4b12      	ldr	r3, [pc, #72]	@ (8007adc <prvTaskExitError+0x54>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9a:	d00b      	beq.n	8007ab4 <prvTaskExitError+0x2c>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	60fb      	str	r3, [r7, #12]
}
 8007aae:	bf00      	nop
 8007ab0:	bf00      	nop
 8007ab2:	e7fd      	b.n	8007ab0 <prvTaskExitError+0x28>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	60bb      	str	r3, [r7, #8]
}
 8007ac6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ac8:	bf00      	nop
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0fc      	beq.n	8007aca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ad0:	bf00      	nop
 8007ad2:	bf00      	nop
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bc80      	pop	{r7}
 8007ada:	4770      	bx	lr
 8007adc:	20000020 	.word	0x20000020

08007ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ae0:	4b07      	ldr	r3, [pc, #28]	@ (8007b00 <pxCurrentTCBConst2>)
 8007ae2:	6819      	ldr	r1, [r3, #0]
 8007ae4:	6808      	ldr	r0, [r1, #0]
 8007ae6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007aea:	f380 8809 	msr	PSP, r0
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f04f 0000 	mov.w	r0, #0
 8007af6:	f380 8811 	msr	BASEPRI, r0
 8007afa:	f04e 0e0d 	orr.w	lr, lr, #13
 8007afe:	4770      	bx	lr

08007b00 <pxCurrentTCBConst2>:
 8007b00:	20000628 	.word	0x20000628
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop

08007b08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007b08:	4806      	ldr	r0, [pc, #24]	@ (8007b24 <prvPortStartFirstTask+0x1c>)
 8007b0a:	6800      	ldr	r0, [r0, #0]
 8007b0c:	6800      	ldr	r0, [r0, #0]
 8007b0e:	f380 8808 	msr	MSP, r0
 8007b12:	b662      	cpsie	i
 8007b14:	b661      	cpsie	f
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	df00      	svc	0
 8007b20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b22:	bf00      	nop
 8007b24:	e000ed08 	.word	0xe000ed08

08007b28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b2e:	4b32      	ldr	r3, [pc, #200]	@ (8007bf8 <xPortStartScheduler+0xd0>)
 8007b30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	22ff      	movs	r2, #255	@ 0xff
 8007b3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	4b2a      	ldr	r3, [pc, #168]	@ (8007bfc <xPortStartScheduler+0xd4>)
 8007b54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b56:	4b2a      	ldr	r3, [pc, #168]	@ (8007c00 <xPortStartScheduler+0xd8>)
 8007b58:	2207      	movs	r2, #7
 8007b5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b5c:	e009      	b.n	8007b72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007b5e:	4b28      	ldr	r3, [pc, #160]	@ (8007c00 <xPortStartScheduler+0xd8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	4a26      	ldr	r2, [pc, #152]	@ (8007c00 <xPortStartScheduler+0xd8>)
 8007b66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b72:	78fb      	ldrb	r3, [r7, #3]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b7a:	2b80      	cmp	r3, #128	@ 0x80
 8007b7c:	d0ef      	beq.n	8007b5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b7e:	4b20      	ldr	r3, [pc, #128]	@ (8007c00 <xPortStartScheduler+0xd8>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f1c3 0307 	rsb	r3, r3, #7
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d00b      	beq.n	8007ba2 <xPortStartScheduler+0x7a>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	60bb      	str	r3, [r7, #8]
}
 8007b9c:	bf00      	nop
 8007b9e:	bf00      	nop
 8007ba0:	e7fd      	b.n	8007b9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ba2:	4b17      	ldr	r3, [pc, #92]	@ (8007c00 <xPortStartScheduler+0xd8>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	021b      	lsls	r3, r3, #8
 8007ba8:	4a15      	ldr	r2, [pc, #84]	@ (8007c00 <xPortStartScheduler+0xd8>)
 8007baa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bac:	4b14      	ldr	r3, [pc, #80]	@ (8007c00 <xPortStartScheduler+0xd8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007bb4:	4a12      	ldr	r2, [pc, #72]	@ (8007c00 <xPortStartScheduler+0xd8>)
 8007bb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bc0:	4b10      	ldr	r3, [pc, #64]	@ (8007c04 <xPortStartScheduler+0xdc>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8007c04 <xPortStartScheduler+0xdc>)
 8007bc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007bca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <xPortStartScheduler+0xdc>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8007c04 <xPortStartScheduler+0xdc>)
 8007bd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007bd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bd8:	f000 f8b8 	bl	8007d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8007c08 <xPortStartScheduler+0xe0>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007be2:	f7ff ff91 	bl	8007b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007be6:	f7ff fa89 	bl	80070fc <vTaskSwitchContext>
	prvTaskExitError();
 8007bea:	f7ff ff4d 	bl	8007a88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	e000e400 	.word	0xe000e400
 8007bfc:	20000754 	.word	0x20000754
 8007c00:	20000758 	.word	0x20000758
 8007c04:	e000ed20 	.word	0xe000ed20
 8007c08:	20000020 	.word	0x20000020

08007c0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	607b      	str	r3, [r7, #4]
}
 8007c24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c26:	4b0f      	ldr	r3, [pc, #60]	@ (8007c64 <vPortEnterCritical+0x58>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8007c64 <vPortEnterCritical+0x58>)
 8007c2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c30:	4b0c      	ldr	r3, [pc, #48]	@ (8007c64 <vPortEnterCritical+0x58>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d110      	bne.n	8007c5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c38:	4b0b      	ldr	r3, [pc, #44]	@ (8007c68 <vPortEnterCritical+0x5c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00b      	beq.n	8007c5a <vPortEnterCritical+0x4e>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	603b      	str	r3, [r7, #0]
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	e7fd      	b.n	8007c56 <vPortEnterCritical+0x4a>
	}
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr
 8007c64:	20000020 	.word	0x20000020
 8007c68:	e000ed04 	.word	0xe000ed04

08007c6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c72:	4b12      	ldr	r3, [pc, #72]	@ (8007cbc <vPortExitCritical+0x50>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10b      	bne.n	8007c92 <vPortExitCritical+0x26>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	607b      	str	r3, [r7, #4]
}
 8007c8c:	bf00      	nop
 8007c8e:	bf00      	nop
 8007c90:	e7fd      	b.n	8007c8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c92:	4b0a      	ldr	r3, [pc, #40]	@ (8007cbc <vPortExitCritical+0x50>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	4a08      	ldr	r2, [pc, #32]	@ (8007cbc <vPortExitCritical+0x50>)
 8007c9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c9c:	4b07      	ldr	r3, [pc, #28]	@ (8007cbc <vPortExitCritical+0x50>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d105      	bne.n	8007cb0 <vPortExitCritical+0x44>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f383 8811 	msr	BASEPRI, r3
}
 8007cae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bc80      	pop	{r7}
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	20000020 	.word	0x20000020

08007cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cc0:	f3ef 8009 	mrs	r0, PSP
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007d00 <pxCurrentTCBConst>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007cd0:	6010      	str	r0, [r2, #0]
 8007cd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007cd6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007cda:	f380 8811 	msr	BASEPRI, r0
 8007cde:	f7ff fa0d 	bl	80070fc <vTaskSwitchContext>
 8007ce2:	f04f 0000 	mov.w	r0, #0
 8007ce6:	f380 8811 	msr	BASEPRI, r0
 8007cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007cee:	6819      	ldr	r1, [r3, #0]
 8007cf0:	6808      	ldr	r0, [r1, #0]
 8007cf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007cf6:	f380 8809 	msr	PSP, r0
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	4770      	bx	lr

08007d00 <pxCurrentTCBConst>:
 8007d00:	20000628 	.word	0x20000628
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d04:	bf00      	nop
 8007d06:	bf00      	nop

08007d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	607b      	str	r3, [r7, #4]
}
 8007d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d22:	f7ff f92d 	bl	8006f80 <xTaskIncrementTick>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d2c:	4b06      	ldr	r3, [pc, #24]	@ (8007d48 <SysTick_Handler+0x40>)
 8007d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	2300      	movs	r3, #0
 8007d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	f383 8811 	msr	BASEPRI, r3
}
 8007d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	e000ed04 	.word	0xe000ed04

08007d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d50:	4b0a      	ldr	r3, [pc, #40]	@ (8007d7c <vPortSetupTimerInterrupt+0x30>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d56:	4b0a      	ldr	r3, [pc, #40]	@ (8007d80 <vPortSetupTimerInterrupt+0x34>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d5c:	4b09      	ldr	r3, [pc, #36]	@ (8007d84 <vPortSetupTimerInterrupt+0x38>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a09      	ldr	r2, [pc, #36]	@ (8007d88 <vPortSetupTimerInterrupt+0x3c>)
 8007d62:	fba2 2303 	umull	r2, r3, r2, r3
 8007d66:	099b      	lsrs	r3, r3, #6
 8007d68:	4a08      	ldr	r2, [pc, #32]	@ (8007d8c <vPortSetupTimerInterrupt+0x40>)
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d6e:	4b03      	ldr	r3, [pc, #12]	@ (8007d7c <vPortSetupTimerInterrupt+0x30>)
 8007d70:	2207      	movs	r2, #7
 8007d72:	601a      	str	r2, [r3, #0]
}
 8007d74:	bf00      	nop
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bc80      	pop	{r7}
 8007d7a:	4770      	bx	lr
 8007d7c:	e000e010 	.word	0xe000e010
 8007d80:	e000e018 	.word	0xe000e018
 8007d84:	20000014 	.word	0x20000014
 8007d88:	10624dd3 	.word	0x10624dd3
 8007d8c:	e000e014 	.word	0xe000e014

08007d90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d96:	f3ef 8305 	mrs	r3, IPSR
 8007d9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b0f      	cmp	r3, #15
 8007da0:	d915      	bls.n	8007dce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007da2:	4a17      	ldr	r2, [pc, #92]	@ (8007e00 <vPortValidateInterruptPriority+0x70>)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4413      	add	r3, r2
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007dac:	4b15      	ldr	r3, [pc, #84]	@ (8007e04 <vPortValidateInterruptPriority+0x74>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	7afa      	ldrb	r2, [r7, #11]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d20b      	bcs.n	8007dce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	607b      	str	r3, [r7, #4]
}
 8007dc8:	bf00      	nop
 8007dca:	bf00      	nop
 8007dcc:	e7fd      	b.n	8007dca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007dce:	4b0e      	ldr	r3, [pc, #56]	@ (8007e08 <vPortValidateInterruptPriority+0x78>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007e0c <vPortValidateInterruptPriority+0x7c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d90b      	bls.n	8007df6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	603b      	str	r3, [r7, #0]
}
 8007df0:	bf00      	nop
 8007df2:	bf00      	nop
 8007df4:	e7fd      	b.n	8007df2 <vPortValidateInterruptPriority+0x62>
	}
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bc80      	pop	{r7}
 8007dfe:	4770      	bx	lr
 8007e00:	e000e3f0 	.word	0xe000e3f0
 8007e04:	20000754 	.word	0x20000754
 8007e08:	e000ed0c 	.word	0xe000ed0c
 8007e0c:	20000758 	.word	0x20000758

08007e10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08a      	sub	sp, #40	@ 0x28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e1c:	f7ff f804 	bl	8006e28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e20:	4b5a      	ldr	r3, [pc, #360]	@ (8007f8c <pvPortMalloc+0x17c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e28:	f000 f916 	bl	8008058 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e2c:	4b58      	ldr	r3, [pc, #352]	@ (8007f90 <pvPortMalloc+0x180>)
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4013      	ands	r3, r2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f040 8090 	bne.w	8007f5a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01e      	beq.n	8007e7e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e40:	2208      	movs	r2, #8
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4413      	add	r3, r2
 8007e46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d015      	beq.n	8007e7e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f023 0307 	bic.w	r3, r3, #7
 8007e58:	3308      	adds	r3, #8
 8007e5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f003 0307 	and.w	r3, r3, #7
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00b      	beq.n	8007e7e <pvPortMalloc+0x6e>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	617b      	str	r3, [r7, #20]
}
 8007e78:	bf00      	nop
 8007e7a:	bf00      	nop
 8007e7c:	e7fd      	b.n	8007e7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d06a      	beq.n	8007f5a <pvPortMalloc+0x14a>
 8007e84:	4b43      	ldr	r3, [pc, #268]	@ (8007f94 <pvPortMalloc+0x184>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d865      	bhi.n	8007f5a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e8e:	4b42      	ldr	r3, [pc, #264]	@ (8007f98 <pvPortMalloc+0x188>)
 8007e90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e92:	4b41      	ldr	r3, [pc, #260]	@ (8007f98 <pvPortMalloc+0x188>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e98:	e004      	b.n	8007ea4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d903      	bls.n	8007eb6 <pvPortMalloc+0xa6>
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1f1      	bne.n	8007e9a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007eb6:	4b35      	ldr	r3, [pc, #212]	@ (8007f8c <pvPortMalloc+0x17c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d04c      	beq.n	8007f5a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2208      	movs	r2, #8
 8007ec6:	4413      	add	r3, r2
 8007ec8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	1ad2      	subs	r2, r2, r3
 8007eda:	2308      	movs	r3, #8
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d920      	bls.n	8007f24 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <pvPortMalloc+0xfc>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	613b      	str	r3, [r7, #16]
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	e7fd      	b.n	8007f08 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f1e:	69b8      	ldr	r0, [r7, #24]
 8007f20:	f000 f8fc 	bl	800811c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f24:	4b1b      	ldr	r3, [pc, #108]	@ (8007f94 <pvPortMalloc+0x184>)
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	4a19      	ldr	r2, [pc, #100]	@ (8007f94 <pvPortMalloc+0x184>)
 8007f30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f32:	4b18      	ldr	r3, [pc, #96]	@ (8007f94 <pvPortMalloc+0x184>)
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4b19      	ldr	r3, [pc, #100]	@ (8007f9c <pvPortMalloc+0x18c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d203      	bcs.n	8007f46 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f3e:	4b15      	ldr	r3, [pc, #84]	@ (8007f94 <pvPortMalloc+0x184>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a16      	ldr	r2, [pc, #88]	@ (8007f9c <pvPortMalloc+0x18c>)
 8007f44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	4b11      	ldr	r3, [pc, #68]	@ (8007f90 <pvPortMalloc+0x180>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	2200      	movs	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f5a:	f7fe ff73 	bl	8006e44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	f003 0307 	and.w	r3, r3, #7
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00b      	beq.n	8007f80 <pvPortMalloc+0x170>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	60fb      	str	r3, [r7, #12]
}
 8007f7a:	bf00      	nop
 8007f7c:	bf00      	nop
 8007f7e:	e7fd      	b.n	8007f7c <pvPortMalloc+0x16c>
	return pvReturn;
 8007f80:	69fb      	ldr	r3, [r7, #28]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3728      	adds	r7, #40	@ 0x28
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20001364 	.word	0x20001364
 8007f90:	20001370 	.word	0x20001370
 8007f94:	20001368 	.word	0x20001368
 8007f98:	2000135c 	.word	0x2000135c
 8007f9c:	2000136c 	.word	0x2000136c

08007fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d04a      	beq.n	8008048 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fb2:	2308      	movs	r3, #8
 8007fb4:	425b      	negs	r3, r3
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4413      	add	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	4b22      	ldr	r3, [pc, #136]	@ (8008050 <vPortFree+0xb0>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10b      	bne.n	8007fe6 <vPortFree+0x46>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	60fb      	str	r3, [r7, #12]
}
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop
 8007fe4:	e7fd      	b.n	8007fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <vPortFree+0x66>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	60bb      	str	r3, [r7, #8]
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	e7fd      	b.n	8008002 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	685a      	ldr	r2, [r3, #4]
 800800a:	4b11      	ldr	r3, [pc, #68]	@ (8008050 <vPortFree+0xb0>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4013      	ands	r3, r2
 8008010:	2b00      	cmp	r3, #0
 8008012:	d019      	beq.n	8008048 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d115      	bne.n	8008048 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	4b0b      	ldr	r3, [pc, #44]	@ (8008050 <vPortFree+0xb0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	43db      	mvns	r3, r3
 8008026:	401a      	ands	r2, r3
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800802c:	f7fe fefc 	bl	8006e28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	685a      	ldr	r2, [r3, #4]
 8008034:	4b07      	ldr	r3, [pc, #28]	@ (8008054 <vPortFree+0xb4>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4413      	add	r3, r2
 800803a:	4a06      	ldr	r2, [pc, #24]	@ (8008054 <vPortFree+0xb4>)
 800803c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800803e:	6938      	ldr	r0, [r7, #16]
 8008040:	f000 f86c 	bl	800811c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008044:	f7fe fefe 	bl	8006e44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008048:	bf00      	nop
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	20001370 	.word	0x20001370
 8008054:	20001368 	.word	0x20001368

08008058 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800805e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008062:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008064:	4b27      	ldr	r3, [pc, #156]	@ (8008104 <prvHeapInit+0xac>)
 8008066:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f003 0307 	and.w	r3, r3, #7
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00c      	beq.n	800808c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3307      	adds	r3, #7
 8008076:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0307 	bic.w	r3, r3, #7
 800807e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	4a1f      	ldr	r2, [pc, #124]	@ (8008104 <prvHeapInit+0xac>)
 8008088:	4413      	add	r3, r2
 800808a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008090:	4a1d      	ldr	r2, [pc, #116]	@ (8008108 <prvHeapInit+0xb0>)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008096:	4b1c      	ldr	r3, [pc, #112]	@ (8008108 <prvHeapInit+0xb0>)
 8008098:	2200      	movs	r2, #0
 800809a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	4413      	add	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080a4:	2208      	movs	r2, #8
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 0307 	bic.w	r3, r3, #7
 80080b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	4a15      	ldr	r2, [pc, #84]	@ (800810c <prvHeapInit+0xb4>)
 80080b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080ba:	4b14      	ldr	r3, [pc, #80]	@ (800810c <prvHeapInit+0xb4>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2200      	movs	r2, #0
 80080c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080c2:	4b12      	ldr	r3, [pc, #72]	@ (800810c <prvHeapInit+0xb4>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2200      	movs	r2, #0
 80080c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	1ad2      	subs	r2, r2, r3
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080d8:	4b0c      	ldr	r3, [pc, #48]	@ (800810c <prvHeapInit+0xb4>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	4a0a      	ldr	r2, [pc, #40]	@ (8008110 <prvHeapInit+0xb8>)
 80080e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	4a09      	ldr	r2, [pc, #36]	@ (8008114 <prvHeapInit+0xbc>)
 80080ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080f0:	4b09      	ldr	r3, [pc, #36]	@ (8008118 <prvHeapInit+0xc0>)
 80080f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80080f6:	601a      	str	r2, [r3, #0]
}
 80080f8:	bf00      	nop
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	2000075c 	.word	0x2000075c
 8008108:	2000135c 	.word	0x2000135c
 800810c:	20001364 	.word	0x20001364
 8008110:	2000136c 	.word	0x2000136c
 8008114:	20001368 	.word	0x20001368
 8008118:	20001370 	.word	0x20001370

0800811c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008124:	4b27      	ldr	r3, [pc, #156]	@ (80081c4 <prvInsertBlockIntoFreeList+0xa8>)
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	e002      	b.n	8008130 <prvInsertBlockIntoFreeList+0x14>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	429a      	cmp	r2, r3
 8008138:	d8f7      	bhi.n	800812a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	4413      	add	r3, r2
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	429a      	cmp	r2, r3
 800814a:	d108      	bne.n	800815e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	441a      	add	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	441a      	add	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	429a      	cmp	r2, r3
 8008170:	d118      	bne.n	80081a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	4b14      	ldr	r3, [pc, #80]	@ (80081c8 <prvInsertBlockIntoFreeList+0xac>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	429a      	cmp	r2, r3
 800817c:	d00d      	beq.n	800819a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	441a      	add	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	e008      	b.n	80081ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800819a:	4b0b      	ldr	r3, [pc, #44]	@ (80081c8 <prvInsertBlockIntoFreeList+0xac>)
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	e003      	b.n	80081ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d002      	beq.n	80081ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081ba:	bf00      	nop
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	bc80      	pop	{r7}
 80081c2:	4770      	bx	lr
 80081c4:	2000135c 	.word	0x2000135c
 80081c8:	20001364 	.word	0x20001364

080081cc <__cvt>:
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d2:	461d      	mov	r5, r3
 80081d4:	bfbb      	ittet	lt
 80081d6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80081da:	461d      	movlt	r5, r3
 80081dc:	2300      	movge	r3, #0
 80081de:	232d      	movlt	r3, #45	@ 0x2d
 80081e0:	b088      	sub	sp, #32
 80081e2:	4614      	mov	r4, r2
 80081e4:	bfb8      	it	lt
 80081e6:	4614      	movlt	r4, r2
 80081e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80081ea:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80081ec:	7013      	strb	r3, [r2, #0]
 80081ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80081f4:	f023 0820 	bic.w	r8, r3, #32
 80081f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081fc:	d005      	beq.n	800820a <__cvt+0x3e>
 80081fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008202:	d100      	bne.n	8008206 <__cvt+0x3a>
 8008204:	3601      	adds	r6, #1
 8008206:	2302      	movs	r3, #2
 8008208:	e000      	b.n	800820c <__cvt+0x40>
 800820a:	2303      	movs	r3, #3
 800820c:	aa07      	add	r2, sp, #28
 800820e:	9204      	str	r2, [sp, #16]
 8008210:	aa06      	add	r2, sp, #24
 8008212:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008216:	e9cd 3600 	strd	r3, r6, [sp]
 800821a:	4622      	mov	r2, r4
 800821c:	462b      	mov	r3, r5
 800821e:	f000 fed3 	bl	8008fc8 <_dtoa_r>
 8008222:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008226:	4607      	mov	r7, r0
 8008228:	d119      	bne.n	800825e <__cvt+0x92>
 800822a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800822c:	07db      	lsls	r3, r3, #31
 800822e:	d50e      	bpl.n	800824e <__cvt+0x82>
 8008230:	eb00 0906 	add.w	r9, r0, r6
 8008234:	2200      	movs	r2, #0
 8008236:	2300      	movs	r3, #0
 8008238:	4620      	mov	r0, r4
 800823a:	4629      	mov	r1, r5
 800823c:	f7f8 fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8008240:	b108      	cbz	r0, 8008246 <__cvt+0x7a>
 8008242:	f8cd 901c 	str.w	r9, [sp, #28]
 8008246:	2230      	movs	r2, #48	@ 0x30
 8008248:	9b07      	ldr	r3, [sp, #28]
 800824a:	454b      	cmp	r3, r9
 800824c:	d31e      	bcc.n	800828c <__cvt+0xc0>
 800824e:	4638      	mov	r0, r7
 8008250:	9b07      	ldr	r3, [sp, #28]
 8008252:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008254:	1bdb      	subs	r3, r3, r7
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	b008      	add	sp, #32
 800825a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800825e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008262:	eb00 0906 	add.w	r9, r0, r6
 8008266:	d1e5      	bne.n	8008234 <__cvt+0x68>
 8008268:	7803      	ldrb	r3, [r0, #0]
 800826a:	2b30      	cmp	r3, #48	@ 0x30
 800826c:	d10a      	bne.n	8008284 <__cvt+0xb8>
 800826e:	2200      	movs	r2, #0
 8008270:	2300      	movs	r3, #0
 8008272:	4620      	mov	r0, r4
 8008274:	4629      	mov	r1, r5
 8008276:	f7f8 fb97 	bl	80009a8 <__aeabi_dcmpeq>
 800827a:	b918      	cbnz	r0, 8008284 <__cvt+0xb8>
 800827c:	f1c6 0601 	rsb	r6, r6, #1
 8008280:	f8ca 6000 	str.w	r6, [sl]
 8008284:	f8da 3000 	ldr.w	r3, [sl]
 8008288:	4499      	add	r9, r3
 800828a:	e7d3      	b.n	8008234 <__cvt+0x68>
 800828c:	1c59      	adds	r1, r3, #1
 800828e:	9107      	str	r1, [sp, #28]
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	e7d9      	b.n	8008248 <__cvt+0x7c>

08008294 <__exponent>:
 8008294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008296:	2900      	cmp	r1, #0
 8008298:	bfb6      	itet	lt
 800829a:	232d      	movlt	r3, #45	@ 0x2d
 800829c:	232b      	movge	r3, #43	@ 0x2b
 800829e:	4249      	neglt	r1, r1
 80082a0:	2909      	cmp	r1, #9
 80082a2:	7002      	strb	r2, [r0, #0]
 80082a4:	7043      	strb	r3, [r0, #1]
 80082a6:	dd29      	ble.n	80082fc <__exponent+0x68>
 80082a8:	f10d 0307 	add.w	r3, sp, #7
 80082ac:	461d      	mov	r5, r3
 80082ae:	270a      	movs	r7, #10
 80082b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80082b4:	461a      	mov	r2, r3
 80082b6:	fb07 1416 	mls	r4, r7, r6, r1
 80082ba:	3430      	adds	r4, #48	@ 0x30
 80082bc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80082c0:	460c      	mov	r4, r1
 80082c2:	2c63      	cmp	r4, #99	@ 0x63
 80082c4:	4631      	mov	r1, r6
 80082c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80082ca:	dcf1      	bgt.n	80082b0 <__exponent+0x1c>
 80082cc:	3130      	adds	r1, #48	@ 0x30
 80082ce:	1e94      	subs	r4, r2, #2
 80082d0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80082d4:	4623      	mov	r3, r4
 80082d6:	1c41      	adds	r1, r0, #1
 80082d8:	42ab      	cmp	r3, r5
 80082da:	d30a      	bcc.n	80082f2 <__exponent+0x5e>
 80082dc:	f10d 0309 	add.w	r3, sp, #9
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	42ac      	cmp	r4, r5
 80082e4:	bf88      	it	hi
 80082e6:	2300      	movhi	r3, #0
 80082e8:	3302      	adds	r3, #2
 80082ea:	4403      	add	r3, r0
 80082ec:	1a18      	subs	r0, r3, r0
 80082ee:	b003      	add	sp, #12
 80082f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80082f6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80082fa:	e7ed      	b.n	80082d8 <__exponent+0x44>
 80082fc:	2330      	movs	r3, #48	@ 0x30
 80082fe:	3130      	adds	r1, #48	@ 0x30
 8008300:	7083      	strb	r3, [r0, #2]
 8008302:	70c1      	strb	r1, [r0, #3]
 8008304:	1d03      	adds	r3, r0, #4
 8008306:	e7f1      	b.n	80082ec <__exponent+0x58>

08008308 <_printf_float>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	b091      	sub	sp, #68	@ 0x44
 800830e:	460c      	mov	r4, r1
 8008310:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008314:	4616      	mov	r6, r2
 8008316:	461f      	mov	r7, r3
 8008318:	4605      	mov	r5, r0
 800831a:	f000 fce1 	bl	8008ce0 <_localeconv_r>
 800831e:	6803      	ldr	r3, [r0, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	9308      	str	r3, [sp, #32]
 8008324:	f7f7 ff14 	bl	8000150 <strlen>
 8008328:	2300      	movs	r3, #0
 800832a:	930e      	str	r3, [sp, #56]	@ 0x38
 800832c:	f8d8 3000 	ldr.w	r3, [r8]
 8008330:	9009      	str	r0, [sp, #36]	@ 0x24
 8008332:	3307      	adds	r3, #7
 8008334:	f023 0307 	bic.w	r3, r3, #7
 8008338:	f103 0208 	add.w	r2, r3, #8
 800833c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008340:	f8d4 b000 	ldr.w	fp, [r4]
 8008344:	f8c8 2000 	str.w	r2, [r8]
 8008348:	e9d3 8900 	ldrd	r8, r9, [r3]
 800834c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008350:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008352:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008356:	f04f 32ff 	mov.w	r2, #4294967295
 800835a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800835e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008362:	4b9c      	ldr	r3, [pc, #624]	@ (80085d4 <_printf_float+0x2cc>)
 8008364:	f7f8 fb52 	bl	8000a0c <__aeabi_dcmpun>
 8008368:	bb70      	cbnz	r0, 80083c8 <_printf_float+0xc0>
 800836a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800836e:	f04f 32ff 	mov.w	r2, #4294967295
 8008372:	4b98      	ldr	r3, [pc, #608]	@ (80085d4 <_printf_float+0x2cc>)
 8008374:	f7f8 fb2c 	bl	80009d0 <__aeabi_dcmple>
 8008378:	bb30      	cbnz	r0, 80083c8 <_printf_float+0xc0>
 800837a:	2200      	movs	r2, #0
 800837c:	2300      	movs	r3, #0
 800837e:	4640      	mov	r0, r8
 8008380:	4649      	mov	r1, r9
 8008382:	f7f8 fb1b 	bl	80009bc <__aeabi_dcmplt>
 8008386:	b110      	cbz	r0, 800838e <_printf_float+0x86>
 8008388:	232d      	movs	r3, #45	@ 0x2d
 800838a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800838e:	4a92      	ldr	r2, [pc, #584]	@ (80085d8 <_printf_float+0x2d0>)
 8008390:	4b92      	ldr	r3, [pc, #584]	@ (80085dc <_printf_float+0x2d4>)
 8008392:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008396:	bf94      	ite	ls
 8008398:	4690      	movls	r8, r2
 800839a:	4698      	movhi	r8, r3
 800839c:	2303      	movs	r3, #3
 800839e:	f04f 0900 	mov.w	r9, #0
 80083a2:	6123      	str	r3, [r4, #16]
 80083a4:	f02b 0304 	bic.w	r3, fp, #4
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	4633      	mov	r3, r6
 80083ac:	4621      	mov	r1, r4
 80083ae:	4628      	mov	r0, r5
 80083b0:	9700      	str	r7, [sp, #0]
 80083b2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80083b4:	f000 f9d4 	bl	8008760 <_printf_common>
 80083b8:	3001      	adds	r0, #1
 80083ba:	f040 8090 	bne.w	80084de <_printf_float+0x1d6>
 80083be:	f04f 30ff 	mov.w	r0, #4294967295
 80083c2:	b011      	add	sp, #68	@ 0x44
 80083c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c8:	4642      	mov	r2, r8
 80083ca:	464b      	mov	r3, r9
 80083cc:	4640      	mov	r0, r8
 80083ce:	4649      	mov	r1, r9
 80083d0:	f7f8 fb1c 	bl	8000a0c <__aeabi_dcmpun>
 80083d4:	b148      	cbz	r0, 80083ea <_printf_float+0xe2>
 80083d6:	464b      	mov	r3, r9
 80083d8:	2b00      	cmp	r3, #0
 80083da:	bfb8      	it	lt
 80083dc:	232d      	movlt	r3, #45	@ 0x2d
 80083de:	4a80      	ldr	r2, [pc, #512]	@ (80085e0 <_printf_float+0x2d8>)
 80083e0:	bfb8      	it	lt
 80083e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80083e6:	4b7f      	ldr	r3, [pc, #508]	@ (80085e4 <_printf_float+0x2dc>)
 80083e8:	e7d3      	b.n	8008392 <_printf_float+0x8a>
 80083ea:	6863      	ldr	r3, [r4, #4]
 80083ec:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	d13f      	bne.n	8008474 <_printf_float+0x16c>
 80083f4:	2306      	movs	r3, #6
 80083f6:	6063      	str	r3, [r4, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80083fe:	6023      	str	r3, [r4, #0]
 8008400:	9206      	str	r2, [sp, #24]
 8008402:	aa0e      	add	r2, sp, #56	@ 0x38
 8008404:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008408:	aa0d      	add	r2, sp, #52	@ 0x34
 800840a:	9203      	str	r2, [sp, #12]
 800840c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008410:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008414:	6863      	ldr	r3, [r4, #4]
 8008416:	4642      	mov	r2, r8
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	4628      	mov	r0, r5
 800841c:	464b      	mov	r3, r9
 800841e:	910a      	str	r1, [sp, #40]	@ 0x28
 8008420:	f7ff fed4 	bl	80081cc <__cvt>
 8008424:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008426:	4680      	mov	r8, r0
 8008428:	2947      	cmp	r1, #71	@ 0x47
 800842a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800842c:	d128      	bne.n	8008480 <_printf_float+0x178>
 800842e:	1cc8      	adds	r0, r1, #3
 8008430:	db02      	blt.n	8008438 <_printf_float+0x130>
 8008432:	6863      	ldr	r3, [r4, #4]
 8008434:	4299      	cmp	r1, r3
 8008436:	dd40      	ble.n	80084ba <_printf_float+0x1b2>
 8008438:	f1aa 0a02 	sub.w	sl, sl, #2
 800843c:	fa5f fa8a 	uxtb.w	sl, sl
 8008440:	4652      	mov	r2, sl
 8008442:	3901      	subs	r1, #1
 8008444:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008448:	910d      	str	r1, [sp, #52]	@ 0x34
 800844a:	f7ff ff23 	bl	8008294 <__exponent>
 800844e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008450:	4681      	mov	r9, r0
 8008452:	1813      	adds	r3, r2, r0
 8008454:	2a01      	cmp	r2, #1
 8008456:	6123      	str	r3, [r4, #16]
 8008458:	dc02      	bgt.n	8008460 <_printf_float+0x158>
 800845a:	6822      	ldr	r2, [r4, #0]
 800845c:	07d2      	lsls	r2, r2, #31
 800845e:	d501      	bpl.n	8008464 <_printf_float+0x15c>
 8008460:	3301      	adds	r3, #1
 8008462:	6123      	str	r3, [r4, #16]
 8008464:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008468:	2b00      	cmp	r3, #0
 800846a:	d09e      	beq.n	80083aa <_printf_float+0xa2>
 800846c:	232d      	movs	r3, #45	@ 0x2d
 800846e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008472:	e79a      	b.n	80083aa <_printf_float+0xa2>
 8008474:	2947      	cmp	r1, #71	@ 0x47
 8008476:	d1bf      	bne.n	80083f8 <_printf_float+0xf0>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1bd      	bne.n	80083f8 <_printf_float+0xf0>
 800847c:	2301      	movs	r3, #1
 800847e:	e7ba      	b.n	80083f6 <_printf_float+0xee>
 8008480:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008484:	d9dc      	bls.n	8008440 <_printf_float+0x138>
 8008486:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800848a:	d118      	bne.n	80084be <_printf_float+0x1b6>
 800848c:	2900      	cmp	r1, #0
 800848e:	6863      	ldr	r3, [r4, #4]
 8008490:	dd0b      	ble.n	80084aa <_printf_float+0x1a2>
 8008492:	6121      	str	r1, [r4, #16]
 8008494:	b913      	cbnz	r3, 800849c <_printf_float+0x194>
 8008496:	6822      	ldr	r2, [r4, #0]
 8008498:	07d0      	lsls	r0, r2, #31
 800849a:	d502      	bpl.n	80084a2 <_printf_float+0x19a>
 800849c:	3301      	adds	r3, #1
 800849e:	440b      	add	r3, r1
 80084a0:	6123      	str	r3, [r4, #16]
 80084a2:	f04f 0900 	mov.w	r9, #0
 80084a6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80084a8:	e7dc      	b.n	8008464 <_printf_float+0x15c>
 80084aa:	b913      	cbnz	r3, 80084b2 <_printf_float+0x1aa>
 80084ac:	6822      	ldr	r2, [r4, #0]
 80084ae:	07d2      	lsls	r2, r2, #31
 80084b0:	d501      	bpl.n	80084b6 <_printf_float+0x1ae>
 80084b2:	3302      	adds	r3, #2
 80084b4:	e7f4      	b.n	80084a0 <_printf_float+0x198>
 80084b6:	2301      	movs	r3, #1
 80084b8:	e7f2      	b.n	80084a0 <_printf_float+0x198>
 80084ba:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80084be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084c0:	4299      	cmp	r1, r3
 80084c2:	db05      	blt.n	80084d0 <_printf_float+0x1c8>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	6121      	str	r1, [r4, #16]
 80084c8:	07d8      	lsls	r0, r3, #31
 80084ca:	d5ea      	bpl.n	80084a2 <_printf_float+0x19a>
 80084cc:	1c4b      	adds	r3, r1, #1
 80084ce:	e7e7      	b.n	80084a0 <_printf_float+0x198>
 80084d0:	2900      	cmp	r1, #0
 80084d2:	bfcc      	ite	gt
 80084d4:	2201      	movgt	r2, #1
 80084d6:	f1c1 0202 	rsble	r2, r1, #2
 80084da:	4413      	add	r3, r2
 80084dc:	e7e0      	b.n	80084a0 <_printf_float+0x198>
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	055a      	lsls	r2, r3, #21
 80084e2:	d407      	bmi.n	80084f4 <_printf_float+0x1ec>
 80084e4:	6923      	ldr	r3, [r4, #16]
 80084e6:	4642      	mov	r2, r8
 80084e8:	4631      	mov	r1, r6
 80084ea:	4628      	mov	r0, r5
 80084ec:	47b8      	blx	r7
 80084ee:	3001      	adds	r0, #1
 80084f0:	d12b      	bne.n	800854a <_printf_float+0x242>
 80084f2:	e764      	b.n	80083be <_printf_float+0xb6>
 80084f4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084f8:	f240 80dc 	bls.w	80086b4 <_printf_float+0x3ac>
 80084fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008500:	2200      	movs	r2, #0
 8008502:	2300      	movs	r3, #0
 8008504:	f7f8 fa50 	bl	80009a8 <__aeabi_dcmpeq>
 8008508:	2800      	cmp	r0, #0
 800850a:	d033      	beq.n	8008574 <_printf_float+0x26c>
 800850c:	2301      	movs	r3, #1
 800850e:	4631      	mov	r1, r6
 8008510:	4628      	mov	r0, r5
 8008512:	4a35      	ldr	r2, [pc, #212]	@ (80085e8 <_printf_float+0x2e0>)
 8008514:	47b8      	blx	r7
 8008516:	3001      	adds	r0, #1
 8008518:	f43f af51 	beq.w	80083be <_printf_float+0xb6>
 800851c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008520:	4543      	cmp	r3, r8
 8008522:	db02      	blt.n	800852a <_printf_float+0x222>
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	07d8      	lsls	r0, r3, #31
 8008528:	d50f      	bpl.n	800854a <_printf_float+0x242>
 800852a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800852e:	4631      	mov	r1, r6
 8008530:	4628      	mov	r0, r5
 8008532:	47b8      	blx	r7
 8008534:	3001      	adds	r0, #1
 8008536:	f43f af42 	beq.w	80083be <_printf_float+0xb6>
 800853a:	f04f 0900 	mov.w	r9, #0
 800853e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008542:	f104 0a1a 	add.w	sl, r4, #26
 8008546:	45c8      	cmp	r8, r9
 8008548:	dc09      	bgt.n	800855e <_printf_float+0x256>
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	079b      	lsls	r3, r3, #30
 800854e:	f100 8102 	bmi.w	8008756 <_printf_float+0x44e>
 8008552:	68e0      	ldr	r0, [r4, #12]
 8008554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008556:	4298      	cmp	r0, r3
 8008558:	bfb8      	it	lt
 800855a:	4618      	movlt	r0, r3
 800855c:	e731      	b.n	80083c2 <_printf_float+0xba>
 800855e:	2301      	movs	r3, #1
 8008560:	4652      	mov	r2, sl
 8008562:	4631      	mov	r1, r6
 8008564:	4628      	mov	r0, r5
 8008566:	47b8      	blx	r7
 8008568:	3001      	adds	r0, #1
 800856a:	f43f af28 	beq.w	80083be <_printf_float+0xb6>
 800856e:	f109 0901 	add.w	r9, r9, #1
 8008572:	e7e8      	b.n	8008546 <_printf_float+0x23e>
 8008574:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008576:	2b00      	cmp	r3, #0
 8008578:	dc38      	bgt.n	80085ec <_printf_float+0x2e4>
 800857a:	2301      	movs	r3, #1
 800857c:	4631      	mov	r1, r6
 800857e:	4628      	mov	r0, r5
 8008580:	4a19      	ldr	r2, [pc, #100]	@ (80085e8 <_printf_float+0x2e0>)
 8008582:	47b8      	blx	r7
 8008584:	3001      	adds	r0, #1
 8008586:	f43f af1a 	beq.w	80083be <_printf_float+0xb6>
 800858a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800858e:	ea59 0303 	orrs.w	r3, r9, r3
 8008592:	d102      	bne.n	800859a <_printf_float+0x292>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	07d9      	lsls	r1, r3, #31
 8008598:	d5d7      	bpl.n	800854a <_printf_float+0x242>
 800859a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	f43f af0a 	beq.w	80083be <_printf_float+0xb6>
 80085aa:	f04f 0a00 	mov.w	sl, #0
 80085ae:	f104 0b1a 	add.w	fp, r4, #26
 80085b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085b4:	425b      	negs	r3, r3
 80085b6:	4553      	cmp	r3, sl
 80085b8:	dc01      	bgt.n	80085be <_printf_float+0x2b6>
 80085ba:	464b      	mov	r3, r9
 80085bc:	e793      	b.n	80084e6 <_printf_float+0x1de>
 80085be:	2301      	movs	r3, #1
 80085c0:	465a      	mov	r2, fp
 80085c2:	4631      	mov	r1, r6
 80085c4:	4628      	mov	r0, r5
 80085c6:	47b8      	blx	r7
 80085c8:	3001      	adds	r0, #1
 80085ca:	f43f aef8 	beq.w	80083be <_printf_float+0xb6>
 80085ce:	f10a 0a01 	add.w	sl, sl, #1
 80085d2:	e7ee      	b.n	80085b2 <_printf_float+0x2aa>
 80085d4:	7fefffff 	.word	0x7fefffff
 80085d8:	0800affe 	.word	0x0800affe
 80085dc:	0800b002 	.word	0x0800b002
 80085e0:	0800b006 	.word	0x0800b006
 80085e4:	0800b00a 	.word	0x0800b00a
 80085e8:	0800b00e 	.word	0x0800b00e
 80085ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085ee:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80085f2:	4553      	cmp	r3, sl
 80085f4:	bfa8      	it	ge
 80085f6:	4653      	movge	r3, sl
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	4699      	mov	r9, r3
 80085fc:	dc36      	bgt.n	800866c <_printf_float+0x364>
 80085fe:	f04f 0b00 	mov.w	fp, #0
 8008602:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008606:	f104 021a 	add.w	r2, r4, #26
 800860a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800860c:	930a      	str	r3, [sp, #40]	@ 0x28
 800860e:	eba3 0309 	sub.w	r3, r3, r9
 8008612:	455b      	cmp	r3, fp
 8008614:	dc31      	bgt.n	800867a <_printf_float+0x372>
 8008616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008618:	459a      	cmp	sl, r3
 800861a:	dc3a      	bgt.n	8008692 <_printf_float+0x38a>
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	07da      	lsls	r2, r3, #31
 8008620:	d437      	bmi.n	8008692 <_printf_float+0x38a>
 8008622:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008624:	ebaa 0903 	sub.w	r9, sl, r3
 8008628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800862a:	ebaa 0303 	sub.w	r3, sl, r3
 800862e:	4599      	cmp	r9, r3
 8008630:	bfa8      	it	ge
 8008632:	4699      	movge	r9, r3
 8008634:	f1b9 0f00 	cmp.w	r9, #0
 8008638:	dc33      	bgt.n	80086a2 <_printf_float+0x39a>
 800863a:	f04f 0800 	mov.w	r8, #0
 800863e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008642:	f104 0b1a 	add.w	fp, r4, #26
 8008646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008648:	ebaa 0303 	sub.w	r3, sl, r3
 800864c:	eba3 0309 	sub.w	r3, r3, r9
 8008650:	4543      	cmp	r3, r8
 8008652:	f77f af7a 	ble.w	800854a <_printf_float+0x242>
 8008656:	2301      	movs	r3, #1
 8008658:	465a      	mov	r2, fp
 800865a:	4631      	mov	r1, r6
 800865c:	4628      	mov	r0, r5
 800865e:	47b8      	blx	r7
 8008660:	3001      	adds	r0, #1
 8008662:	f43f aeac 	beq.w	80083be <_printf_float+0xb6>
 8008666:	f108 0801 	add.w	r8, r8, #1
 800866a:	e7ec      	b.n	8008646 <_printf_float+0x33e>
 800866c:	4642      	mov	r2, r8
 800866e:	4631      	mov	r1, r6
 8008670:	4628      	mov	r0, r5
 8008672:	47b8      	blx	r7
 8008674:	3001      	adds	r0, #1
 8008676:	d1c2      	bne.n	80085fe <_printf_float+0x2f6>
 8008678:	e6a1      	b.n	80083be <_printf_float+0xb6>
 800867a:	2301      	movs	r3, #1
 800867c:	4631      	mov	r1, r6
 800867e:	4628      	mov	r0, r5
 8008680:	920a      	str	r2, [sp, #40]	@ 0x28
 8008682:	47b8      	blx	r7
 8008684:	3001      	adds	r0, #1
 8008686:	f43f ae9a 	beq.w	80083be <_printf_float+0xb6>
 800868a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800868c:	f10b 0b01 	add.w	fp, fp, #1
 8008690:	e7bb      	b.n	800860a <_printf_float+0x302>
 8008692:	4631      	mov	r1, r6
 8008694:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008698:	4628      	mov	r0, r5
 800869a:	47b8      	blx	r7
 800869c:	3001      	adds	r0, #1
 800869e:	d1c0      	bne.n	8008622 <_printf_float+0x31a>
 80086a0:	e68d      	b.n	80083be <_printf_float+0xb6>
 80086a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086a4:	464b      	mov	r3, r9
 80086a6:	4631      	mov	r1, r6
 80086a8:	4628      	mov	r0, r5
 80086aa:	4442      	add	r2, r8
 80086ac:	47b8      	blx	r7
 80086ae:	3001      	adds	r0, #1
 80086b0:	d1c3      	bne.n	800863a <_printf_float+0x332>
 80086b2:	e684      	b.n	80083be <_printf_float+0xb6>
 80086b4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80086b8:	f1ba 0f01 	cmp.w	sl, #1
 80086bc:	dc01      	bgt.n	80086c2 <_printf_float+0x3ba>
 80086be:	07db      	lsls	r3, r3, #31
 80086c0:	d536      	bpl.n	8008730 <_printf_float+0x428>
 80086c2:	2301      	movs	r3, #1
 80086c4:	4642      	mov	r2, r8
 80086c6:	4631      	mov	r1, r6
 80086c8:	4628      	mov	r0, r5
 80086ca:	47b8      	blx	r7
 80086cc:	3001      	adds	r0, #1
 80086ce:	f43f ae76 	beq.w	80083be <_printf_float+0xb6>
 80086d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80086d6:	4631      	mov	r1, r6
 80086d8:	4628      	mov	r0, r5
 80086da:	47b8      	blx	r7
 80086dc:	3001      	adds	r0, #1
 80086de:	f43f ae6e 	beq.w	80083be <_printf_float+0xb6>
 80086e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086e6:	2200      	movs	r2, #0
 80086e8:	2300      	movs	r3, #0
 80086ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086ee:	f7f8 f95b 	bl	80009a8 <__aeabi_dcmpeq>
 80086f2:	b9c0      	cbnz	r0, 8008726 <_printf_float+0x41e>
 80086f4:	4653      	mov	r3, sl
 80086f6:	f108 0201 	add.w	r2, r8, #1
 80086fa:	4631      	mov	r1, r6
 80086fc:	4628      	mov	r0, r5
 80086fe:	47b8      	blx	r7
 8008700:	3001      	adds	r0, #1
 8008702:	d10c      	bne.n	800871e <_printf_float+0x416>
 8008704:	e65b      	b.n	80083be <_printf_float+0xb6>
 8008706:	2301      	movs	r3, #1
 8008708:	465a      	mov	r2, fp
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	47b8      	blx	r7
 8008710:	3001      	adds	r0, #1
 8008712:	f43f ae54 	beq.w	80083be <_printf_float+0xb6>
 8008716:	f108 0801 	add.w	r8, r8, #1
 800871a:	45d0      	cmp	r8, sl
 800871c:	dbf3      	blt.n	8008706 <_printf_float+0x3fe>
 800871e:	464b      	mov	r3, r9
 8008720:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008724:	e6e0      	b.n	80084e8 <_printf_float+0x1e0>
 8008726:	f04f 0800 	mov.w	r8, #0
 800872a:	f104 0b1a 	add.w	fp, r4, #26
 800872e:	e7f4      	b.n	800871a <_printf_float+0x412>
 8008730:	2301      	movs	r3, #1
 8008732:	4642      	mov	r2, r8
 8008734:	e7e1      	b.n	80086fa <_printf_float+0x3f2>
 8008736:	2301      	movs	r3, #1
 8008738:	464a      	mov	r2, r9
 800873a:	4631      	mov	r1, r6
 800873c:	4628      	mov	r0, r5
 800873e:	47b8      	blx	r7
 8008740:	3001      	adds	r0, #1
 8008742:	f43f ae3c 	beq.w	80083be <_printf_float+0xb6>
 8008746:	f108 0801 	add.w	r8, r8, #1
 800874a:	68e3      	ldr	r3, [r4, #12]
 800874c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800874e:	1a5b      	subs	r3, r3, r1
 8008750:	4543      	cmp	r3, r8
 8008752:	dcf0      	bgt.n	8008736 <_printf_float+0x42e>
 8008754:	e6fd      	b.n	8008552 <_printf_float+0x24a>
 8008756:	f04f 0800 	mov.w	r8, #0
 800875a:	f104 0919 	add.w	r9, r4, #25
 800875e:	e7f4      	b.n	800874a <_printf_float+0x442>

08008760 <_printf_common>:
 8008760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008764:	4616      	mov	r6, r2
 8008766:	4698      	mov	r8, r3
 8008768:	688a      	ldr	r2, [r1, #8]
 800876a:	690b      	ldr	r3, [r1, #16]
 800876c:	4607      	mov	r7, r0
 800876e:	4293      	cmp	r3, r2
 8008770:	bfb8      	it	lt
 8008772:	4613      	movlt	r3, r2
 8008774:	6033      	str	r3, [r6, #0]
 8008776:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800877a:	460c      	mov	r4, r1
 800877c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008780:	b10a      	cbz	r2, 8008786 <_printf_common+0x26>
 8008782:	3301      	adds	r3, #1
 8008784:	6033      	str	r3, [r6, #0]
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	0699      	lsls	r1, r3, #26
 800878a:	bf42      	ittt	mi
 800878c:	6833      	ldrmi	r3, [r6, #0]
 800878e:	3302      	addmi	r3, #2
 8008790:	6033      	strmi	r3, [r6, #0]
 8008792:	6825      	ldr	r5, [r4, #0]
 8008794:	f015 0506 	ands.w	r5, r5, #6
 8008798:	d106      	bne.n	80087a8 <_printf_common+0x48>
 800879a:	f104 0a19 	add.w	sl, r4, #25
 800879e:	68e3      	ldr	r3, [r4, #12]
 80087a0:	6832      	ldr	r2, [r6, #0]
 80087a2:	1a9b      	subs	r3, r3, r2
 80087a4:	42ab      	cmp	r3, r5
 80087a6:	dc2b      	bgt.n	8008800 <_printf_common+0xa0>
 80087a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087ac:	6822      	ldr	r2, [r4, #0]
 80087ae:	3b00      	subs	r3, #0
 80087b0:	bf18      	it	ne
 80087b2:	2301      	movne	r3, #1
 80087b4:	0692      	lsls	r2, r2, #26
 80087b6:	d430      	bmi.n	800881a <_printf_common+0xba>
 80087b8:	4641      	mov	r1, r8
 80087ba:	4638      	mov	r0, r7
 80087bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087c0:	47c8      	blx	r9
 80087c2:	3001      	adds	r0, #1
 80087c4:	d023      	beq.n	800880e <_printf_common+0xae>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	6922      	ldr	r2, [r4, #16]
 80087ca:	f003 0306 	and.w	r3, r3, #6
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	bf14      	ite	ne
 80087d2:	2500      	movne	r5, #0
 80087d4:	6833      	ldreq	r3, [r6, #0]
 80087d6:	f04f 0600 	mov.w	r6, #0
 80087da:	bf08      	it	eq
 80087dc:	68e5      	ldreq	r5, [r4, #12]
 80087de:	f104 041a 	add.w	r4, r4, #26
 80087e2:	bf08      	it	eq
 80087e4:	1aed      	subeq	r5, r5, r3
 80087e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80087ea:	bf08      	it	eq
 80087ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087f0:	4293      	cmp	r3, r2
 80087f2:	bfc4      	itt	gt
 80087f4:	1a9b      	subgt	r3, r3, r2
 80087f6:	18ed      	addgt	r5, r5, r3
 80087f8:	42b5      	cmp	r5, r6
 80087fa:	d11a      	bne.n	8008832 <_printf_common+0xd2>
 80087fc:	2000      	movs	r0, #0
 80087fe:	e008      	b.n	8008812 <_printf_common+0xb2>
 8008800:	2301      	movs	r3, #1
 8008802:	4652      	mov	r2, sl
 8008804:	4641      	mov	r1, r8
 8008806:	4638      	mov	r0, r7
 8008808:	47c8      	blx	r9
 800880a:	3001      	adds	r0, #1
 800880c:	d103      	bne.n	8008816 <_printf_common+0xb6>
 800880e:	f04f 30ff 	mov.w	r0, #4294967295
 8008812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008816:	3501      	adds	r5, #1
 8008818:	e7c1      	b.n	800879e <_printf_common+0x3e>
 800881a:	2030      	movs	r0, #48	@ 0x30
 800881c:	18e1      	adds	r1, r4, r3
 800881e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008828:	4422      	add	r2, r4
 800882a:	3302      	adds	r3, #2
 800882c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008830:	e7c2      	b.n	80087b8 <_printf_common+0x58>
 8008832:	2301      	movs	r3, #1
 8008834:	4622      	mov	r2, r4
 8008836:	4641      	mov	r1, r8
 8008838:	4638      	mov	r0, r7
 800883a:	47c8      	blx	r9
 800883c:	3001      	adds	r0, #1
 800883e:	d0e6      	beq.n	800880e <_printf_common+0xae>
 8008840:	3601      	adds	r6, #1
 8008842:	e7d9      	b.n	80087f8 <_printf_common+0x98>

08008844 <_printf_i>:
 8008844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	7e0f      	ldrb	r7, [r1, #24]
 800884a:	4691      	mov	r9, r2
 800884c:	2f78      	cmp	r7, #120	@ 0x78
 800884e:	4680      	mov	r8, r0
 8008850:	460c      	mov	r4, r1
 8008852:	469a      	mov	sl, r3
 8008854:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008856:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800885a:	d807      	bhi.n	800886c <_printf_i+0x28>
 800885c:	2f62      	cmp	r7, #98	@ 0x62
 800885e:	d80a      	bhi.n	8008876 <_printf_i+0x32>
 8008860:	2f00      	cmp	r7, #0
 8008862:	f000 80d3 	beq.w	8008a0c <_printf_i+0x1c8>
 8008866:	2f58      	cmp	r7, #88	@ 0x58
 8008868:	f000 80ba 	beq.w	80089e0 <_printf_i+0x19c>
 800886c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008870:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008874:	e03a      	b.n	80088ec <_printf_i+0xa8>
 8008876:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800887a:	2b15      	cmp	r3, #21
 800887c:	d8f6      	bhi.n	800886c <_printf_i+0x28>
 800887e:	a101      	add	r1, pc, #4	@ (adr r1, 8008884 <_printf_i+0x40>)
 8008880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008884:	080088dd 	.word	0x080088dd
 8008888:	080088f1 	.word	0x080088f1
 800888c:	0800886d 	.word	0x0800886d
 8008890:	0800886d 	.word	0x0800886d
 8008894:	0800886d 	.word	0x0800886d
 8008898:	0800886d 	.word	0x0800886d
 800889c:	080088f1 	.word	0x080088f1
 80088a0:	0800886d 	.word	0x0800886d
 80088a4:	0800886d 	.word	0x0800886d
 80088a8:	0800886d 	.word	0x0800886d
 80088ac:	0800886d 	.word	0x0800886d
 80088b0:	080089f3 	.word	0x080089f3
 80088b4:	0800891b 	.word	0x0800891b
 80088b8:	080089ad 	.word	0x080089ad
 80088bc:	0800886d 	.word	0x0800886d
 80088c0:	0800886d 	.word	0x0800886d
 80088c4:	08008a15 	.word	0x08008a15
 80088c8:	0800886d 	.word	0x0800886d
 80088cc:	0800891b 	.word	0x0800891b
 80088d0:	0800886d 	.word	0x0800886d
 80088d4:	0800886d 	.word	0x0800886d
 80088d8:	080089b5 	.word	0x080089b5
 80088dc:	6833      	ldr	r3, [r6, #0]
 80088de:	1d1a      	adds	r2, r3, #4
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6032      	str	r2, [r6, #0]
 80088e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088ec:	2301      	movs	r3, #1
 80088ee:	e09e      	b.n	8008a2e <_printf_i+0x1ea>
 80088f0:	6833      	ldr	r3, [r6, #0]
 80088f2:	6820      	ldr	r0, [r4, #0]
 80088f4:	1d19      	adds	r1, r3, #4
 80088f6:	6031      	str	r1, [r6, #0]
 80088f8:	0606      	lsls	r6, r0, #24
 80088fa:	d501      	bpl.n	8008900 <_printf_i+0xbc>
 80088fc:	681d      	ldr	r5, [r3, #0]
 80088fe:	e003      	b.n	8008908 <_printf_i+0xc4>
 8008900:	0645      	lsls	r5, r0, #25
 8008902:	d5fb      	bpl.n	80088fc <_printf_i+0xb8>
 8008904:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008908:	2d00      	cmp	r5, #0
 800890a:	da03      	bge.n	8008914 <_printf_i+0xd0>
 800890c:	232d      	movs	r3, #45	@ 0x2d
 800890e:	426d      	negs	r5, r5
 8008910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008914:	230a      	movs	r3, #10
 8008916:	4859      	ldr	r0, [pc, #356]	@ (8008a7c <_printf_i+0x238>)
 8008918:	e011      	b.n	800893e <_printf_i+0xfa>
 800891a:	6821      	ldr	r1, [r4, #0]
 800891c:	6833      	ldr	r3, [r6, #0]
 800891e:	0608      	lsls	r0, r1, #24
 8008920:	f853 5b04 	ldr.w	r5, [r3], #4
 8008924:	d402      	bmi.n	800892c <_printf_i+0xe8>
 8008926:	0649      	lsls	r1, r1, #25
 8008928:	bf48      	it	mi
 800892a:	b2ad      	uxthmi	r5, r5
 800892c:	2f6f      	cmp	r7, #111	@ 0x6f
 800892e:	6033      	str	r3, [r6, #0]
 8008930:	bf14      	ite	ne
 8008932:	230a      	movne	r3, #10
 8008934:	2308      	moveq	r3, #8
 8008936:	4851      	ldr	r0, [pc, #324]	@ (8008a7c <_printf_i+0x238>)
 8008938:	2100      	movs	r1, #0
 800893a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800893e:	6866      	ldr	r6, [r4, #4]
 8008940:	2e00      	cmp	r6, #0
 8008942:	bfa8      	it	ge
 8008944:	6821      	ldrge	r1, [r4, #0]
 8008946:	60a6      	str	r6, [r4, #8]
 8008948:	bfa4      	itt	ge
 800894a:	f021 0104 	bicge.w	r1, r1, #4
 800894e:	6021      	strge	r1, [r4, #0]
 8008950:	b90d      	cbnz	r5, 8008956 <_printf_i+0x112>
 8008952:	2e00      	cmp	r6, #0
 8008954:	d04b      	beq.n	80089ee <_printf_i+0x1aa>
 8008956:	4616      	mov	r6, r2
 8008958:	fbb5 f1f3 	udiv	r1, r5, r3
 800895c:	fb03 5711 	mls	r7, r3, r1, r5
 8008960:	5dc7      	ldrb	r7, [r0, r7]
 8008962:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008966:	462f      	mov	r7, r5
 8008968:	42bb      	cmp	r3, r7
 800896a:	460d      	mov	r5, r1
 800896c:	d9f4      	bls.n	8008958 <_printf_i+0x114>
 800896e:	2b08      	cmp	r3, #8
 8008970:	d10b      	bne.n	800898a <_printf_i+0x146>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	07df      	lsls	r7, r3, #31
 8008976:	d508      	bpl.n	800898a <_printf_i+0x146>
 8008978:	6923      	ldr	r3, [r4, #16]
 800897a:	6861      	ldr	r1, [r4, #4]
 800897c:	4299      	cmp	r1, r3
 800897e:	bfde      	ittt	le
 8008980:	2330      	movle	r3, #48	@ 0x30
 8008982:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008986:	f106 36ff 	addle.w	r6, r6, #4294967295
 800898a:	1b92      	subs	r2, r2, r6
 800898c:	6122      	str	r2, [r4, #16]
 800898e:	464b      	mov	r3, r9
 8008990:	4621      	mov	r1, r4
 8008992:	4640      	mov	r0, r8
 8008994:	f8cd a000 	str.w	sl, [sp]
 8008998:	aa03      	add	r2, sp, #12
 800899a:	f7ff fee1 	bl	8008760 <_printf_common>
 800899e:	3001      	adds	r0, #1
 80089a0:	d14a      	bne.n	8008a38 <_printf_i+0x1f4>
 80089a2:	f04f 30ff 	mov.w	r0, #4294967295
 80089a6:	b004      	add	sp, #16
 80089a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	f043 0320 	orr.w	r3, r3, #32
 80089b2:	6023      	str	r3, [r4, #0]
 80089b4:	2778      	movs	r7, #120	@ 0x78
 80089b6:	4832      	ldr	r0, [pc, #200]	@ (8008a80 <_printf_i+0x23c>)
 80089b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	6831      	ldr	r1, [r6, #0]
 80089c0:	061f      	lsls	r7, r3, #24
 80089c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80089c6:	d402      	bmi.n	80089ce <_printf_i+0x18a>
 80089c8:	065f      	lsls	r7, r3, #25
 80089ca:	bf48      	it	mi
 80089cc:	b2ad      	uxthmi	r5, r5
 80089ce:	6031      	str	r1, [r6, #0]
 80089d0:	07d9      	lsls	r1, r3, #31
 80089d2:	bf44      	itt	mi
 80089d4:	f043 0320 	orrmi.w	r3, r3, #32
 80089d8:	6023      	strmi	r3, [r4, #0]
 80089da:	b11d      	cbz	r5, 80089e4 <_printf_i+0x1a0>
 80089dc:	2310      	movs	r3, #16
 80089de:	e7ab      	b.n	8008938 <_printf_i+0xf4>
 80089e0:	4826      	ldr	r0, [pc, #152]	@ (8008a7c <_printf_i+0x238>)
 80089e2:	e7e9      	b.n	80089b8 <_printf_i+0x174>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	f023 0320 	bic.w	r3, r3, #32
 80089ea:	6023      	str	r3, [r4, #0]
 80089ec:	e7f6      	b.n	80089dc <_printf_i+0x198>
 80089ee:	4616      	mov	r6, r2
 80089f0:	e7bd      	b.n	800896e <_printf_i+0x12a>
 80089f2:	6833      	ldr	r3, [r6, #0]
 80089f4:	6825      	ldr	r5, [r4, #0]
 80089f6:	1d18      	adds	r0, r3, #4
 80089f8:	6961      	ldr	r1, [r4, #20]
 80089fa:	6030      	str	r0, [r6, #0]
 80089fc:	062e      	lsls	r6, r5, #24
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	d501      	bpl.n	8008a06 <_printf_i+0x1c2>
 8008a02:	6019      	str	r1, [r3, #0]
 8008a04:	e002      	b.n	8008a0c <_printf_i+0x1c8>
 8008a06:	0668      	lsls	r0, r5, #25
 8008a08:	d5fb      	bpl.n	8008a02 <_printf_i+0x1be>
 8008a0a:	8019      	strh	r1, [r3, #0]
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4616      	mov	r6, r2
 8008a10:	6123      	str	r3, [r4, #16]
 8008a12:	e7bc      	b.n	800898e <_printf_i+0x14a>
 8008a14:	6833      	ldr	r3, [r6, #0]
 8008a16:	2100      	movs	r1, #0
 8008a18:	1d1a      	adds	r2, r3, #4
 8008a1a:	6032      	str	r2, [r6, #0]
 8008a1c:	681e      	ldr	r6, [r3, #0]
 8008a1e:	6862      	ldr	r2, [r4, #4]
 8008a20:	4630      	mov	r0, r6
 8008a22:	f000 fa2a 	bl	8008e7a <memchr>
 8008a26:	b108      	cbz	r0, 8008a2c <_printf_i+0x1e8>
 8008a28:	1b80      	subs	r0, r0, r6
 8008a2a:	6060      	str	r0, [r4, #4]
 8008a2c:	6863      	ldr	r3, [r4, #4]
 8008a2e:	6123      	str	r3, [r4, #16]
 8008a30:	2300      	movs	r3, #0
 8008a32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a36:	e7aa      	b.n	800898e <_printf_i+0x14a>
 8008a38:	4632      	mov	r2, r6
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	6923      	ldr	r3, [r4, #16]
 8008a40:	47d0      	blx	sl
 8008a42:	3001      	adds	r0, #1
 8008a44:	d0ad      	beq.n	80089a2 <_printf_i+0x15e>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	079b      	lsls	r3, r3, #30
 8008a4a:	d413      	bmi.n	8008a74 <_printf_i+0x230>
 8008a4c:	68e0      	ldr	r0, [r4, #12]
 8008a4e:	9b03      	ldr	r3, [sp, #12]
 8008a50:	4298      	cmp	r0, r3
 8008a52:	bfb8      	it	lt
 8008a54:	4618      	movlt	r0, r3
 8008a56:	e7a6      	b.n	80089a6 <_printf_i+0x162>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	4632      	mov	r2, r6
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	4640      	mov	r0, r8
 8008a60:	47d0      	blx	sl
 8008a62:	3001      	adds	r0, #1
 8008a64:	d09d      	beq.n	80089a2 <_printf_i+0x15e>
 8008a66:	3501      	adds	r5, #1
 8008a68:	68e3      	ldr	r3, [r4, #12]
 8008a6a:	9903      	ldr	r1, [sp, #12]
 8008a6c:	1a5b      	subs	r3, r3, r1
 8008a6e:	42ab      	cmp	r3, r5
 8008a70:	dcf2      	bgt.n	8008a58 <_printf_i+0x214>
 8008a72:	e7eb      	b.n	8008a4c <_printf_i+0x208>
 8008a74:	2500      	movs	r5, #0
 8008a76:	f104 0619 	add.w	r6, r4, #25
 8008a7a:	e7f5      	b.n	8008a68 <_printf_i+0x224>
 8008a7c:	0800b010 	.word	0x0800b010
 8008a80:	0800b021 	.word	0x0800b021

08008a84 <std>:
 8008a84:	2300      	movs	r3, #0
 8008a86:	b510      	push	{r4, lr}
 8008a88:	4604      	mov	r4, r0
 8008a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a92:	6083      	str	r3, [r0, #8]
 8008a94:	8181      	strh	r1, [r0, #12]
 8008a96:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a98:	81c2      	strh	r2, [r0, #14]
 8008a9a:	6183      	str	r3, [r0, #24]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	2208      	movs	r2, #8
 8008aa0:	305c      	adds	r0, #92	@ 0x5c
 8008aa2:	f000 f914 	bl	8008cce <memset>
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008adc <std+0x58>)
 8008aa8:	6224      	str	r4, [r4, #32]
 8008aaa:	6263      	str	r3, [r4, #36]	@ 0x24
 8008aac:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae0 <std+0x5c>)
 8008aae:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae4 <std+0x60>)
 8008ab2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae8 <std+0x64>)
 8008ab6:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8008aec <std+0x68>)
 8008aba:	429c      	cmp	r4, r3
 8008abc:	d006      	beq.n	8008acc <std+0x48>
 8008abe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ac2:	4294      	cmp	r4, r2
 8008ac4:	d002      	beq.n	8008acc <std+0x48>
 8008ac6:	33d0      	adds	r3, #208	@ 0xd0
 8008ac8:	429c      	cmp	r4, r3
 8008aca:	d105      	bne.n	8008ad8 <std+0x54>
 8008acc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad4:	f000 b9ce 	b.w	8008e74 <__retarget_lock_init_recursive>
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	bf00      	nop
 8008adc:	08008c49 	.word	0x08008c49
 8008ae0:	08008c6b 	.word	0x08008c6b
 8008ae4:	08008ca3 	.word	0x08008ca3
 8008ae8:	08008cc7 	.word	0x08008cc7
 8008aec:	20001374 	.word	0x20001374

08008af0 <stdio_exit_handler>:
 8008af0:	4a02      	ldr	r2, [pc, #8]	@ (8008afc <stdio_exit_handler+0xc>)
 8008af2:	4903      	ldr	r1, [pc, #12]	@ (8008b00 <stdio_exit_handler+0x10>)
 8008af4:	4803      	ldr	r0, [pc, #12]	@ (8008b04 <stdio_exit_handler+0x14>)
 8008af6:	f000 b869 	b.w	8008bcc <_fwalk_sglue>
 8008afa:	bf00      	nop
 8008afc:	20000024 	.word	0x20000024
 8008b00:	0800a805 	.word	0x0800a805
 8008b04:	20000034 	.word	0x20000034

08008b08 <cleanup_stdio>:
 8008b08:	6841      	ldr	r1, [r0, #4]
 8008b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b3c <cleanup_stdio+0x34>)
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	4299      	cmp	r1, r3
 8008b10:	4604      	mov	r4, r0
 8008b12:	d001      	beq.n	8008b18 <cleanup_stdio+0x10>
 8008b14:	f001 fe76 	bl	800a804 <_fflush_r>
 8008b18:	68a1      	ldr	r1, [r4, #8]
 8008b1a:	4b09      	ldr	r3, [pc, #36]	@ (8008b40 <cleanup_stdio+0x38>)
 8008b1c:	4299      	cmp	r1, r3
 8008b1e:	d002      	beq.n	8008b26 <cleanup_stdio+0x1e>
 8008b20:	4620      	mov	r0, r4
 8008b22:	f001 fe6f 	bl	800a804 <_fflush_r>
 8008b26:	68e1      	ldr	r1, [r4, #12]
 8008b28:	4b06      	ldr	r3, [pc, #24]	@ (8008b44 <cleanup_stdio+0x3c>)
 8008b2a:	4299      	cmp	r1, r3
 8008b2c:	d004      	beq.n	8008b38 <cleanup_stdio+0x30>
 8008b2e:	4620      	mov	r0, r4
 8008b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b34:	f001 be66 	b.w	800a804 <_fflush_r>
 8008b38:	bd10      	pop	{r4, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20001374 	.word	0x20001374
 8008b40:	200013dc 	.word	0x200013dc
 8008b44:	20001444 	.word	0x20001444

08008b48 <global_stdio_init.part.0>:
 8008b48:	b510      	push	{r4, lr}
 8008b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b78 <global_stdio_init.part.0+0x30>)
 8008b4c:	4c0b      	ldr	r4, [pc, #44]	@ (8008b7c <global_stdio_init.part.0+0x34>)
 8008b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b80 <global_stdio_init.part.0+0x38>)
 8008b50:	4620      	mov	r0, r4
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	2104      	movs	r1, #4
 8008b56:	2200      	movs	r2, #0
 8008b58:	f7ff ff94 	bl	8008a84 <std>
 8008b5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b60:	2201      	movs	r2, #1
 8008b62:	2109      	movs	r1, #9
 8008b64:	f7ff ff8e 	bl	8008a84 <std>
 8008b68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b72:	2112      	movs	r1, #18
 8008b74:	f7ff bf86 	b.w	8008a84 <std>
 8008b78:	200014ac 	.word	0x200014ac
 8008b7c:	20001374 	.word	0x20001374
 8008b80:	08008af1 	.word	0x08008af1

08008b84 <__sfp_lock_acquire>:
 8008b84:	4801      	ldr	r0, [pc, #4]	@ (8008b8c <__sfp_lock_acquire+0x8>)
 8008b86:	f000 b976 	b.w	8008e76 <__retarget_lock_acquire_recursive>
 8008b8a:	bf00      	nop
 8008b8c:	200014b5 	.word	0x200014b5

08008b90 <__sfp_lock_release>:
 8008b90:	4801      	ldr	r0, [pc, #4]	@ (8008b98 <__sfp_lock_release+0x8>)
 8008b92:	f000 b971 	b.w	8008e78 <__retarget_lock_release_recursive>
 8008b96:	bf00      	nop
 8008b98:	200014b5 	.word	0x200014b5

08008b9c <__sinit>:
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	f7ff fff0 	bl	8008b84 <__sfp_lock_acquire>
 8008ba4:	6a23      	ldr	r3, [r4, #32]
 8008ba6:	b11b      	cbz	r3, 8008bb0 <__sinit+0x14>
 8008ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bac:	f7ff bff0 	b.w	8008b90 <__sfp_lock_release>
 8008bb0:	4b04      	ldr	r3, [pc, #16]	@ (8008bc4 <__sinit+0x28>)
 8008bb2:	6223      	str	r3, [r4, #32]
 8008bb4:	4b04      	ldr	r3, [pc, #16]	@ (8008bc8 <__sinit+0x2c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1f5      	bne.n	8008ba8 <__sinit+0xc>
 8008bbc:	f7ff ffc4 	bl	8008b48 <global_stdio_init.part.0>
 8008bc0:	e7f2      	b.n	8008ba8 <__sinit+0xc>
 8008bc2:	bf00      	nop
 8008bc4:	08008b09 	.word	0x08008b09
 8008bc8:	200014ac 	.word	0x200014ac

08008bcc <_fwalk_sglue>:
 8008bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd0:	4607      	mov	r7, r0
 8008bd2:	4688      	mov	r8, r1
 8008bd4:	4614      	mov	r4, r2
 8008bd6:	2600      	movs	r6, #0
 8008bd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bdc:	f1b9 0901 	subs.w	r9, r9, #1
 8008be0:	d505      	bpl.n	8008bee <_fwalk_sglue+0x22>
 8008be2:	6824      	ldr	r4, [r4, #0]
 8008be4:	2c00      	cmp	r4, #0
 8008be6:	d1f7      	bne.n	8008bd8 <_fwalk_sglue+0xc>
 8008be8:	4630      	mov	r0, r6
 8008bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bee:	89ab      	ldrh	r3, [r5, #12]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d907      	bls.n	8008c04 <_fwalk_sglue+0x38>
 8008bf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	d003      	beq.n	8008c04 <_fwalk_sglue+0x38>
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4638      	mov	r0, r7
 8008c00:	47c0      	blx	r8
 8008c02:	4306      	orrs	r6, r0
 8008c04:	3568      	adds	r5, #104	@ 0x68
 8008c06:	e7e9      	b.n	8008bdc <_fwalk_sglue+0x10>

08008c08 <siprintf>:
 8008c08:	b40e      	push	{r1, r2, r3}
 8008c0a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c0e:	b500      	push	{lr}
 8008c10:	b09c      	sub	sp, #112	@ 0x70
 8008c12:	ab1d      	add	r3, sp, #116	@ 0x74
 8008c14:	9002      	str	r0, [sp, #8]
 8008c16:	9006      	str	r0, [sp, #24]
 8008c18:	9107      	str	r1, [sp, #28]
 8008c1a:	9104      	str	r1, [sp, #16]
 8008c1c:	4808      	ldr	r0, [pc, #32]	@ (8008c40 <siprintf+0x38>)
 8008c1e:	4909      	ldr	r1, [pc, #36]	@ (8008c44 <siprintf+0x3c>)
 8008c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c24:	9105      	str	r1, [sp, #20]
 8008c26:	6800      	ldr	r0, [r0, #0]
 8008c28:	a902      	add	r1, sp, #8
 8008c2a:	9301      	str	r3, [sp, #4]
 8008c2c:	f001 fc6e 	bl	800a50c <_svfiprintf_r>
 8008c30:	2200      	movs	r2, #0
 8008c32:	9b02      	ldr	r3, [sp, #8]
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	b01c      	add	sp, #112	@ 0x70
 8008c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c3c:	b003      	add	sp, #12
 8008c3e:	4770      	bx	lr
 8008c40:	20000030 	.word	0x20000030
 8008c44:	ffff0208 	.word	0xffff0208

08008c48 <__sread>:
 8008c48:	b510      	push	{r4, lr}
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c50:	f000 f8c2 	bl	8008dd8 <_read_r>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	bfab      	itete	ge
 8008c58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c5c:	181b      	addge	r3, r3, r0
 8008c5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c62:	bfac      	ite	ge
 8008c64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c66:	81a3      	strhlt	r3, [r4, #12]
 8008c68:	bd10      	pop	{r4, pc}

08008c6a <__swrite>:
 8008c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6e:	461f      	mov	r7, r3
 8008c70:	898b      	ldrh	r3, [r1, #12]
 8008c72:	4605      	mov	r5, r0
 8008c74:	05db      	lsls	r3, r3, #23
 8008c76:	460c      	mov	r4, r1
 8008c78:	4616      	mov	r6, r2
 8008c7a:	d505      	bpl.n	8008c88 <__swrite+0x1e>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c84:	f000 f896 	bl	8008db4 <_lseek_r>
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	4632      	mov	r2, r6
 8008c8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c90:	81a3      	strh	r3, [r4, #12]
 8008c92:	4628      	mov	r0, r5
 8008c94:	463b      	mov	r3, r7
 8008c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9e:	f000 b8ad 	b.w	8008dfc <_write_r>

08008ca2 <__sseek>:
 8008ca2:	b510      	push	{r4, lr}
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008caa:	f000 f883 	bl	8008db4 <_lseek_r>
 8008cae:	1c43      	adds	r3, r0, #1
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	bf15      	itete	ne
 8008cb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008cba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cbe:	81a3      	strheq	r3, [r4, #12]
 8008cc0:	bf18      	it	ne
 8008cc2:	81a3      	strhne	r3, [r4, #12]
 8008cc4:	bd10      	pop	{r4, pc}

08008cc6 <__sclose>:
 8008cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cca:	f000 b80d 	b.w	8008ce8 <_close_r>

08008cce <memset>:
 8008cce:	4603      	mov	r3, r0
 8008cd0:	4402      	add	r2, r0
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d100      	bne.n	8008cd8 <memset+0xa>
 8008cd6:	4770      	bx	lr
 8008cd8:	f803 1b01 	strb.w	r1, [r3], #1
 8008cdc:	e7f9      	b.n	8008cd2 <memset+0x4>
	...

08008ce0 <_localeconv_r>:
 8008ce0:	4800      	ldr	r0, [pc, #0]	@ (8008ce4 <_localeconv_r+0x4>)
 8008ce2:	4770      	bx	lr
 8008ce4:	20000170 	.word	0x20000170

08008ce8 <_close_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	2300      	movs	r3, #0
 8008cec:	4d05      	ldr	r5, [pc, #20]	@ (8008d04 <_close_r+0x1c>)
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	602b      	str	r3, [r5, #0]
 8008cf4:	f7f8 ff63 	bl	8001bbe <_close>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_close_r+0x1a>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_close_r+0x1a>
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	200014b0 	.word	0x200014b0

08008d08 <_reclaim_reent>:
 8008d08:	4b29      	ldr	r3, [pc, #164]	@ (8008db0 <_reclaim_reent+0xa8>)
 8008d0a:	b570      	push	{r4, r5, r6, lr}
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4604      	mov	r4, r0
 8008d10:	4283      	cmp	r3, r0
 8008d12:	d04b      	beq.n	8008dac <_reclaim_reent+0xa4>
 8008d14:	69c3      	ldr	r3, [r0, #28]
 8008d16:	b1ab      	cbz	r3, 8008d44 <_reclaim_reent+0x3c>
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	b16b      	cbz	r3, 8008d38 <_reclaim_reent+0x30>
 8008d1c:	2500      	movs	r5, #0
 8008d1e:	69e3      	ldr	r3, [r4, #28]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	5959      	ldr	r1, [r3, r5]
 8008d24:	2900      	cmp	r1, #0
 8008d26:	d13b      	bne.n	8008da0 <_reclaim_reent+0x98>
 8008d28:	3504      	adds	r5, #4
 8008d2a:	2d80      	cmp	r5, #128	@ 0x80
 8008d2c:	d1f7      	bne.n	8008d1e <_reclaim_reent+0x16>
 8008d2e:	69e3      	ldr	r3, [r4, #28]
 8008d30:	4620      	mov	r0, r4
 8008d32:	68d9      	ldr	r1, [r3, #12]
 8008d34:	f000 ff10 	bl	8009b58 <_free_r>
 8008d38:	69e3      	ldr	r3, [r4, #28]
 8008d3a:	6819      	ldr	r1, [r3, #0]
 8008d3c:	b111      	cbz	r1, 8008d44 <_reclaim_reent+0x3c>
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f000 ff0a 	bl	8009b58 <_free_r>
 8008d44:	6961      	ldr	r1, [r4, #20]
 8008d46:	b111      	cbz	r1, 8008d4e <_reclaim_reent+0x46>
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 ff05 	bl	8009b58 <_free_r>
 8008d4e:	69e1      	ldr	r1, [r4, #28]
 8008d50:	b111      	cbz	r1, 8008d58 <_reclaim_reent+0x50>
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 ff00 	bl	8009b58 <_free_r>
 8008d58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008d5a:	b111      	cbz	r1, 8008d62 <_reclaim_reent+0x5a>
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 fefb 	bl	8009b58 <_free_r>
 8008d62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d64:	b111      	cbz	r1, 8008d6c <_reclaim_reent+0x64>
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 fef6 	bl	8009b58 <_free_r>
 8008d6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008d6e:	b111      	cbz	r1, 8008d76 <_reclaim_reent+0x6e>
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 fef1 	bl	8009b58 <_free_r>
 8008d76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008d78:	b111      	cbz	r1, 8008d80 <_reclaim_reent+0x78>
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 feec 	bl	8009b58 <_free_r>
 8008d80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008d82:	b111      	cbz	r1, 8008d8a <_reclaim_reent+0x82>
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 fee7 	bl	8009b58 <_free_r>
 8008d8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008d8c:	b111      	cbz	r1, 8008d94 <_reclaim_reent+0x8c>
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 fee2 	bl	8009b58 <_free_r>
 8008d94:	6a23      	ldr	r3, [r4, #32]
 8008d96:	b14b      	cbz	r3, 8008dac <_reclaim_reent+0xa4>
 8008d98:	4620      	mov	r0, r4
 8008d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008d9e:	4718      	bx	r3
 8008da0:	680e      	ldr	r6, [r1, #0]
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 fed8 	bl	8009b58 <_free_r>
 8008da8:	4631      	mov	r1, r6
 8008daa:	e7bb      	b.n	8008d24 <_reclaim_reent+0x1c>
 8008dac:	bd70      	pop	{r4, r5, r6, pc}
 8008dae:	bf00      	nop
 8008db0:	20000030 	.word	0x20000030

08008db4 <_lseek_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4604      	mov	r4, r0
 8008db8:	4608      	mov	r0, r1
 8008dba:	4611      	mov	r1, r2
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4d05      	ldr	r5, [pc, #20]	@ (8008dd4 <_lseek_r+0x20>)
 8008dc0:	602a      	str	r2, [r5, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	f7f8 ff1f 	bl	8001c06 <_lseek>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d102      	bne.n	8008dd2 <_lseek_r+0x1e>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	b103      	cbz	r3, 8008dd2 <_lseek_r+0x1e>
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	200014b0 	.word	0x200014b0

08008dd8 <_read_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	4604      	mov	r4, r0
 8008ddc:	4608      	mov	r0, r1
 8008dde:	4611      	mov	r1, r2
 8008de0:	2200      	movs	r2, #0
 8008de2:	4d05      	ldr	r5, [pc, #20]	@ (8008df8 <_read_r+0x20>)
 8008de4:	602a      	str	r2, [r5, #0]
 8008de6:	461a      	mov	r2, r3
 8008de8:	f7f8 feb0 	bl	8001b4c <_read>
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	d102      	bne.n	8008df6 <_read_r+0x1e>
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	b103      	cbz	r3, 8008df6 <_read_r+0x1e>
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	bd38      	pop	{r3, r4, r5, pc}
 8008df8:	200014b0 	.word	0x200014b0

08008dfc <_write_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4604      	mov	r4, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	4611      	mov	r1, r2
 8008e04:	2200      	movs	r2, #0
 8008e06:	4d05      	ldr	r5, [pc, #20]	@ (8008e1c <_write_r+0x20>)
 8008e08:	602a      	str	r2, [r5, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f7f8 febb 	bl	8001b86 <_write>
 8008e10:	1c43      	adds	r3, r0, #1
 8008e12:	d102      	bne.n	8008e1a <_write_r+0x1e>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	b103      	cbz	r3, 8008e1a <_write_r+0x1e>
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	bd38      	pop	{r3, r4, r5, pc}
 8008e1c:	200014b0 	.word	0x200014b0

08008e20 <__errno>:
 8008e20:	4b01      	ldr	r3, [pc, #4]	@ (8008e28 <__errno+0x8>)
 8008e22:	6818      	ldr	r0, [r3, #0]
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	20000030 	.word	0x20000030

08008e2c <__libc_init_array>:
 8008e2c:	b570      	push	{r4, r5, r6, lr}
 8008e2e:	2600      	movs	r6, #0
 8008e30:	4d0c      	ldr	r5, [pc, #48]	@ (8008e64 <__libc_init_array+0x38>)
 8008e32:	4c0d      	ldr	r4, [pc, #52]	@ (8008e68 <__libc_init_array+0x3c>)
 8008e34:	1b64      	subs	r4, r4, r5
 8008e36:	10a4      	asrs	r4, r4, #2
 8008e38:	42a6      	cmp	r6, r4
 8008e3a:	d109      	bne.n	8008e50 <__libc_init_array+0x24>
 8008e3c:	f002 f870 	bl	800af20 <_init>
 8008e40:	2600      	movs	r6, #0
 8008e42:	4d0a      	ldr	r5, [pc, #40]	@ (8008e6c <__libc_init_array+0x40>)
 8008e44:	4c0a      	ldr	r4, [pc, #40]	@ (8008e70 <__libc_init_array+0x44>)
 8008e46:	1b64      	subs	r4, r4, r5
 8008e48:	10a4      	asrs	r4, r4, #2
 8008e4a:	42a6      	cmp	r6, r4
 8008e4c:	d105      	bne.n	8008e5a <__libc_init_array+0x2e>
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}
 8008e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e54:	4798      	blx	r3
 8008e56:	3601      	adds	r6, #1
 8008e58:	e7ee      	b.n	8008e38 <__libc_init_array+0xc>
 8008e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e5e:	4798      	blx	r3
 8008e60:	3601      	adds	r6, #1
 8008e62:	e7f2      	b.n	8008e4a <__libc_init_array+0x1e>
 8008e64:	0800b378 	.word	0x0800b378
 8008e68:	0800b378 	.word	0x0800b378
 8008e6c:	0800b378 	.word	0x0800b378
 8008e70:	0800b37c 	.word	0x0800b37c

08008e74 <__retarget_lock_init_recursive>:
 8008e74:	4770      	bx	lr

08008e76 <__retarget_lock_acquire_recursive>:
 8008e76:	4770      	bx	lr

08008e78 <__retarget_lock_release_recursive>:
 8008e78:	4770      	bx	lr

08008e7a <memchr>:
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	b510      	push	{r4, lr}
 8008e7e:	b2c9      	uxtb	r1, r1
 8008e80:	4402      	add	r2, r0
 8008e82:	4293      	cmp	r3, r2
 8008e84:	4618      	mov	r0, r3
 8008e86:	d101      	bne.n	8008e8c <memchr+0x12>
 8008e88:	2000      	movs	r0, #0
 8008e8a:	e003      	b.n	8008e94 <memchr+0x1a>
 8008e8c:	7804      	ldrb	r4, [r0, #0]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	428c      	cmp	r4, r1
 8008e92:	d1f6      	bne.n	8008e82 <memchr+0x8>
 8008e94:	bd10      	pop	{r4, pc}

08008e96 <memcpy>:
 8008e96:	440a      	add	r2, r1
 8008e98:	4291      	cmp	r1, r2
 8008e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e9e:	d100      	bne.n	8008ea2 <memcpy+0xc>
 8008ea0:	4770      	bx	lr
 8008ea2:	b510      	push	{r4, lr}
 8008ea4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ea8:	4291      	cmp	r1, r2
 8008eaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eae:	d1f9      	bne.n	8008ea4 <memcpy+0xe>
 8008eb0:	bd10      	pop	{r4, pc}

08008eb2 <quorem>:
 8008eb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb6:	6903      	ldr	r3, [r0, #16]
 8008eb8:	690c      	ldr	r4, [r1, #16]
 8008eba:	4607      	mov	r7, r0
 8008ebc:	42a3      	cmp	r3, r4
 8008ebe:	db7e      	blt.n	8008fbe <quorem+0x10c>
 8008ec0:	3c01      	subs	r4, #1
 8008ec2:	00a3      	lsls	r3, r4, #2
 8008ec4:	f100 0514 	add.w	r5, r0, #20
 8008ec8:	f101 0814 	add.w	r8, r1, #20
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ed8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008edc:	3301      	adds	r3, #1
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ee4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ee8:	d32e      	bcc.n	8008f48 <quorem+0x96>
 8008eea:	f04f 0a00 	mov.w	sl, #0
 8008eee:	46c4      	mov	ip, r8
 8008ef0:	46ae      	mov	lr, r5
 8008ef2:	46d3      	mov	fp, sl
 8008ef4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ef8:	b298      	uxth	r0, r3
 8008efa:	fb06 a000 	mla	r0, r6, r0, sl
 8008efe:	0c1b      	lsrs	r3, r3, #16
 8008f00:	0c02      	lsrs	r2, r0, #16
 8008f02:	fb06 2303 	mla	r3, r6, r3, r2
 8008f06:	f8de 2000 	ldr.w	r2, [lr]
 8008f0a:	b280      	uxth	r0, r0
 8008f0c:	b292      	uxth	r2, r2
 8008f0e:	1a12      	subs	r2, r2, r0
 8008f10:	445a      	add	r2, fp
 8008f12:	f8de 0000 	ldr.w	r0, [lr]
 8008f16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008f20:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008f24:	b292      	uxth	r2, r2
 8008f26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008f2a:	45e1      	cmp	r9, ip
 8008f2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008f30:	f84e 2b04 	str.w	r2, [lr], #4
 8008f34:	d2de      	bcs.n	8008ef4 <quorem+0x42>
 8008f36:	9b00      	ldr	r3, [sp, #0]
 8008f38:	58eb      	ldr	r3, [r5, r3]
 8008f3a:	b92b      	cbnz	r3, 8008f48 <quorem+0x96>
 8008f3c:	9b01      	ldr	r3, [sp, #4]
 8008f3e:	3b04      	subs	r3, #4
 8008f40:	429d      	cmp	r5, r3
 8008f42:	461a      	mov	r2, r3
 8008f44:	d32f      	bcc.n	8008fa6 <quorem+0xf4>
 8008f46:	613c      	str	r4, [r7, #16]
 8008f48:	4638      	mov	r0, r7
 8008f4a:	f001 f97b 	bl	800a244 <__mcmp>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	db25      	blt.n	8008f9e <quorem+0xec>
 8008f52:	4629      	mov	r1, r5
 8008f54:	2000      	movs	r0, #0
 8008f56:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f5a:	f8d1 c000 	ldr.w	ip, [r1]
 8008f5e:	fa1f fe82 	uxth.w	lr, r2
 8008f62:	fa1f f38c 	uxth.w	r3, ip
 8008f66:	eba3 030e 	sub.w	r3, r3, lr
 8008f6a:	4403      	add	r3, r0
 8008f6c:	0c12      	lsrs	r2, r2, #16
 8008f6e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008f72:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f7c:	45c1      	cmp	r9, r8
 8008f7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f82:	f841 3b04 	str.w	r3, [r1], #4
 8008f86:	d2e6      	bcs.n	8008f56 <quorem+0xa4>
 8008f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f90:	b922      	cbnz	r2, 8008f9c <quorem+0xea>
 8008f92:	3b04      	subs	r3, #4
 8008f94:	429d      	cmp	r5, r3
 8008f96:	461a      	mov	r2, r3
 8008f98:	d30b      	bcc.n	8008fb2 <quorem+0x100>
 8008f9a:	613c      	str	r4, [r7, #16]
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	b003      	add	sp, #12
 8008fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa6:	6812      	ldr	r2, [r2, #0]
 8008fa8:	3b04      	subs	r3, #4
 8008faa:	2a00      	cmp	r2, #0
 8008fac:	d1cb      	bne.n	8008f46 <quorem+0x94>
 8008fae:	3c01      	subs	r4, #1
 8008fb0:	e7c6      	b.n	8008f40 <quorem+0x8e>
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	3b04      	subs	r3, #4
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	d1ef      	bne.n	8008f9a <quorem+0xe8>
 8008fba:	3c01      	subs	r4, #1
 8008fbc:	e7ea      	b.n	8008f94 <quorem+0xe2>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	e7ee      	b.n	8008fa0 <quorem+0xee>
 8008fc2:	0000      	movs	r0, r0
 8008fc4:	0000      	movs	r0, r0
	...

08008fc8 <_dtoa_r>:
 8008fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	4614      	mov	r4, r2
 8008fce:	461d      	mov	r5, r3
 8008fd0:	69c7      	ldr	r7, [r0, #28]
 8008fd2:	b097      	sub	sp, #92	@ 0x5c
 8008fd4:	4683      	mov	fp, r0
 8008fd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008fda:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008fdc:	b97f      	cbnz	r7, 8008ffe <_dtoa_r+0x36>
 8008fde:	2010      	movs	r0, #16
 8008fe0:	f000 fe02 	bl	8009be8 <malloc>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	f8cb 001c 	str.w	r0, [fp, #28]
 8008fea:	b920      	cbnz	r0, 8008ff6 <_dtoa_r+0x2e>
 8008fec:	21ef      	movs	r1, #239	@ 0xef
 8008fee:	4ba8      	ldr	r3, [pc, #672]	@ (8009290 <_dtoa_r+0x2c8>)
 8008ff0:	48a8      	ldr	r0, [pc, #672]	@ (8009294 <_dtoa_r+0x2cc>)
 8008ff2:	f001 fc59 	bl	800a8a8 <__assert_func>
 8008ff6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ffa:	6007      	str	r7, [r0, #0]
 8008ffc:	60c7      	str	r7, [r0, #12]
 8008ffe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009002:	6819      	ldr	r1, [r3, #0]
 8009004:	b159      	cbz	r1, 800901e <_dtoa_r+0x56>
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	2301      	movs	r3, #1
 800900a:	4093      	lsls	r3, r2
 800900c:	604a      	str	r2, [r1, #4]
 800900e:	608b      	str	r3, [r1, #8]
 8009010:	4658      	mov	r0, fp
 8009012:	f000 fedf 	bl	8009dd4 <_Bfree>
 8009016:	2200      	movs	r2, #0
 8009018:	f8db 301c 	ldr.w	r3, [fp, #28]
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	1e2b      	subs	r3, r5, #0
 8009020:	bfaf      	iteee	ge
 8009022:	2300      	movge	r3, #0
 8009024:	2201      	movlt	r2, #1
 8009026:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800902a:	9303      	strlt	r3, [sp, #12]
 800902c:	bfa8      	it	ge
 800902e:	6033      	strge	r3, [r6, #0]
 8009030:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009034:	4b98      	ldr	r3, [pc, #608]	@ (8009298 <_dtoa_r+0x2d0>)
 8009036:	bfb8      	it	lt
 8009038:	6032      	strlt	r2, [r6, #0]
 800903a:	ea33 0308 	bics.w	r3, r3, r8
 800903e:	d112      	bne.n	8009066 <_dtoa_r+0x9e>
 8009040:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009044:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800904c:	4323      	orrs	r3, r4
 800904e:	f000 8550 	beq.w	8009af2 <_dtoa_r+0xb2a>
 8009052:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009054:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800929c <_dtoa_r+0x2d4>
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 8552 	beq.w	8009b02 <_dtoa_r+0xb3a>
 800905e:	f10a 0303 	add.w	r3, sl, #3
 8009062:	f000 bd4c 	b.w	8009afe <_dtoa_r+0xb36>
 8009066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800906a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800906e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009072:	2200      	movs	r2, #0
 8009074:	2300      	movs	r3, #0
 8009076:	f7f7 fc97 	bl	80009a8 <__aeabi_dcmpeq>
 800907a:	4607      	mov	r7, r0
 800907c:	b158      	cbz	r0, 8009096 <_dtoa_r+0xce>
 800907e:	2301      	movs	r3, #1
 8009080:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009086:	b113      	cbz	r3, 800908e <_dtoa_r+0xc6>
 8009088:	4b85      	ldr	r3, [pc, #532]	@ (80092a0 <_dtoa_r+0x2d8>)
 800908a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80092a4 <_dtoa_r+0x2dc>
 8009092:	f000 bd36 	b.w	8009b02 <_dtoa_r+0xb3a>
 8009096:	ab14      	add	r3, sp, #80	@ 0x50
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	ab15      	add	r3, sp, #84	@ 0x54
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	4658      	mov	r0, fp
 80090a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80090a4:	f001 f97e 	bl	800a3a4 <__d2b>
 80090a8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80090ac:	4681      	mov	r9, r0
 80090ae:	2e00      	cmp	r6, #0
 80090b0:	d077      	beq.n	80091a2 <_dtoa_r+0x1da>
 80090b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090b8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80090bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090c0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80090c4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80090c8:	9712      	str	r7, [sp, #72]	@ 0x48
 80090ca:	4619      	mov	r1, r3
 80090cc:	2200      	movs	r2, #0
 80090ce:	4b76      	ldr	r3, [pc, #472]	@ (80092a8 <_dtoa_r+0x2e0>)
 80090d0:	f7f7 f84a 	bl	8000168 <__aeabi_dsub>
 80090d4:	a368      	add	r3, pc, #416	@ (adr r3, 8009278 <_dtoa_r+0x2b0>)
 80090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090da:	f7f7 f9fd 	bl	80004d8 <__aeabi_dmul>
 80090de:	a368      	add	r3, pc, #416	@ (adr r3, 8009280 <_dtoa_r+0x2b8>)
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	f7f7 f842 	bl	800016c <__adddf3>
 80090e8:	4604      	mov	r4, r0
 80090ea:	4630      	mov	r0, r6
 80090ec:	460d      	mov	r5, r1
 80090ee:	f7f7 f989 	bl	8000404 <__aeabi_i2d>
 80090f2:	a365      	add	r3, pc, #404	@ (adr r3, 8009288 <_dtoa_r+0x2c0>)
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f7f7 f9ee 	bl	80004d8 <__aeabi_dmul>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4620      	mov	r0, r4
 8009102:	4629      	mov	r1, r5
 8009104:	f7f7 f832 	bl	800016c <__adddf3>
 8009108:	4604      	mov	r4, r0
 800910a:	460d      	mov	r5, r1
 800910c:	f7f7 fc94 	bl	8000a38 <__aeabi_d2iz>
 8009110:	2200      	movs	r2, #0
 8009112:	4607      	mov	r7, r0
 8009114:	2300      	movs	r3, #0
 8009116:	4620      	mov	r0, r4
 8009118:	4629      	mov	r1, r5
 800911a:	f7f7 fc4f 	bl	80009bc <__aeabi_dcmplt>
 800911e:	b140      	cbz	r0, 8009132 <_dtoa_r+0x16a>
 8009120:	4638      	mov	r0, r7
 8009122:	f7f7 f96f 	bl	8000404 <__aeabi_i2d>
 8009126:	4622      	mov	r2, r4
 8009128:	462b      	mov	r3, r5
 800912a:	f7f7 fc3d 	bl	80009a8 <__aeabi_dcmpeq>
 800912e:	b900      	cbnz	r0, 8009132 <_dtoa_r+0x16a>
 8009130:	3f01      	subs	r7, #1
 8009132:	2f16      	cmp	r7, #22
 8009134:	d853      	bhi.n	80091de <_dtoa_r+0x216>
 8009136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800913a:	4b5c      	ldr	r3, [pc, #368]	@ (80092ac <_dtoa_r+0x2e4>)
 800913c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 fc3a 	bl	80009bc <__aeabi_dcmplt>
 8009148:	2800      	cmp	r0, #0
 800914a:	d04a      	beq.n	80091e2 <_dtoa_r+0x21a>
 800914c:	2300      	movs	r3, #0
 800914e:	3f01      	subs	r7, #1
 8009150:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009152:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009154:	1b9b      	subs	r3, r3, r6
 8009156:	1e5a      	subs	r2, r3, #1
 8009158:	bf46      	itte	mi
 800915a:	f1c3 0801 	rsbmi	r8, r3, #1
 800915e:	2300      	movmi	r3, #0
 8009160:	f04f 0800 	movpl.w	r8, #0
 8009164:	9209      	str	r2, [sp, #36]	@ 0x24
 8009166:	bf48      	it	mi
 8009168:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800916a:	2f00      	cmp	r7, #0
 800916c:	db3b      	blt.n	80091e6 <_dtoa_r+0x21e>
 800916e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009170:	970e      	str	r7, [sp, #56]	@ 0x38
 8009172:	443b      	add	r3, r7
 8009174:	9309      	str	r3, [sp, #36]	@ 0x24
 8009176:	2300      	movs	r3, #0
 8009178:	930a      	str	r3, [sp, #40]	@ 0x28
 800917a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800917c:	2b09      	cmp	r3, #9
 800917e:	d866      	bhi.n	800924e <_dtoa_r+0x286>
 8009180:	2b05      	cmp	r3, #5
 8009182:	bfc4      	itt	gt
 8009184:	3b04      	subgt	r3, #4
 8009186:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009188:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800918a:	bfc8      	it	gt
 800918c:	2400      	movgt	r4, #0
 800918e:	f1a3 0302 	sub.w	r3, r3, #2
 8009192:	bfd8      	it	le
 8009194:	2401      	movle	r4, #1
 8009196:	2b03      	cmp	r3, #3
 8009198:	d864      	bhi.n	8009264 <_dtoa_r+0x29c>
 800919a:	e8df f003 	tbb	[pc, r3]
 800919e:	382b      	.short	0x382b
 80091a0:	5636      	.short	0x5636
 80091a2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80091a6:	441e      	add	r6, r3
 80091a8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80091ac:	2b20      	cmp	r3, #32
 80091ae:	bfc1      	itttt	gt
 80091b0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80091b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80091b8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80091bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80091c0:	bfd6      	itet	le
 80091c2:	f1c3 0320 	rsble	r3, r3, #32
 80091c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80091ca:	fa04 f003 	lslle.w	r0, r4, r3
 80091ce:	f7f7 f909 	bl	80003e4 <__aeabi_ui2d>
 80091d2:	2201      	movs	r2, #1
 80091d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80091d8:	3e01      	subs	r6, #1
 80091da:	9212      	str	r2, [sp, #72]	@ 0x48
 80091dc:	e775      	b.n	80090ca <_dtoa_r+0x102>
 80091de:	2301      	movs	r3, #1
 80091e0:	e7b6      	b.n	8009150 <_dtoa_r+0x188>
 80091e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80091e4:	e7b5      	b.n	8009152 <_dtoa_r+0x18a>
 80091e6:	427b      	negs	r3, r7
 80091e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80091ea:	2300      	movs	r3, #0
 80091ec:	eba8 0807 	sub.w	r8, r8, r7
 80091f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80091f2:	e7c2      	b.n	800917a <_dtoa_r+0x1b2>
 80091f4:	2300      	movs	r3, #0
 80091f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dc35      	bgt.n	800926a <_dtoa_r+0x2a2>
 80091fe:	2301      	movs	r3, #1
 8009200:	461a      	mov	r2, r3
 8009202:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009206:	9221      	str	r2, [sp, #132]	@ 0x84
 8009208:	e00b      	b.n	8009222 <_dtoa_r+0x25a>
 800920a:	2301      	movs	r3, #1
 800920c:	e7f3      	b.n	80091f6 <_dtoa_r+0x22e>
 800920e:	2300      	movs	r3, #0
 8009210:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009212:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009214:	18fb      	adds	r3, r7, r3
 8009216:	9308      	str	r3, [sp, #32]
 8009218:	3301      	adds	r3, #1
 800921a:	2b01      	cmp	r3, #1
 800921c:	9307      	str	r3, [sp, #28]
 800921e:	bfb8      	it	lt
 8009220:	2301      	movlt	r3, #1
 8009222:	2100      	movs	r1, #0
 8009224:	2204      	movs	r2, #4
 8009226:	f8db 001c 	ldr.w	r0, [fp, #28]
 800922a:	f102 0514 	add.w	r5, r2, #20
 800922e:	429d      	cmp	r5, r3
 8009230:	d91f      	bls.n	8009272 <_dtoa_r+0x2aa>
 8009232:	6041      	str	r1, [r0, #4]
 8009234:	4658      	mov	r0, fp
 8009236:	f000 fd8d 	bl	8009d54 <_Balloc>
 800923a:	4682      	mov	sl, r0
 800923c:	2800      	cmp	r0, #0
 800923e:	d139      	bne.n	80092b4 <_dtoa_r+0x2ec>
 8009240:	4602      	mov	r2, r0
 8009242:	f240 11af 	movw	r1, #431	@ 0x1af
 8009246:	4b1a      	ldr	r3, [pc, #104]	@ (80092b0 <_dtoa_r+0x2e8>)
 8009248:	e6d2      	b.n	8008ff0 <_dtoa_r+0x28>
 800924a:	2301      	movs	r3, #1
 800924c:	e7e0      	b.n	8009210 <_dtoa_r+0x248>
 800924e:	2401      	movs	r4, #1
 8009250:	2300      	movs	r3, #0
 8009252:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009254:	9320      	str	r3, [sp, #128]	@ 0x80
 8009256:	f04f 33ff 	mov.w	r3, #4294967295
 800925a:	2200      	movs	r2, #0
 800925c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009260:	2312      	movs	r3, #18
 8009262:	e7d0      	b.n	8009206 <_dtoa_r+0x23e>
 8009264:	2301      	movs	r3, #1
 8009266:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009268:	e7f5      	b.n	8009256 <_dtoa_r+0x28e>
 800926a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800926c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009270:	e7d7      	b.n	8009222 <_dtoa_r+0x25a>
 8009272:	3101      	adds	r1, #1
 8009274:	0052      	lsls	r2, r2, #1
 8009276:	e7d8      	b.n	800922a <_dtoa_r+0x262>
 8009278:	636f4361 	.word	0x636f4361
 800927c:	3fd287a7 	.word	0x3fd287a7
 8009280:	8b60c8b3 	.word	0x8b60c8b3
 8009284:	3fc68a28 	.word	0x3fc68a28
 8009288:	509f79fb 	.word	0x509f79fb
 800928c:	3fd34413 	.word	0x3fd34413
 8009290:	0800b03f 	.word	0x0800b03f
 8009294:	0800b056 	.word	0x0800b056
 8009298:	7ff00000 	.word	0x7ff00000
 800929c:	0800b03b 	.word	0x0800b03b
 80092a0:	0800b00f 	.word	0x0800b00f
 80092a4:	0800b00e 	.word	0x0800b00e
 80092a8:	3ff80000 	.word	0x3ff80000
 80092ac:	0800b150 	.word	0x0800b150
 80092b0:	0800b0ae 	.word	0x0800b0ae
 80092b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80092b8:	6018      	str	r0, [r3, #0]
 80092ba:	9b07      	ldr	r3, [sp, #28]
 80092bc:	2b0e      	cmp	r3, #14
 80092be:	f200 80a4 	bhi.w	800940a <_dtoa_r+0x442>
 80092c2:	2c00      	cmp	r4, #0
 80092c4:	f000 80a1 	beq.w	800940a <_dtoa_r+0x442>
 80092c8:	2f00      	cmp	r7, #0
 80092ca:	dd33      	ble.n	8009334 <_dtoa_r+0x36c>
 80092cc:	4b86      	ldr	r3, [pc, #536]	@ (80094e8 <_dtoa_r+0x520>)
 80092ce:	f007 020f 	and.w	r2, r7, #15
 80092d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092d6:	05f8      	lsls	r0, r7, #23
 80092d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80092dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80092e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80092e4:	d516      	bpl.n	8009314 <_dtoa_r+0x34c>
 80092e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092ea:	4b80      	ldr	r3, [pc, #512]	@ (80094ec <_dtoa_r+0x524>)
 80092ec:	2603      	movs	r6, #3
 80092ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092f2:	f7f7 fa1b 	bl	800072c <__aeabi_ddiv>
 80092f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092fa:	f004 040f 	and.w	r4, r4, #15
 80092fe:	4d7b      	ldr	r5, [pc, #492]	@ (80094ec <_dtoa_r+0x524>)
 8009300:	b954      	cbnz	r4, 8009318 <_dtoa_r+0x350>
 8009302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800930a:	f7f7 fa0f 	bl	800072c <__aeabi_ddiv>
 800930e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009312:	e028      	b.n	8009366 <_dtoa_r+0x39e>
 8009314:	2602      	movs	r6, #2
 8009316:	e7f2      	b.n	80092fe <_dtoa_r+0x336>
 8009318:	07e1      	lsls	r1, r4, #31
 800931a:	d508      	bpl.n	800932e <_dtoa_r+0x366>
 800931c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009320:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009324:	f7f7 f8d8 	bl	80004d8 <__aeabi_dmul>
 8009328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800932c:	3601      	adds	r6, #1
 800932e:	1064      	asrs	r4, r4, #1
 8009330:	3508      	adds	r5, #8
 8009332:	e7e5      	b.n	8009300 <_dtoa_r+0x338>
 8009334:	f000 80d2 	beq.w	80094dc <_dtoa_r+0x514>
 8009338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800933c:	427c      	negs	r4, r7
 800933e:	4b6a      	ldr	r3, [pc, #424]	@ (80094e8 <_dtoa_r+0x520>)
 8009340:	f004 020f 	and.w	r2, r4, #15
 8009344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	f7f7 f8c4 	bl	80004d8 <__aeabi_dmul>
 8009350:	2602      	movs	r6, #2
 8009352:	2300      	movs	r3, #0
 8009354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009358:	4d64      	ldr	r5, [pc, #400]	@ (80094ec <_dtoa_r+0x524>)
 800935a:	1124      	asrs	r4, r4, #4
 800935c:	2c00      	cmp	r4, #0
 800935e:	f040 80b2 	bne.w	80094c6 <_dtoa_r+0x4fe>
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1d3      	bne.n	800930e <_dtoa_r+0x346>
 8009366:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800936a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 80b7 	beq.w	80094e0 <_dtoa_r+0x518>
 8009372:	2200      	movs	r2, #0
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	4b5d      	ldr	r3, [pc, #372]	@ (80094f0 <_dtoa_r+0x528>)
 800937a:	f7f7 fb1f 	bl	80009bc <__aeabi_dcmplt>
 800937e:	2800      	cmp	r0, #0
 8009380:	f000 80ae 	beq.w	80094e0 <_dtoa_r+0x518>
 8009384:	9b07      	ldr	r3, [sp, #28]
 8009386:	2b00      	cmp	r3, #0
 8009388:	f000 80aa 	beq.w	80094e0 <_dtoa_r+0x518>
 800938c:	9b08      	ldr	r3, [sp, #32]
 800938e:	2b00      	cmp	r3, #0
 8009390:	dd37      	ble.n	8009402 <_dtoa_r+0x43a>
 8009392:	1e7b      	subs	r3, r7, #1
 8009394:	4620      	mov	r0, r4
 8009396:	9304      	str	r3, [sp, #16]
 8009398:	2200      	movs	r2, #0
 800939a:	4629      	mov	r1, r5
 800939c:	4b55      	ldr	r3, [pc, #340]	@ (80094f4 <_dtoa_r+0x52c>)
 800939e:	f7f7 f89b 	bl	80004d8 <__aeabi_dmul>
 80093a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093a6:	9c08      	ldr	r4, [sp, #32]
 80093a8:	3601      	adds	r6, #1
 80093aa:	4630      	mov	r0, r6
 80093ac:	f7f7 f82a 	bl	8000404 <__aeabi_i2d>
 80093b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093b4:	f7f7 f890 	bl	80004d8 <__aeabi_dmul>
 80093b8:	2200      	movs	r2, #0
 80093ba:	4b4f      	ldr	r3, [pc, #316]	@ (80094f8 <_dtoa_r+0x530>)
 80093bc:	f7f6 fed6 	bl	800016c <__adddf3>
 80093c0:	4605      	mov	r5, r0
 80093c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80093c6:	2c00      	cmp	r4, #0
 80093c8:	f040 809a 	bne.w	8009500 <_dtoa_r+0x538>
 80093cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093d0:	2200      	movs	r2, #0
 80093d2:	4b4a      	ldr	r3, [pc, #296]	@ (80094fc <_dtoa_r+0x534>)
 80093d4:	f7f6 fec8 	bl	8000168 <__aeabi_dsub>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093e0:	462a      	mov	r2, r5
 80093e2:	4633      	mov	r3, r6
 80093e4:	f7f7 fb08 	bl	80009f8 <__aeabi_dcmpgt>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	f040 828e 	bne.w	800990a <_dtoa_r+0x942>
 80093ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093f2:	462a      	mov	r2, r5
 80093f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80093f8:	f7f7 fae0 	bl	80009bc <__aeabi_dcmplt>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	f040 8127 	bne.w	8009650 <_dtoa_r+0x688>
 8009402:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009406:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800940a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800940c:	2b00      	cmp	r3, #0
 800940e:	f2c0 8163 	blt.w	80096d8 <_dtoa_r+0x710>
 8009412:	2f0e      	cmp	r7, #14
 8009414:	f300 8160 	bgt.w	80096d8 <_dtoa_r+0x710>
 8009418:	4b33      	ldr	r3, [pc, #204]	@ (80094e8 <_dtoa_r+0x520>)
 800941a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800941e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009422:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009426:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009428:	2b00      	cmp	r3, #0
 800942a:	da03      	bge.n	8009434 <_dtoa_r+0x46c>
 800942c:	9b07      	ldr	r3, [sp, #28]
 800942e:	2b00      	cmp	r3, #0
 8009430:	f340 8100 	ble.w	8009634 <_dtoa_r+0x66c>
 8009434:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009438:	4656      	mov	r6, sl
 800943a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800943e:	4620      	mov	r0, r4
 8009440:	4629      	mov	r1, r5
 8009442:	f7f7 f973 	bl	800072c <__aeabi_ddiv>
 8009446:	f7f7 faf7 	bl	8000a38 <__aeabi_d2iz>
 800944a:	4680      	mov	r8, r0
 800944c:	f7f6 ffda 	bl	8000404 <__aeabi_i2d>
 8009450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009454:	f7f7 f840 	bl	80004d8 <__aeabi_dmul>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	4620      	mov	r0, r4
 800945e:	4629      	mov	r1, r5
 8009460:	f7f6 fe82 	bl	8000168 <__aeabi_dsub>
 8009464:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009468:	9d07      	ldr	r5, [sp, #28]
 800946a:	f806 4b01 	strb.w	r4, [r6], #1
 800946e:	eba6 040a 	sub.w	r4, r6, sl
 8009472:	42a5      	cmp	r5, r4
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	f040 8116 	bne.w	80096a8 <_dtoa_r+0x6e0>
 800947c:	f7f6 fe76 	bl	800016c <__adddf3>
 8009480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009484:	4604      	mov	r4, r0
 8009486:	460d      	mov	r5, r1
 8009488:	f7f7 fab6 	bl	80009f8 <__aeabi_dcmpgt>
 800948c:	2800      	cmp	r0, #0
 800948e:	f040 80f8 	bne.w	8009682 <_dtoa_r+0x6ba>
 8009492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009496:	4620      	mov	r0, r4
 8009498:	4629      	mov	r1, r5
 800949a:	f7f7 fa85 	bl	80009a8 <__aeabi_dcmpeq>
 800949e:	b118      	cbz	r0, 80094a8 <_dtoa_r+0x4e0>
 80094a0:	f018 0f01 	tst.w	r8, #1
 80094a4:	f040 80ed 	bne.w	8009682 <_dtoa_r+0x6ba>
 80094a8:	4649      	mov	r1, r9
 80094aa:	4658      	mov	r0, fp
 80094ac:	f000 fc92 	bl	8009dd4 <_Bfree>
 80094b0:	2300      	movs	r3, #0
 80094b2:	7033      	strb	r3, [r6, #0]
 80094b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80094b6:	3701      	adds	r7, #1
 80094b8:	601f      	str	r7, [r3, #0]
 80094ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 8320 	beq.w	8009b02 <_dtoa_r+0xb3a>
 80094c2:	601e      	str	r6, [r3, #0]
 80094c4:	e31d      	b.n	8009b02 <_dtoa_r+0xb3a>
 80094c6:	07e2      	lsls	r2, r4, #31
 80094c8:	d505      	bpl.n	80094d6 <_dtoa_r+0x50e>
 80094ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094ce:	f7f7 f803 	bl	80004d8 <__aeabi_dmul>
 80094d2:	2301      	movs	r3, #1
 80094d4:	3601      	adds	r6, #1
 80094d6:	1064      	asrs	r4, r4, #1
 80094d8:	3508      	adds	r5, #8
 80094da:	e73f      	b.n	800935c <_dtoa_r+0x394>
 80094dc:	2602      	movs	r6, #2
 80094de:	e742      	b.n	8009366 <_dtoa_r+0x39e>
 80094e0:	9c07      	ldr	r4, [sp, #28]
 80094e2:	9704      	str	r7, [sp, #16]
 80094e4:	e761      	b.n	80093aa <_dtoa_r+0x3e2>
 80094e6:	bf00      	nop
 80094e8:	0800b150 	.word	0x0800b150
 80094ec:	0800b128 	.word	0x0800b128
 80094f0:	3ff00000 	.word	0x3ff00000
 80094f4:	40240000 	.word	0x40240000
 80094f8:	401c0000 	.word	0x401c0000
 80094fc:	40140000 	.word	0x40140000
 8009500:	4b70      	ldr	r3, [pc, #448]	@ (80096c4 <_dtoa_r+0x6fc>)
 8009502:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009504:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009508:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800950c:	4454      	add	r4, sl
 800950e:	2900      	cmp	r1, #0
 8009510:	d045      	beq.n	800959e <_dtoa_r+0x5d6>
 8009512:	2000      	movs	r0, #0
 8009514:	496c      	ldr	r1, [pc, #432]	@ (80096c8 <_dtoa_r+0x700>)
 8009516:	f7f7 f909 	bl	800072c <__aeabi_ddiv>
 800951a:	4633      	mov	r3, r6
 800951c:	462a      	mov	r2, r5
 800951e:	f7f6 fe23 	bl	8000168 <__aeabi_dsub>
 8009522:	4656      	mov	r6, sl
 8009524:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800952c:	f7f7 fa84 	bl	8000a38 <__aeabi_d2iz>
 8009530:	4605      	mov	r5, r0
 8009532:	f7f6 ff67 	bl	8000404 <__aeabi_i2d>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800953e:	f7f6 fe13 	bl	8000168 <__aeabi_dsub>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	3530      	adds	r5, #48	@ 0x30
 8009548:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800954c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009550:	f806 5b01 	strb.w	r5, [r6], #1
 8009554:	f7f7 fa32 	bl	80009bc <__aeabi_dcmplt>
 8009558:	2800      	cmp	r0, #0
 800955a:	d163      	bne.n	8009624 <_dtoa_r+0x65c>
 800955c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009560:	2000      	movs	r0, #0
 8009562:	495a      	ldr	r1, [pc, #360]	@ (80096cc <_dtoa_r+0x704>)
 8009564:	f7f6 fe00 	bl	8000168 <__aeabi_dsub>
 8009568:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800956c:	f7f7 fa26 	bl	80009bc <__aeabi_dcmplt>
 8009570:	2800      	cmp	r0, #0
 8009572:	f040 8087 	bne.w	8009684 <_dtoa_r+0x6bc>
 8009576:	42a6      	cmp	r6, r4
 8009578:	f43f af43 	beq.w	8009402 <_dtoa_r+0x43a>
 800957c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009580:	2200      	movs	r2, #0
 8009582:	4b53      	ldr	r3, [pc, #332]	@ (80096d0 <_dtoa_r+0x708>)
 8009584:	f7f6 ffa8 	bl	80004d8 <__aeabi_dmul>
 8009588:	2200      	movs	r2, #0
 800958a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800958e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009592:	4b4f      	ldr	r3, [pc, #316]	@ (80096d0 <_dtoa_r+0x708>)
 8009594:	f7f6 ffa0 	bl	80004d8 <__aeabi_dmul>
 8009598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800959c:	e7c4      	b.n	8009528 <_dtoa_r+0x560>
 800959e:	4631      	mov	r1, r6
 80095a0:	4628      	mov	r0, r5
 80095a2:	f7f6 ff99 	bl	80004d8 <__aeabi_dmul>
 80095a6:	4656      	mov	r6, sl
 80095a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80095ac:	9413      	str	r4, [sp, #76]	@ 0x4c
 80095ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095b2:	f7f7 fa41 	bl	8000a38 <__aeabi_d2iz>
 80095b6:	4605      	mov	r5, r0
 80095b8:	f7f6 ff24 	bl	8000404 <__aeabi_i2d>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095c4:	f7f6 fdd0 	bl	8000168 <__aeabi_dsub>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	3530      	adds	r5, #48	@ 0x30
 80095ce:	f806 5b01 	strb.w	r5, [r6], #1
 80095d2:	42a6      	cmp	r6, r4
 80095d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095d8:	f04f 0200 	mov.w	r2, #0
 80095dc:	d124      	bne.n	8009628 <_dtoa_r+0x660>
 80095de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80095e2:	4b39      	ldr	r3, [pc, #228]	@ (80096c8 <_dtoa_r+0x700>)
 80095e4:	f7f6 fdc2 	bl	800016c <__adddf3>
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095f0:	f7f7 fa02 	bl	80009f8 <__aeabi_dcmpgt>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d145      	bne.n	8009684 <_dtoa_r+0x6bc>
 80095f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095fc:	2000      	movs	r0, #0
 80095fe:	4932      	ldr	r1, [pc, #200]	@ (80096c8 <_dtoa_r+0x700>)
 8009600:	f7f6 fdb2 	bl	8000168 <__aeabi_dsub>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800960c:	f7f7 f9d6 	bl	80009bc <__aeabi_dcmplt>
 8009610:	2800      	cmp	r0, #0
 8009612:	f43f aef6 	beq.w	8009402 <_dtoa_r+0x43a>
 8009616:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009618:	1e73      	subs	r3, r6, #1
 800961a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800961c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009620:	2b30      	cmp	r3, #48	@ 0x30
 8009622:	d0f8      	beq.n	8009616 <_dtoa_r+0x64e>
 8009624:	9f04      	ldr	r7, [sp, #16]
 8009626:	e73f      	b.n	80094a8 <_dtoa_r+0x4e0>
 8009628:	4b29      	ldr	r3, [pc, #164]	@ (80096d0 <_dtoa_r+0x708>)
 800962a:	f7f6 ff55 	bl	80004d8 <__aeabi_dmul>
 800962e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009632:	e7bc      	b.n	80095ae <_dtoa_r+0x5e6>
 8009634:	d10c      	bne.n	8009650 <_dtoa_r+0x688>
 8009636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800963a:	2200      	movs	r2, #0
 800963c:	4b25      	ldr	r3, [pc, #148]	@ (80096d4 <_dtoa_r+0x70c>)
 800963e:	f7f6 ff4b 	bl	80004d8 <__aeabi_dmul>
 8009642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009646:	f7f7 f9cd 	bl	80009e4 <__aeabi_dcmpge>
 800964a:	2800      	cmp	r0, #0
 800964c:	f000 815b 	beq.w	8009906 <_dtoa_r+0x93e>
 8009650:	2400      	movs	r4, #0
 8009652:	4625      	mov	r5, r4
 8009654:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009656:	4656      	mov	r6, sl
 8009658:	43db      	mvns	r3, r3
 800965a:	9304      	str	r3, [sp, #16]
 800965c:	2700      	movs	r7, #0
 800965e:	4621      	mov	r1, r4
 8009660:	4658      	mov	r0, fp
 8009662:	f000 fbb7 	bl	8009dd4 <_Bfree>
 8009666:	2d00      	cmp	r5, #0
 8009668:	d0dc      	beq.n	8009624 <_dtoa_r+0x65c>
 800966a:	b12f      	cbz	r7, 8009678 <_dtoa_r+0x6b0>
 800966c:	42af      	cmp	r7, r5
 800966e:	d003      	beq.n	8009678 <_dtoa_r+0x6b0>
 8009670:	4639      	mov	r1, r7
 8009672:	4658      	mov	r0, fp
 8009674:	f000 fbae 	bl	8009dd4 <_Bfree>
 8009678:	4629      	mov	r1, r5
 800967a:	4658      	mov	r0, fp
 800967c:	f000 fbaa 	bl	8009dd4 <_Bfree>
 8009680:	e7d0      	b.n	8009624 <_dtoa_r+0x65c>
 8009682:	9704      	str	r7, [sp, #16]
 8009684:	4633      	mov	r3, r6
 8009686:	461e      	mov	r6, r3
 8009688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800968c:	2a39      	cmp	r2, #57	@ 0x39
 800968e:	d107      	bne.n	80096a0 <_dtoa_r+0x6d8>
 8009690:	459a      	cmp	sl, r3
 8009692:	d1f8      	bne.n	8009686 <_dtoa_r+0x6be>
 8009694:	9a04      	ldr	r2, [sp, #16]
 8009696:	3201      	adds	r2, #1
 8009698:	9204      	str	r2, [sp, #16]
 800969a:	2230      	movs	r2, #48	@ 0x30
 800969c:	f88a 2000 	strb.w	r2, [sl]
 80096a0:	781a      	ldrb	r2, [r3, #0]
 80096a2:	3201      	adds	r2, #1
 80096a4:	701a      	strb	r2, [r3, #0]
 80096a6:	e7bd      	b.n	8009624 <_dtoa_r+0x65c>
 80096a8:	2200      	movs	r2, #0
 80096aa:	4b09      	ldr	r3, [pc, #36]	@ (80096d0 <_dtoa_r+0x708>)
 80096ac:	f7f6 ff14 	bl	80004d8 <__aeabi_dmul>
 80096b0:	2200      	movs	r2, #0
 80096b2:	2300      	movs	r3, #0
 80096b4:	4604      	mov	r4, r0
 80096b6:	460d      	mov	r5, r1
 80096b8:	f7f7 f976 	bl	80009a8 <__aeabi_dcmpeq>
 80096bc:	2800      	cmp	r0, #0
 80096be:	f43f aebc 	beq.w	800943a <_dtoa_r+0x472>
 80096c2:	e6f1      	b.n	80094a8 <_dtoa_r+0x4e0>
 80096c4:	0800b150 	.word	0x0800b150
 80096c8:	3fe00000 	.word	0x3fe00000
 80096cc:	3ff00000 	.word	0x3ff00000
 80096d0:	40240000 	.word	0x40240000
 80096d4:	40140000 	.word	0x40140000
 80096d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80096da:	2a00      	cmp	r2, #0
 80096dc:	f000 80db 	beq.w	8009896 <_dtoa_r+0x8ce>
 80096e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80096e2:	2a01      	cmp	r2, #1
 80096e4:	f300 80bf 	bgt.w	8009866 <_dtoa_r+0x89e>
 80096e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80096ea:	2a00      	cmp	r2, #0
 80096ec:	f000 80b7 	beq.w	800985e <_dtoa_r+0x896>
 80096f0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80096f4:	4646      	mov	r6, r8
 80096f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80096f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096fa:	2101      	movs	r1, #1
 80096fc:	441a      	add	r2, r3
 80096fe:	4658      	mov	r0, fp
 8009700:	4498      	add	r8, r3
 8009702:	9209      	str	r2, [sp, #36]	@ 0x24
 8009704:	f000 fc1a 	bl	8009f3c <__i2b>
 8009708:	4605      	mov	r5, r0
 800970a:	b15e      	cbz	r6, 8009724 <_dtoa_r+0x75c>
 800970c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800970e:	2b00      	cmp	r3, #0
 8009710:	dd08      	ble.n	8009724 <_dtoa_r+0x75c>
 8009712:	42b3      	cmp	r3, r6
 8009714:	bfa8      	it	ge
 8009716:	4633      	movge	r3, r6
 8009718:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800971a:	eba8 0803 	sub.w	r8, r8, r3
 800971e:	1af6      	subs	r6, r6, r3
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	9309      	str	r3, [sp, #36]	@ 0x24
 8009724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009726:	b1f3      	cbz	r3, 8009766 <_dtoa_r+0x79e>
 8009728:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 80b7 	beq.w	800989e <_dtoa_r+0x8d6>
 8009730:	b18c      	cbz	r4, 8009756 <_dtoa_r+0x78e>
 8009732:	4629      	mov	r1, r5
 8009734:	4622      	mov	r2, r4
 8009736:	4658      	mov	r0, fp
 8009738:	f000 fcbe 	bl	800a0b8 <__pow5mult>
 800973c:	464a      	mov	r2, r9
 800973e:	4601      	mov	r1, r0
 8009740:	4605      	mov	r5, r0
 8009742:	4658      	mov	r0, fp
 8009744:	f000 fc10 	bl	8009f68 <__multiply>
 8009748:	4649      	mov	r1, r9
 800974a:	9004      	str	r0, [sp, #16]
 800974c:	4658      	mov	r0, fp
 800974e:	f000 fb41 	bl	8009dd4 <_Bfree>
 8009752:	9b04      	ldr	r3, [sp, #16]
 8009754:	4699      	mov	r9, r3
 8009756:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009758:	1b1a      	subs	r2, r3, r4
 800975a:	d004      	beq.n	8009766 <_dtoa_r+0x79e>
 800975c:	4649      	mov	r1, r9
 800975e:	4658      	mov	r0, fp
 8009760:	f000 fcaa 	bl	800a0b8 <__pow5mult>
 8009764:	4681      	mov	r9, r0
 8009766:	2101      	movs	r1, #1
 8009768:	4658      	mov	r0, fp
 800976a:	f000 fbe7 	bl	8009f3c <__i2b>
 800976e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009770:	4604      	mov	r4, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 81c9 	beq.w	8009b0a <_dtoa_r+0xb42>
 8009778:	461a      	mov	r2, r3
 800977a:	4601      	mov	r1, r0
 800977c:	4658      	mov	r0, fp
 800977e:	f000 fc9b 	bl	800a0b8 <__pow5mult>
 8009782:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009784:	4604      	mov	r4, r0
 8009786:	2b01      	cmp	r3, #1
 8009788:	f300 808f 	bgt.w	80098aa <_dtoa_r+0x8e2>
 800978c:	9b02      	ldr	r3, [sp, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	f040 8087 	bne.w	80098a2 <_dtoa_r+0x8da>
 8009794:	9b03      	ldr	r3, [sp, #12]
 8009796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800979a:	2b00      	cmp	r3, #0
 800979c:	f040 8083 	bne.w	80098a6 <_dtoa_r+0x8de>
 80097a0:	9b03      	ldr	r3, [sp, #12]
 80097a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097a6:	0d1b      	lsrs	r3, r3, #20
 80097a8:	051b      	lsls	r3, r3, #20
 80097aa:	b12b      	cbz	r3, 80097b8 <_dtoa_r+0x7f0>
 80097ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ae:	f108 0801 	add.w	r8, r8, #1
 80097b2:	3301      	adds	r3, #1
 80097b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097b6:	2301      	movs	r3, #1
 80097b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80097ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 81aa 	beq.w	8009b16 <_dtoa_r+0xb4e>
 80097c2:	6923      	ldr	r3, [r4, #16]
 80097c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097c8:	6918      	ldr	r0, [r3, #16]
 80097ca:	f000 fb6b 	bl	8009ea4 <__hi0bits>
 80097ce:	f1c0 0020 	rsb	r0, r0, #32
 80097d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d4:	4418      	add	r0, r3
 80097d6:	f010 001f 	ands.w	r0, r0, #31
 80097da:	d071      	beq.n	80098c0 <_dtoa_r+0x8f8>
 80097dc:	f1c0 0320 	rsb	r3, r0, #32
 80097e0:	2b04      	cmp	r3, #4
 80097e2:	dd65      	ble.n	80098b0 <_dtoa_r+0x8e8>
 80097e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e6:	f1c0 001c 	rsb	r0, r0, #28
 80097ea:	4403      	add	r3, r0
 80097ec:	4480      	add	r8, r0
 80097ee:	4406      	add	r6, r0
 80097f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80097f2:	f1b8 0f00 	cmp.w	r8, #0
 80097f6:	dd05      	ble.n	8009804 <_dtoa_r+0x83c>
 80097f8:	4649      	mov	r1, r9
 80097fa:	4642      	mov	r2, r8
 80097fc:	4658      	mov	r0, fp
 80097fe:	f000 fcb5 	bl	800a16c <__lshift>
 8009802:	4681      	mov	r9, r0
 8009804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009806:	2b00      	cmp	r3, #0
 8009808:	dd05      	ble.n	8009816 <_dtoa_r+0x84e>
 800980a:	4621      	mov	r1, r4
 800980c:	461a      	mov	r2, r3
 800980e:	4658      	mov	r0, fp
 8009810:	f000 fcac 	bl	800a16c <__lshift>
 8009814:	4604      	mov	r4, r0
 8009816:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009818:	2b00      	cmp	r3, #0
 800981a:	d053      	beq.n	80098c4 <_dtoa_r+0x8fc>
 800981c:	4621      	mov	r1, r4
 800981e:	4648      	mov	r0, r9
 8009820:	f000 fd10 	bl	800a244 <__mcmp>
 8009824:	2800      	cmp	r0, #0
 8009826:	da4d      	bge.n	80098c4 <_dtoa_r+0x8fc>
 8009828:	1e7b      	subs	r3, r7, #1
 800982a:	4649      	mov	r1, r9
 800982c:	9304      	str	r3, [sp, #16]
 800982e:	220a      	movs	r2, #10
 8009830:	2300      	movs	r3, #0
 8009832:	4658      	mov	r0, fp
 8009834:	f000 faf0 	bl	8009e18 <__multadd>
 8009838:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800983a:	4681      	mov	r9, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 816c 	beq.w	8009b1a <_dtoa_r+0xb52>
 8009842:	2300      	movs	r3, #0
 8009844:	4629      	mov	r1, r5
 8009846:	220a      	movs	r2, #10
 8009848:	4658      	mov	r0, fp
 800984a:	f000 fae5 	bl	8009e18 <__multadd>
 800984e:	9b08      	ldr	r3, [sp, #32]
 8009850:	4605      	mov	r5, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	dc61      	bgt.n	800991a <_dtoa_r+0x952>
 8009856:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009858:	2b02      	cmp	r3, #2
 800985a:	dc3b      	bgt.n	80098d4 <_dtoa_r+0x90c>
 800985c:	e05d      	b.n	800991a <_dtoa_r+0x952>
 800985e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009860:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009864:	e746      	b.n	80096f4 <_dtoa_r+0x72c>
 8009866:	9b07      	ldr	r3, [sp, #28]
 8009868:	1e5c      	subs	r4, r3, #1
 800986a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800986c:	42a3      	cmp	r3, r4
 800986e:	bfbf      	itttt	lt
 8009870:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009872:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009874:	1ae3      	sublt	r3, r4, r3
 8009876:	18d2      	addlt	r2, r2, r3
 8009878:	bfa8      	it	ge
 800987a:	1b1c      	subge	r4, r3, r4
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	bfbe      	ittt	lt
 8009880:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009882:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009884:	2400      	movlt	r4, #0
 8009886:	2b00      	cmp	r3, #0
 8009888:	bfb5      	itete	lt
 800988a:	eba8 0603 	sublt.w	r6, r8, r3
 800988e:	4646      	movge	r6, r8
 8009890:	2300      	movlt	r3, #0
 8009892:	9b07      	ldrge	r3, [sp, #28]
 8009894:	e730      	b.n	80096f8 <_dtoa_r+0x730>
 8009896:	4646      	mov	r6, r8
 8009898:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800989a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800989c:	e735      	b.n	800970a <_dtoa_r+0x742>
 800989e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098a0:	e75c      	b.n	800975c <_dtoa_r+0x794>
 80098a2:	2300      	movs	r3, #0
 80098a4:	e788      	b.n	80097b8 <_dtoa_r+0x7f0>
 80098a6:	9b02      	ldr	r3, [sp, #8]
 80098a8:	e786      	b.n	80097b8 <_dtoa_r+0x7f0>
 80098aa:	2300      	movs	r3, #0
 80098ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80098ae:	e788      	b.n	80097c2 <_dtoa_r+0x7fa>
 80098b0:	d09f      	beq.n	80097f2 <_dtoa_r+0x82a>
 80098b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098b4:	331c      	adds	r3, #28
 80098b6:	441a      	add	r2, r3
 80098b8:	4498      	add	r8, r3
 80098ba:	441e      	add	r6, r3
 80098bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80098be:	e798      	b.n	80097f2 <_dtoa_r+0x82a>
 80098c0:	4603      	mov	r3, r0
 80098c2:	e7f6      	b.n	80098b2 <_dtoa_r+0x8ea>
 80098c4:	9b07      	ldr	r3, [sp, #28]
 80098c6:	9704      	str	r7, [sp, #16]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dc20      	bgt.n	800990e <_dtoa_r+0x946>
 80098cc:	9308      	str	r3, [sp, #32]
 80098ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	dd1e      	ble.n	8009912 <_dtoa_r+0x94a>
 80098d4:	9b08      	ldr	r3, [sp, #32]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f47f aebc 	bne.w	8009654 <_dtoa_r+0x68c>
 80098dc:	4621      	mov	r1, r4
 80098de:	2205      	movs	r2, #5
 80098e0:	4658      	mov	r0, fp
 80098e2:	f000 fa99 	bl	8009e18 <__multadd>
 80098e6:	4601      	mov	r1, r0
 80098e8:	4604      	mov	r4, r0
 80098ea:	4648      	mov	r0, r9
 80098ec:	f000 fcaa 	bl	800a244 <__mcmp>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	f77f aeaf 	ble.w	8009654 <_dtoa_r+0x68c>
 80098f6:	2331      	movs	r3, #49	@ 0x31
 80098f8:	4656      	mov	r6, sl
 80098fa:	f806 3b01 	strb.w	r3, [r6], #1
 80098fe:	9b04      	ldr	r3, [sp, #16]
 8009900:	3301      	adds	r3, #1
 8009902:	9304      	str	r3, [sp, #16]
 8009904:	e6aa      	b.n	800965c <_dtoa_r+0x694>
 8009906:	9c07      	ldr	r4, [sp, #28]
 8009908:	9704      	str	r7, [sp, #16]
 800990a:	4625      	mov	r5, r4
 800990c:	e7f3      	b.n	80098f6 <_dtoa_r+0x92e>
 800990e:	9b07      	ldr	r3, [sp, #28]
 8009910:	9308      	str	r3, [sp, #32]
 8009912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 8104 	beq.w	8009b22 <_dtoa_r+0xb5a>
 800991a:	2e00      	cmp	r6, #0
 800991c:	dd05      	ble.n	800992a <_dtoa_r+0x962>
 800991e:	4629      	mov	r1, r5
 8009920:	4632      	mov	r2, r6
 8009922:	4658      	mov	r0, fp
 8009924:	f000 fc22 	bl	800a16c <__lshift>
 8009928:	4605      	mov	r5, r0
 800992a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800992c:	2b00      	cmp	r3, #0
 800992e:	d05a      	beq.n	80099e6 <_dtoa_r+0xa1e>
 8009930:	4658      	mov	r0, fp
 8009932:	6869      	ldr	r1, [r5, #4]
 8009934:	f000 fa0e 	bl	8009d54 <_Balloc>
 8009938:	4606      	mov	r6, r0
 800993a:	b928      	cbnz	r0, 8009948 <_dtoa_r+0x980>
 800993c:	4602      	mov	r2, r0
 800993e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009942:	4b83      	ldr	r3, [pc, #524]	@ (8009b50 <_dtoa_r+0xb88>)
 8009944:	f7ff bb54 	b.w	8008ff0 <_dtoa_r+0x28>
 8009948:	692a      	ldr	r2, [r5, #16]
 800994a:	f105 010c 	add.w	r1, r5, #12
 800994e:	3202      	adds	r2, #2
 8009950:	0092      	lsls	r2, r2, #2
 8009952:	300c      	adds	r0, #12
 8009954:	f7ff fa9f 	bl	8008e96 <memcpy>
 8009958:	2201      	movs	r2, #1
 800995a:	4631      	mov	r1, r6
 800995c:	4658      	mov	r0, fp
 800995e:	f000 fc05 	bl	800a16c <__lshift>
 8009962:	462f      	mov	r7, r5
 8009964:	4605      	mov	r5, r0
 8009966:	f10a 0301 	add.w	r3, sl, #1
 800996a:	9307      	str	r3, [sp, #28]
 800996c:	9b08      	ldr	r3, [sp, #32]
 800996e:	4453      	add	r3, sl
 8009970:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009972:	9b02      	ldr	r3, [sp, #8]
 8009974:	f003 0301 	and.w	r3, r3, #1
 8009978:	930a      	str	r3, [sp, #40]	@ 0x28
 800997a:	9b07      	ldr	r3, [sp, #28]
 800997c:	4621      	mov	r1, r4
 800997e:	3b01      	subs	r3, #1
 8009980:	4648      	mov	r0, r9
 8009982:	9302      	str	r3, [sp, #8]
 8009984:	f7ff fa95 	bl	8008eb2 <quorem>
 8009988:	4639      	mov	r1, r7
 800998a:	9008      	str	r0, [sp, #32]
 800998c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009990:	4648      	mov	r0, r9
 8009992:	f000 fc57 	bl	800a244 <__mcmp>
 8009996:	462a      	mov	r2, r5
 8009998:	9009      	str	r0, [sp, #36]	@ 0x24
 800999a:	4621      	mov	r1, r4
 800999c:	4658      	mov	r0, fp
 800999e:	f000 fc6d 	bl	800a27c <__mdiff>
 80099a2:	68c2      	ldr	r2, [r0, #12]
 80099a4:	4606      	mov	r6, r0
 80099a6:	bb02      	cbnz	r2, 80099ea <_dtoa_r+0xa22>
 80099a8:	4601      	mov	r1, r0
 80099aa:	4648      	mov	r0, r9
 80099ac:	f000 fc4a 	bl	800a244 <__mcmp>
 80099b0:	4602      	mov	r2, r0
 80099b2:	4631      	mov	r1, r6
 80099b4:	4658      	mov	r0, fp
 80099b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80099b8:	f000 fa0c 	bl	8009dd4 <_Bfree>
 80099bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80099be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80099c0:	9e07      	ldr	r6, [sp, #28]
 80099c2:	ea43 0102 	orr.w	r1, r3, r2
 80099c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099c8:	4319      	orrs	r1, r3
 80099ca:	d110      	bne.n	80099ee <_dtoa_r+0xa26>
 80099cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099d0:	d029      	beq.n	8009a26 <_dtoa_r+0xa5e>
 80099d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	dd02      	ble.n	80099de <_dtoa_r+0xa16>
 80099d8:	9b08      	ldr	r3, [sp, #32]
 80099da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80099de:	9b02      	ldr	r3, [sp, #8]
 80099e0:	f883 8000 	strb.w	r8, [r3]
 80099e4:	e63b      	b.n	800965e <_dtoa_r+0x696>
 80099e6:	4628      	mov	r0, r5
 80099e8:	e7bb      	b.n	8009962 <_dtoa_r+0x99a>
 80099ea:	2201      	movs	r2, #1
 80099ec:	e7e1      	b.n	80099b2 <_dtoa_r+0x9ea>
 80099ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	db04      	blt.n	80099fe <_dtoa_r+0xa36>
 80099f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80099f6:	430b      	orrs	r3, r1
 80099f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099fa:	430b      	orrs	r3, r1
 80099fc:	d120      	bne.n	8009a40 <_dtoa_r+0xa78>
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	dded      	ble.n	80099de <_dtoa_r+0xa16>
 8009a02:	4649      	mov	r1, r9
 8009a04:	2201      	movs	r2, #1
 8009a06:	4658      	mov	r0, fp
 8009a08:	f000 fbb0 	bl	800a16c <__lshift>
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	4681      	mov	r9, r0
 8009a10:	f000 fc18 	bl	800a244 <__mcmp>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	dc03      	bgt.n	8009a20 <_dtoa_r+0xa58>
 8009a18:	d1e1      	bne.n	80099de <_dtoa_r+0xa16>
 8009a1a:	f018 0f01 	tst.w	r8, #1
 8009a1e:	d0de      	beq.n	80099de <_dtoa_r+0xa16>
 8009a20:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a24:	d1d8      	bne.n	80099d8 <_dtoa_r+0xa10>
 8009a26:	2339      	movs	r3, #57	@ 0x39
 8009a28:	9a02      	ldr	r2, [sp, #8]
 8009a2a:	7013      	strb	r3, [r2, #0]
 8009a2c:	4633      	mov	r3, r6
 8009a2e:	461e      	mov	r6, r3
 8009a30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	2a39      	cmp	r2, #57	@ 0x39
 8009a38:	d052      	beq.n	8009ae0 <_dtoa_r+0xb18>
 8009a3a:	3201      	adds	r2, #1
 8009a3c:	701a      	strb	r2, [r3, #0]
 8009a3e:	e60e      	b.n	800965e <_dtoa_r+0x696>
 8009a40:	2a00      	cmp	r2, #0
 8009a42:	dd07      	ble.n	8009a54 <_dtoa_r+0xa8c>
 8009a44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a48:	d0ed      	beq.n	8009a26 <_dtoa_r+0xa5e>
 8009a4a:	9a02      	ldr	r2, [sp, #8]
 8009a4c:	f108 0301 	add.w	r3, r8, #1
 8009a50:	7013      	strb	r3, [r2, #0]
 8009a52:	e604      	b.n	800965e <_dtoa_r+0x696>
 8009a54:	9b07      	ldr	r3, [sp, #28]
 8009a56:	9a07      	ldr	r2, [sp, #28]
 8009a58:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009a5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d028      	beq.n	8009ab4 <_dtoa_r+0xaec>
 8009a62:	4649      	mov	r1, r9
 8009a64:	2300      	movs	r3, #0
 8009a66:	220a      	movs	r2, #10
 8009a68:	4658      	mov	r0, fp
 8009a6a:	f000 f9d5 	bl	8009e18 <__multadd>
 8009a6e:	42af      	cmp	r7, r5
 8009a70:	4681      	mov	r9, r0
 8009a72:	f04f 0300 	mov.w	r3, #0
 8009a76:	f04f 020a 	mov.w	r2, #10
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	4658      	mov	r0, fp
 8009a7e:	d107      	bne.n	8009a90 <_dtoa_r+0xac8>
 8009a80:	f000 f9ca 	bl	8009e18 <__multadd>
 8009a84:	4607      	mov	r7, r0
 8009a86:	4605      	mov	r5, r0
 8009a88:	9b07      	ldr	r3, [sp, #28]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	9307      	str	r3, [sp, #28]
 8009a8e:	e774      	b.n	800997a <_dtoa_r+0x9b2>
 8009a90:	f000 f9c2 	bl	8009e18 <__multadd>
 8009a94:	4629      	mov	r1, r5
 8009a96:	4607      	mov	r7, r0
 8009a98:	2300      	movs	r3, #0
 8009a9a:	220a      	movs	r2, #10
 8009a9c:	4658      	mov	r0, fp
 8009a9e:	f000 f9bb 	bl	8009e18 <__multadd>
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	e7f0      	b.n	8009a88 <_dtoa_r+0xac0>
 8009aa6:	9b08      	ldr	r3, [sp, #32]
 8009aa8:	2700      	movs	r7, #0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	bfcc      	ite	gt
 8009aae:	461e      	movgt	r6, r3
 8009ab0:	2601      	movle	r6, #1
 8009ab2:	4456      	add	r6, sl
 8009ab4:	4649      	mov	r1, r9
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	4658      	mov	r0, fp
 8009aba:	f000 fb57 	bl	800a16c <__lshift>
 8009abe:	4621      	mov	r1, r4
 8009ac0:	4681      	mov	r9, r0
 8009ac2:	f000 fbbf 	bl	800a244 <__mcmp>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	dcb0      	bgt.n	8009a2c <_dtoa_r+0xa64>
 8009aca:	d102      	bne.n	8009ad2 <_dtoa_r+0xb0a>
 8009acc:	f018 0f01 	tst.w	r8, #1
 8009ad0:	d1ac      	bne.n	8009a2c <_dtoa_r+0xa64>
 8009ad2:	4633      	mov	r3, r6
 8009ad4:	461e      	mov	r6, r3
 8009ad6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ada:	2a30      	cmp	r2, #48	@ 0x30
 8009adc:	d0fa      	beq.n	8009ad4 <_dtoa_r+0xb0c>
 8009ade:	e5be      	b.n	800965e <_dtoa_r+0x696>
 8009ae0:	459a      	cmp	sl, r3
 8009ae2:	d1a4      	bne.n	8009a2e <_dtoa_r+0xa66>
 8009ae4:	9b04      	ldr	r3, [sp, #16]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	2331      	movs	r3, #49	@ 0x31
 8009aec:	f88a 3000 	strb.w	r3, [sl]
 8009af0:	e5b5      	b.n	800965e <_dtoa_r+0x696>
 8009af2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009af4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009b54 <_dtoa_r+0xb8c>
 8009af8:	b11b      	cbz	r3, 8009b02 <_dtoa_r+0xb3a>
 8009afa:	f10a 0308 	add.w	r3, sl, #8
 8009afe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	4650      	mov	r0, sl
 8009b04:	b017      	add	sp, #92	@ 0x5c
 8009b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	f77f ae3d 	ble.w	800978c <_dtoa_r+0x7c4>
 8009b12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b14:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b16:	2001      	movs	r0, #1
 8009b18:	e65b      	b.n	80097d2 <_dtoa_r+0x80a>
 8009b1a:	9b08      	ldr	r3, [sp, #32]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f77f aed6 	ble.w	80098ce <_dtoa_r+0x906>
 8009b22:	4656      	mov	r6, sl
 8009b24:	4621      	mov	r1, r4
 8009b26:	4648      	mov	r0, r9
 8009b28:	f7ff f9c3 	bl	8008eb2 <quorem>
 8009b2c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b30:	9b08      	ldr	r3, [sp, #32]
 8009b32:	f806 8b01 	strb.w	r8, [r6], #1
 8009b36:	eba6 020a 	sub.w	r2, r6, sl
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	ddb3      	ble.n	8009aa6 <_dtoa_r+0xade>
 8009b3e:	4649      	mov	r1, r9
 8009b40:	2300      	movs	r3, #0
 8009b42:	220a      	movs	r2, #10
 8009b44:	4658      	mov	r0, fp
 8009b46:	f000 f967 	bl	8009e18 <__multadd>
 8009b4a:	4681      	mov	r9, r0
 8009b4c:	e7ea      	b.n	8009b24 <_dtoa_r+0xb5c>
 8009b4e:	bf00      	nop
 8009b50:	0800b0ae 	.word	0x0800b0ae
 8009b54:	0800b032 	.word	0x0800b032

08009b58 <_free_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	2900      	cmp	r1, #0
 8009b5e:	d040      	beq.n	8009be2 <_free_r+0x8a>
 8009b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b64:	1f0c      	subs	r4, r1, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bfb8      	it	lt
 8009b6a:	18e4      	addlt	r4, r4, r3
 8009b6c:	f000 f8e6 	bl	8009d3c <__malloc_lock>
 8009b70:	4a1c      	ldr	r2, [pc, #112]	@ (8009be4 <_free_r+0x8c>)
 8009b72:	6813      	ldr	r3, [r2, #0]
 8009b74:	b933      	cbnz	r3, 8009b84 <_free_r+0x2c>
 8009b76:	6063      	str	r3, [r4, #4]
 8009b78:	6014      	str	r4, [r2, #0]
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b80:	f000 b8e2 	b.w	8009d48 <__malloc_unlock>
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	d908      	bls.n	8009b9a <_free_r+0x42>
 8009b88:	6820      	ldr	r0, [r4, #0]
 8009b8a:	1821      	adds	r1, r4, r0
 8009b8c:	428b      	cmp	r3, r1
 8009b8e:	bf01      	itttt	eq
 8009b90:	6819      	ldreq	r1, [r3, #0]
 8009b92:	685b      	ldreq	r3, [r3, #4]
 8009b94:	1809      	addeq	r1, r1, r0
 8009b96:	6021      	streq	r1, [r4, #0]
 8009b98:	e7ed      	b.n	8009b76 <_free_r+0x1e>
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	b10b      	cbz	r3, 8009ba4 <_free_r+0x4c>
 8009ba0:	42a3      	cmp	r3, r4
 8009ba2:	d9fa      	bls.n	8009b9a <_free_r+0x42>
 8009ba4:	6811      	ldr	r1, [r2, #0]
 8009ba6:	1850      	adds	r0, r2, r1
 8009ba8:	42a0      	cmp	r0, r4
 8009baa:	d10b      	bne.n	8009bc4 <_free_r+0x6c>
 8009bac:	6820      	ldr	r0, [r4, #0]
 8009bae:	4401      	add	r1, r0
 8009bb0:	1850      	adds	r0, r2, r1
 8009bb2:	4283      	cmp	r3, r0
 8009bb4:	6011      	str	r1, [r2, #0]
 8009bb6:	d1e0      	bne.n	8009b7a <_free_r+0x22>
 8009bb8:	6818      	ldr	r0, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	4408      	add	r0, r1
 8009bbe:	6010      	str	r0, [r2, #0]
 8009bc0:	6053      	str	r3, [r2, #4]
 8009bc2:	e7da      	b.n	8009b7a <_free_r+0x22>
 8009bc4:	d902      	bls.n	8009bcc <_free_r+0x74>
 8009bc6:	230c      	movs	r3, #12
 8009bc8:	602b      	str	r3, [r5, #0]
 8009bca:	e7d6      	b.n	8009b7a <_free_r+0x22>
 8009bcc:	6820      	ldr	r0, [r4, #0]
 8009bce:	1821      	adds	r1, r4, r0
 8009bd0:	428b      	cmp	r3, r1
 8009bd2:	bf01      	itttt	eq
 8009bd4:	6819      	ldreq	r1, [r3, #0]
 8009bd6:	685b      	ldreq	r3, [r3, #4]
 8009bd8:	1809      	addeq	r1, r1, r0
 8009bda:	6021      	streq	r1, [r4, #0]
 8009bdc:	6063      	str	r3, [r4, #4]
 8009bde:	6054      	str	r4, [r2, #4]
 8009be0:	e7cb      	b.n	8009b7a <_free_r+0x22>
 8009be2:	bd38      	pop	{r3, r4, r5, pc}
 8009be4:	200014bc 	.word	0x200014bc

08009be8 <malloc>:
 8009be8:	4b02      	ldr	r3, [pc, #8]	@ (8009bf4 <malloc+0xc>)
 8009bea:	4601      	mov	r1, r0
 8009bec:	6818      	ldr	r0, [r3, #0]
 8009bee:	f000 b825 	b.w	8009c3c <_malloc_r>
 8009bf2:	bf00      	nop
 8009bf4:	20000030 	.word	0x20000030

08009bf8 <sbrk_aligned>:
 8009bf8:	b570      	push	{r4, r5, r6, lr}
 8009bfa:	4e0f      	ldr	r6, [pc, #60]	@ (8009c38 <sbrk_aligned+0x40>)
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	6831      	ldr	r1, [r6, #0]
 8009c00:	4605      	mov	r5, r0
 8009c02:	b911      	cbnz	r1, 8009c0a <sbrk_aligned+0x12>
 8009c04:	f000 fe40 	bl	800a888 <_sbrk_r>
 8009c08:	6030      	str	r0, [r6, #0]
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	f000 fe3b 	bl	800a888 <_sbrk_r>
 8009c12:	1c43      	adds	r3, r0, #1
 8009c14:	d103      	bne.n	8009c1e <sbrk_aligned+0x26>
 8009c16:	f04f 34ff 	mov.w	r4, #4294967295
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	bd70      	pop	{r4, r5, r6, pc}
 8009c1e:	1cc4      	adds	r4, r0, #3
 8009c20:	f024 0403 	bic.w	r4, r4, #3
 8009c24:	42a0      	cmp	r0, r4
 8009c26:	d0f8      	beq.n	8009c1a <sbrk_aligned+0x22>
 8009c28:	1a21      	subs	r1, r4, r0
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f000 fe2c 	bl	800a888 <_sbrk_r>
 8009c30:	3001      	adds	r0, #1
 8009c32:	d1f2      	bne.n	8009c1a <sbrk_aligned+0x22>
 8009c34:	e7ef      	b.n	8009c16 <sbrk_aligned+0x1e>
 8009c36:	bf00      	nop
 8009c38:	200014b8 	.word	0x200014b8

08009c3c <_malloc_r>:
 8009c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c40:	1ccd      	adds	r5, r1, #3
 8009c42:	f025 0503 	bic.w	r5, r5, #3
 8009c46:	3508      	adds	r5, #8
 8009c48:	2d0c      	cmp	r5, #12
 8009c4a:	bf38      	it	cc
 8009c4c:	250c      	movcc	r5, #12
 8009c4e:	2d00      	cmp	r5, #0
 8009c50:	4606      	mov	r6, r0
 8009c52:	db01      	blt.n	8009c58 <_malloc_r+0x1c>
 8009c54:	42a9      	cmp	r1, r5
 8009c56:	d904      	bls.n	8009c62 <_malloc_r+0x26>
 8009c58:	230c      	movs	r3, #12
 8009c5a:	6033      	str	r3, [r6, #0]
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d38 <_malloc_r+0xfc>
 8009c66:	f000 f869 	bl	8009d3c <__malloc_lock>
 8009c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8009c6e:	461c      	mov	r4, r3
 8009c70:	bb44      	cbnz	r4, 8009cc4 <_malloc_r+0x88>
 8009c72:	4629      	mov	r1, r5
 8009c74:	4630      	mov	r0, r6
 8009c76:	f7ff ffbf 	bl	8009bf8 <sbrk_aligned>
 8009c7a:	1c43      	adds	r3, r0, #1
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	d158      	bne.n	8009d32 <_malloc_r+0xf6>
 8009c80:	f8d8 4000 	ldr.w	r4, [r8]
 8009c84:	4627      	mov	r7, r4
 8009c86:	2f00      	cmp	r7, #0
 8009c88:	d143      	bne.n	8009d12 <_malloc_r+0xd6>
 8009c8a:	2c00      	cmp	r4, #0
 8009c8c:	d04b      	beq.n	8009d26 <_malloc_r+0xea>
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	4639      	mov	r1, r7
 8009c92:	4630      	mov	r0, r6
 8009c94:	eb04 0903 	add.w	r9, r4, r3
 8009c98:	f000 fdf6 	bl	800a888 <_sbrk_r>
 8009c9c:	4581      	cmp	r9, r0
 8009c9e:	d142      	bne.n	8009d26 <_malloc_r+0xea>
 8009ca0:	6821      	ldr	r1, [r4, #0]
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	1a6d      	subs	r5, r5, r1
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	f7ff ffa6 	bl	8009bf8 <sbrk_aligned>
 8009cac:	3001      	adds	r0, #1
 8009cae:	d03a      	beq.n	8009d26 <_malloc_r+0xea>
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	442b      	add	r3, r5
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	bb62      	cbnz	r2, 8009d18 <_malloc_r+0xdc>
 8009cbe:	f8c8 7000 	str.w	r7, [r8]
 8009cc2:	e00f      	b.n	8009ce4 <_malloc_r+0xa8>
 8009cc4:	6822      	ldr	r2, [r4, #0]
 8009cc6:	1b52      	subs	r2, r2, r5
 8009cc8:	d420      	bmi.n	8009d0c <_malloc_r+0xd0>
 8009cca:	2a0b      	cmp	r2, #11
 8009ccc:	d917      	bls.n	8009cfe <_malloc_r+0xc2>
 8009cce:	1961      	adds	r1, r4, r5
 8009cd0:	42a3      	cmp	r3, r4
 8009cd2:	6025      	str	r5, [r4, #0]
 8009cd4:	bf18      	it	ne
 8009cd6:	6059      	strne	r1, [r3, #4]
 8009cd8:	6863      	ldr	r3, [r4, #4]
 8009cda:	bf08      	it	eq
 8009cdc:	f8c8 1000 	streq.w	r1, [r8]
 8009ce0:	5162      	str	r2, [r4, r5]
 8009ce2:	604b      	str	r3, [r1, #4]
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f000 f82f 	bl	8009d48 <__malloc_unlock>
 8009cea:	f104 000b 	add.w	r0, r4, #11
 8009cee:	1d23      	adds	r3, r4, #4
 8009cf0:	f020 0007 	bic.w	r0, r0, #7
 8009cf4:	1ac2      	subs	r2, r0, r3
 8009cf6:	bf1c      	itt	ne
 8009cf8:	1a1b      	subne	r3, r3, r0
 8009cfa:	50a3      	strne	r3, [r4, r2]
 8009cfc:	e7af      	b.n	8009c5e <_malloc_r+0x22>
 8009cfe:	6862      	ldr	r2, [r4, #4]
 8009d00:	42a3      	cmp	r3, r4
 8009d02:	bf0c      	ite	eq
 8009d04:	f8c8 2000 	streq.w	r2, [r8]
 8009d08:	605a      	strne	r2, [r3, #4]
 8009d0a:	e7eb      	b.n	8009ce4 <_malloc_r+0xa8>
 8009d0c:	4623      	mov	r3, r4
 8009d0e:	6864      	ldr	r4, [r4, #4]
 8009d10:	e7ae      	b.n	8009c70 <_malloc_r+0x34>
 8009d12:	463c      	mov	r4, r7
 8009d14:	687f      	ldr	r7, [r7, #4]
 8009d16:	e7b6      	b.n	8009c86 <_malloc_r+0x4a>
 8009d18:	461a      	mov	r2, r3
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	42a3      	cmp	r3, r4
 8009d1e:	d1fb      	bne.n	8009d18 <_malloc_r+0xdc>
 8009d20:	2300      	movs	r3, #0
 8009d22:	6053      	str	r3, [r2, #4]
 8009d24:	e7de      	b.n	8009ce4 <_malloc_r+0xa8>
 8009d26:	230c      	movs	r3, #12
 8009d28:	4630      	mov	r0, r6
 8009d2a:	6033      	str	r3, [r6, #0]
 8009d2c:	f000 f80c 	bl	8009d48 <__malloc_unlock>
 8009d30:	e794      	b.n	8009c5c <_malloc_r+0x20>
 8009d32:	6005      	str	r5, [r0, #0]
 8009d34:	e7d6      	b.n	8009ce4 <_malloc_r+0xa8>
 8009d36:	bf00      	nop
 8009d38:	200014bc 	.word	0x200014bc

08009d3c <__malloc_lock>:
 8009d3c:	4801      	ldr	r0, [pc, #4]	@ (8009d44 <__malloc_lock+0x8>)
 8009d3e:	f7ff b89a 	b.w	8008e76 <__retarget_lock_acquire_recursive>
 8009d42:	bf00      	nop
 8009d44:	200014b4 	.word	0x200014b4

08009d48 <__malloc_unlock>:
 8009d48:	4801      	ldr	r0, [pc, #4]	@ (8009d50 <__malloc_unlock+0x8>)
 8009d4a:	f7ff b895 	b.w	8008e78 <__retarget_lock_release_recursive>
 8009d4e:	bf00      	nop
 8009d50:	200014b4 	.word	0x200014b4

08009d54 <_Balloc>:
 8009d54:	b570      	push	{r4, r5, r6, lr}
 8009d56:	69c6      	ldr	r6, [r0, #28]
 8009d58:	4604      	mov	r4, r0
 8009d5a:	460d      	mov	r5, r1
 8009d5c:	b976      	cbnz	r6, 8009d7c <_Balloc+0x28>
 8009d5e:	2010      	movs	r0, #16
 8009d60:	f7ff ff42 	bl	8009be8 <malloc>
 8009d64:	4602      	mov	r2, r0
 8009d66:	61e0      	str	r0, [r4, #28]
 8009d68:	b920      	cbnz	r0, 8009d74 <_Balloc+0x20>
 8009d6a:	216b      	movs	r1, #107	@ 0x6b
 8009d6c:	4b17      	ldr	r3, [pc, #92]	@ (8009dcc <_Balloc+0x78>)
 8009d6e:	4818      	ldr	r0, [pc, #96]	@ (8009dd0 <_Balloc+0x7c>)
 8009d70:	f000 fd9a 	bl	800a8a8 <__assert_func>
 8009d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d78:	6006      	str	r6, [r0, #0]
 8009d7a:	60c6      	str	r6, [r0, #12]
 8009d7c:	69e6      	ldr	r6, [r4, #28]
 8009d7e:	68f3      	ldr	r3, [r6, #12]
 8009d80:	b183      	cbz	r3, 8009da4 <_Balloc+0x50>
 8009d82:	69e3      	ldr	r3, [r4, #28]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d8a:	b9b8      	cbnz	r0, 8009dbc <_Balloc+0x68>
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	fa01 f605 	lsl.w	r6, r1, r5
 8009d92:	1d72      	adds	r2, r6, #5
 8009d94:	4620      	mov	r0, r4
 8009d96:	0092      	lsls	r2, r2, #2
 8009d98:	f000 fda4 	bl	800a8e4 <_calloc_r>
 8009d9c:	b160      	cbz	r0, 8009db8 <_Balloc+0x64>
 8009d9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009da2:	e00e      	b.n	8009dc2 <_Balloc+0x6e>
 8009da4:	2221      	movs	r2, #33	@ 0x21
 8009da6:	2104      	movs	r1, #4
 8009da8:	4620      	mov	r0, r4
 8009daa:	f000 fd9b 	bl	800a8e4 <_calloc_r>
 8009dae:	69e3      	ldr	r3, [r4, #28]
 8009db0:	60f0      	str	r0, [r6, #12]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1e4      	bne.n	8009d82 <_Balloc+0x2e>
 8009db8:	2000      	movs	r0, #0
 8009dba:	bd70      	pop	{r4, r5, r6, pc}
 8009dbc:	6802      	ldr	r2, [r0, #0]
 8009dbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009dc8:	e7f7      	b.n	8009dba <_Balloc+0x66>
 8009dca:	bf00      	nop
 8009dcc:	0800b03f 	.word	0x0800b03f
 8009dd0:	0800b0bf 	.word	0x0800b0bf

08009dd4 <_Bfree>:
 8009dd4:	b570      	push	{r4, r5, r6, lr}
 8009dd6:	69c6      	ldr	r6, [r0, #28]
 8009dd8:	4605      	mov	r5, r0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	b976      	cbnz	r6, 8009dfc <_Bfree+0x28>
 8009dde:	2010      	movs	r0, #16
 8009de0:	f7ff ff02 	bl	8009be8 <malloc>
 8009de4:	4602      	mov	r2, r0
 8009de6:	61e8      	str	r0, [r5, #28]
 8009de8:	b920      	cbnz	r0, 8009df4 <_Bfree+0x20>
 8009dea:	218f      	movs	r1, #143	@ 0x8f
 8009dec:	4b08      	ldr	r3, [pc, #32]	@ (8009e10 <_Bfree+0x3c>)
 8009dee:	4809      	ldr	r0, [pc, #36]	@ (8009e14 <_Bfree+0x40>)
 8009df0:	f000 fd5a 	bl	800a8a8 <__assert_func>
 8009df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009df8:	6006      	str	r6, [r0, #0]
 8009dfa:	60c6      	str	r6, [r0, #12]
 8009dfc:	b13c      	cbz	r4, 8009e0e <_Bfree+0x3a>
 8009dfe:	69eb      	ldr	r3, [r5, #28]
 8009e00:	6862      	ldr	r2, [r4, #4]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e08:	6021      	str	r1, [r4, #0]
 8009e0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e0e:	bd70      	pop	{r4, r5, r6, pc}
 8009e10:	0800b03f 	.word	0x0800b03f
 8009e14:	0800b0bf 	.word	0x0800b0bf

08009e18 <__multadd>:
 8009e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1c:	4607      	mov	r7, r0
 8009e1e:	460c      	mov	r4, r1
 8009e20:	461e      	mov	r6, r3
 8009e22:	2000      	movs	r0, #0
 8009e24:	690d      	ldr	r5, [r1, #16]
 8009e26:	f101 0c14 	add.w	ip, r1, #20
 8009e2a:	f8dc 3000 	ldr.w	r3, [ip]
 8009e2e:	3001      	adds	r0, #1
 8009e30:	b299      	uxth	r1, r3
 8009e32:	fb02 6101 	mla	r1, r2, r1, r6
 8009e36:	0c1e      	lsrs	r6, r3, #16
 8009e38:	0c0b      	lsrs	r3, r1, #16
 8009e3a:	fb02 3306 	mla	r3, r2, r6, r3
 8009e3e:	b289      	uxth	r1, r1
 8009e40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e44:	4285      	cmp	r5, r0
 8009e46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e4a:	f84c 1b04 	str.w	r1, [ip], #4
 8009e4e:	dcec      	bgt.n	8009e2a <__multadd+0x12>
 8009e50:	b30e      	cbz	r6, 8009e96 <__multadd+0x7e>
 8009e52:	68a3      	ldr	r3, [r4, #8]
 8009e54:	42ab      	cmp	r3, r5
 8009e56:	dc19      	bgt.n	8009e8c <__multadd+0x74>
 8009e58:	6861      	ldr	r1, [r4, #4]
 8009e5a:	4638      	mov	r0, r7
 8009e5c:	3101      	adds	r1, #1
 8009e5e:	f7ff ff79 	bl	8009d54 <_Balloc>
 8009e62:	4680      	mov	r8, r0
 8009e64:	b928      	cbnz	r0, 8009e72 <__multadd+0x5a>
 8009e66:	4602      	mov	r2, r0
 8009e68:	21ba      	movs	r1, #186	@ 0xba
 8009e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8009e9c <__multadd+0x84>)
 8009e6c:	480c      	ldr	r0, [pc, #48]	@ (8009ea0 <__multadd+0x88>)
 8009e6e:	f000 fd1b 	bl	800a8a8 <__assert_func>
 8009e72:	6922      	ldr	r2, [r4, #16]
 8009e74:	f104 010c 	add.w	r1, r4, #12
 8009e78:	3202      	adds	r2, #2
 8009e7a:	0092      	lsls	r2, r2, #2
 8009e7c:	300c      	adds	r0, #12
 8009e7e:	f7ff f80a 	bl	8008e96 <memcpy>
 8009e82:	4621      	mov	r1, r4
 8009e84:	4638      	mov	r0, r7
 8009e86:	f7ff ffa5 	bl	8009dd4 <_Bfree>
 8009e8a:	4644      	mov	r4, r8
 8009e8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e90:	3501      	adds	r5, #1
 8009e92:	615e      	str	r6, [r3, #20]
 8009e94:	6125      	str	r5, [r4, #16]
 8009e96:	4620      	mov	r0, r4
 8009e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e9c:	0800b0ae 	.word	0x0800b0ae
 8009ea0:	0800b0bf 	.word	0x0800b0bf

08009ea4 <__hi0bits>:
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009eaa:	bf3a      	itte	cc
 8009eac:	0403      	lslcc	r3, r0, #16
 8009eae:	2010      	movcc	r0, #16
 8009eb0:	2000      	movcs	r0, #0
 8009eb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009eb6:	bf3c      	itt	cc
 8009eb8:	021b      	lslcc	r3, r3, #8
 8009eba:	3008      	addcc	r0, #8
 8009ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ec0:	bf3c      	itt	cc
 8009ec2:	011b      	lslcc	r3, r3, #4
 8009ec4:	3004      	addcc	r0, #4
 8009ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eca:	bf3c      	itt	cc
 8009ecc:	009b      	lslcc	r3, r3, #2
 8009ece:	3002      	addcc	r0, #2
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	db05      	blt.n	8009ee0 <__hi0bits+0x3c>
 8009ed4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ed8:	f100 0001 	add.w	r0, r0, #1
 8009edc:	bf08      	it	eq
 8009ede:	2020      	moveq	r0, #32
 8009ee0:	4770      	bx	lr

08009ee2 <__lo0bits>:
 8009ee2:	6803      	ldr	r3, [r0, #0]
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	f013 0007 	ands.w	r0, r3, #7
 8009eea:	d00b      	beq.n	8009f04 <__lo0bits+0x22>
 8009eec:	07d9      	lsls	r1, r3, #31
 8009eee:	d421      	bmi.n	8009f34 <__lo0bits+0x52>
 8009ef0:	0798      	lsls	r0, r3, #30
 8009ef2:	bf49      	itett	mi
 8009ef4:	085b      	lsrmi	r3, r3, #1
 8009ef6:	089b      	lsrpl	r3, r3, #2
 8009ef8:	2001      	movmi	r0, #1
 8009efa:	6013      	strmi	r3, [r2, #0]
 8009efc:	bf5c      	itt	pl
 8009efe:	2002      	movpl	r0, #2
 8009f00:	6013      	strpl	r3, [r2, #0]
 8009f02:	4770      	bx	lr
 8009f04:	b299      	uxth	r1, r3
 8009f06:	b909      	cbnz	r1, 8009f0c <__lo0bits+0x2a>
 8009f08:	2010      	movs	r0, #16
 8009f0a:	0c1b      	lsrs	r3, r3, #16
 8009f0c:	b2d9      	uxtb	r1, r3
 8009f0e:	b909      	cbnz	r1, 8009f14 <__lo0bits+0x32>
 8009f10:	3008      	adds	r0, #8
 8009f12:	0a1b      	lsrs	r3, r3, #8
 8009f14:	0719      	lsls	r1, r3, #28
 8009f16:	bf04      	itt	eq
 8009f18:	091b      	lsreq	r3, r3, #4
 8009f1a:	3004      	addeq	r0, #4
 8009f1c:	0799      	lsls	r1, r3, #30
 8009f1e:	bf04      	itt	eq
 8009f20:	089b      	lsreq	r3, r3, #2
 8009f22:	3002      	addeq	r0, #2
 8009f24:	07d9      	lsls	r1, r3, #31
 8009f26:	d403      	bmi.n	8009f30 <__lo0bits+0x4e>
 8009f28:	085b      	lsrs	r3, r3, #1
 8009f2a:	f100 0001 	add.w	r0, r0, #1
 8009f2e:	d003      	beq.n	8009f38 <__lo0bits+0x56>
 8009f30:	6013      	str	r3, [r2, #0]
 8009f32:	4770      	bx	lr
 8009f34:	2000      	movs	r0, #0
 8009f36:	4770      	bx	lr
 8009f38:	2020      	movs	r0, #32
 8009f3a:	4770      	bx	lr

08009f3c <__i2b>:
 8009f3c:	b510      	push	{r4, lr}
 8009f3e:	460c      	mov	r4, r1
 8009f40:	2101      	movs	r1, #1
 8009f42:	f7ff ff07 	bl	8009d54 <_Balloc>
 8009f46:	4602      	mov	r2, r0
 8009f48:	b928      	cbnz	r0, 8009f56 <__i2b+0x1a>
 8009f4a:	f240 1145 	movw	r1, #325	@ 0x145
 8009f4e:	4b04      	ldr	r3, [pc, #16]	@ (8009f60 <__i2b+0x24>)
 8009f50:	4804      	ldr	r0, [pc, #16]	@ (8009f64 <__i2b+0x28>)
 8009f52:	f000 fca9 	bl	800a8a8 <__assert_func>
 8009f56:	2301      	movs	r3, #1
 8009f58:	6144      	str	r4, [r0, #20]
 8009f5a:	6103      	str	r3, [r0, #16]
 8009f5c:	bd10      	pop	{r4, pc}
 8009f5e:	bf00      	nop
 8009f60:	0800b0ae 	.word	0x0800b0ae
 8009f64:	0800b0bf 	.word	0x0800b0bf

08009f68 <__multiply>:
 8009f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6c:	4614      	mov	r4, r2
 8009f6e:	690a      	ldr	r2, [r1, #16]
 8009f70:	6923      	ldr	r3, [r4, #16]
 8009f72:	460f      	mov	r7, r1
 8009f74:	429a      	cmp	r2, r3
 8009f76:	bfa2      	ittt	ge
 8009f78:	4623      	movge	r3, r4
 8009f7a:	460c      	movge	r4, r1
 8009f7c:	461f      	movge	r7, r3
 8009f7e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009f82:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009f86:	68a3      	ldr	r3, [r4, #8]
 8009f88:	6861      	ldr	r1, [r4, #4]
 8009f8a:	eb0a 0609 	add.w	r6, sl, r9
 8009f8e:	42b3      	cmp	r3, r6
 8009f90:	b085      	sub	sp, #20
 8009f92:	bfb8      	it	lt
 8009f94:	3101      	addlt	r1, #1
 8009f96:	f7ff fedd 	bl	8009d54 <_Balloc>
 8009f9a:	b930      	cbnz	r0, 8009faa <__multiply+0x42>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009fa2:	4b43      	ldr	r3, [pc, #268]	@ (800a0b0 <__multiply+0x148>)
 8009fa4:	4843      	ldr	r0, [pc, #268]	@ (800a0b4 <__multiply+0x14c>)
 8009fa6:	f000 fc7f 	bl	800a8a8 <__assert_func>
 8009faa:	f100 0514 	add.w	r5, r0, #20
 8009fae:	462b      	mov	r3, r5
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fb6:	4543      	cmp	r3, r8
 8009fb8:	d321      	bcc.n	8009ffe <__multiply+0x96>
 8009fba:	f107 0114 	add.w	r1, r7, #20
 8009fbe:	f104 0214 	add.w	r2, r4, #20
 8009fc2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009fc6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009fca:	9302      	str	r3, [sp, #8]
 8009fcc:	1b13      	subs	r3, r2, r4
 8009fce:	3b15      	subs	r3, #21
 8009fd0:	f023 0303 	bic.w	r3, r3, #3
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	f104 0715 	add.w	r7, r4, #21
 8009fda:	42ba      	cmp	r2, r7
 8009fdc:	bf38      	it	cc
 8009fde:	2304      	movcc	r3, #4
 8009fe0:	9301      	str	r3, [sp, #4]
 8009fe2:	9b02      	ldr	r3, [sp, #8]
 8009fe4:	9103      	str	r1, [sp, #12]
 8009fe6:	428b      	cmp	r3, r1
 8009fe8:	d80c      	bhi.n	800a004 <__multiply+0x9c>
 8009fea:	2e00      	cmp	r6, #0
 8009fec:	dd03      	ble.n	8009ff6 <__multiply+0x8e>
 8009fee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d05a      	beq.n	800a0ac <__multiply+0x144>
 8009ff6:	6106      	str	r6, [r0, #16]
 8009ff8:	b005      	add	sp, #20
 8009ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffe:	f843 2b04 	str.w	r2, [r3], #4
 800a002:	e7d8      	b.n	8009fb6 <__multiply+0x4e>
 800a004:	f8b1 a000 	ldrh.w	sl, [r1]
 800a008:	f1ba 0f00 	cmp.w	sl, #0
 800a00c:	d023      	beq.n	800a056 <__multiply+0xee>
 800a00e:	46a9      	mov	r9, r5
 800a010:	f04f 0c00 	mov.w	ip, #0
 800a014:	f104 0e14 	add.w	lr, r4, #20
 800a018:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a01c:	f8d9 3000 	ldr.w	r3, [r9]
 800a020:	fa1f fb87 	uxth.w	fp, r7
 800a024:	b29b      	uxth	r3, r3
 800a026:	fb0a 330b 	mla	r3, sl, fp, r3
 800a02a:	4463      	add	r3, ip
 800a02c:	f8d9 c000 	ldr.w	ip, [r9]
 800a030:	0c3f      	lsrs	r7, r7, #16
 800a032:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a036:	fb0a c707 	mla	r7, sl, r7, ip
 800a03a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a03e:	b29b      	uxth	r3, r3
 800a040:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a044:	4572      	cmp	r2, lr
 800a046:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a04a:	f849 3b04 	str.w	r3, [r9], #4
 800a04e:	d8e3      	bhi.n	800a018 <__multiply+0xb0>
 800a050:	9b01      	ldr	r3, [sp, #4]
 800a052:	f845 c003 	str.w	ip, [r5, r3]
 800a056:	9b03      	ldr	r3, [sp, #12]
 800a058:	3104      	adds	r1, #4
 800a05a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a05e:	f1b9 0f00 	cmp.w	r9, #0
 800a062:	d021      	beq.n	800a0a8 <__multiply+0x140>
 800a064:	46ae      	mov	lr, r5
 800a066:	f04f 0a00 	mov.w	sl, #0
 800a06a:	682b      	ldr	r3, [r5, #0]
 800a06c:	f104 0c14 	add.w	ip, r4, #20
 800a070:	f8bc b000 	ldrh.w	fp, [ip]
 800a074:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	fb09 770b 	mla	r7, r9, fp, r7
 800a07e:	4457      	add	r7, sl
 800a080:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a084:	f84e 3b04 	str.w	r3, [lr], #4
 800a088:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a08c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a090:	f8be 3000 	ldrh.w	r3, [lr]
 800a094:	4562      	cmp	r2, ip
 800a096:	fb09 330a 	mla	r3, r9, sl, r3
 800a09a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a09e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0a2:	d8e5      	bhi.n	800a070 <__multiply+0x108>
 800a0a4:	9f01      	ldr	r7, [sp, #4]
 800a0a6:	51eb      	str	r3, [r5, r7]
 800a0a8:	3504      	adds	r5, #4
 800a0aa:	e79a      	b.n	8009fe2 <__multiply+0x7a>
 800a0ac:	3e01      	subs	r6, #1
 800a0ae:	e79c      	b.n	8009fea <__multiply+0x82>
 800a0b0:	0800b0ae 	.word	0x0800b0ae
 800a0b4:	0800b0bf 	.word	0x0800b0bf

0800a0b8 <__pow5mult>:
 800a0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0bc:	4615      	mov	r5, r2
 800a0be:	f012 0203 	ands.w	r2, r2, #3
 800a0c2:	4607      	mov	r7, r0
 800a0c4:	460e      	mov	r6, r1
 800a0c6:	d007      	beq.n	800a0d8 <__pow5mult+0x20>
 800a0c8:	4c25      	ldr	r4, [pc, #148]	@ (800a160 <__pow5mult+0xa8>)
 800a0ca:	3a01      	subs	r2, #1
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0d2:	f7ff fea1 	bl	8009e18 <__multadd>
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	10ad      	asrs	r5, r5, #2
 800a0da:	d03d      	beq.n	800a158 <__pow5mult+0xa0>
 800a0dc:	69fc      	ldr	r4, [r7, #28]
 800a0de:	b97c      	cbnz	r4, 800a100 <__pow5mult+0x48>
 800a0e0:	2010      	movs	r0, #16
 800a0e2:	f7ff fd81 	bl	8009be8 <malloc>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	61f8      	str	r0, [r7, #28]
 800a0ea:	b928      	cbnz	r0, 800a0f8 <__pow5mult+0x40>
 800a0ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a0f0:	4b1c      	ldr	r3, [pc, #112]	@ (800a164 <__pow5mult+0xac>)
 800a0f2:	481d      	ldr	r0, [pc, #116]	@ (800a168 <__pow5mult+0xb0>)
 800a0f4:	f000 fbd8 	bl	800a8a8 <__assert_func>
 800a0f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0fc:	6004      	str	r4, [r0, #0]
 800a0fe:	60c4      	str	r4, [r0, #12]
 800a100:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a104:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a108:	b94c      	cbnz	r4, 800a11e <__pow5mult+0x66>
 800a10a:	f240 2171 	movw	r1, #625	@ 0x271
 800a10e:	4638      	mov	r0, r7
 800a110:	f7ff ff14 	bl	8009f3c <__i2b>
 800a114:	2300      	movs	r3, #0
 800a116:	4604      	mov	r4, r0
 800a118:	f8c8 0008 	str.w	r0, [r8, #8]
 800a11c:	6003      	str	r3, [r0, #0]
 800a11e:	f04f 0900 	mov.w	r9, #0
 800a122:	07eb      	lsls	r3, r5, #31
 800a124:	d50a      	bpl.n	800a13c <__pow5mult+0x84>
 800a126:	4631      	mov	r1, r6
 800a128:	4622      	mov	r2, r4
 800a12a:	4638      	mov	r0, r7
 800a12c:	f7ff ff1c 	bl	8009f68 <__multiply>
 800a130:	4680      	mov	r8, r0
 800a132:	4631      	mov	r1, r6
 800a134:	4638      	mov	r0, r7
 800a136:	f7ff fe4d 	bl	8009dd4 <_Bfree>
 800a13a:	4646      	mov	r6, r8
 800a13c:	106d      	asrs	r5, r5, #1
 800a13e:	d00b      	beq.n	800a158 <__pow5mult+0xa0>
 800a140:	6820      	ldr	r0, [r4, #0]
 800a142:	b938      	cbnz	r0, 800a154 <__pow5mult+0x9c>
 800a144:	4622      	mov	r2, r4
 800a146:	4621      	mov	r1, r4
 800a148:	4638      	mov	r0, r7
 800a14a:	f7ff ff0d 	bl	8009f68 <__multiply>
 800a14e:	6020      	str	r0, [r4, #0]
 800a150:	f8c0 9000 	str.w	r9, [r0]
 800a154:	4604      	mov	r4, r0
 800a156:	e7e4      	b.n	800a122 <__pow5mult+0x6a>
 800a158:	4630      	mov	r0, r6
 800a15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a15e:	bf00      	nop
 800a160:	0800b118 	.word	0x0800b118
 800a164:	0800b03f 	.word	0x0800b03f
 800a168:	0800b0bf 	.word	0x0800b0bf

0800a16c <__lshift>:
 800a16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a170:	460c      	mov	r4, r1
 800a172:	4607      	mov	r7, r0
 800a174:	4691      	mov	r9, r2
 800a176:	6923      	ldr	r3, [r4, #16]
 800a178:	6849      	ldr	r1, [r1, #4]
 800a17a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a17e:	68a3      	ldr	r3, [r4, #8]
 800a180:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a184:	f108 0601 	add.w	r6, r8, #1
 800a188:	42b3      	cmp	r3, r6
 800a18a:	db0b      	blt.n	800a1a4 <__lshift+0x38>
 800a18c:	4638      	mov	r0, r7
 800a18e:	f7ff fde1 	bl	8009d54 <_Balloc>
 800a192:	4605      	mov	r5, r0
 800a194:	b948      	cbnz	r0, 800a1aa <__lshift+0x3e>
 800a196:	4602      	mov	r2, r0
 800a198:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a19c:	4b27      	ldr	r3, [pc, #156]	@ (800a23c <__lshift+0xd0>)
 800a19e:	4828      	ldr	r0, [pc, #160]	@ (800a240 <__lshift+0xd4>)
 800a1a0:	f000 fb82 	bl	800a8a8 <__assert_func>
 800a1a4:	3101      	adds	r1, #1
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	e7ee      	b.n	800a188 <__lshift+0x1c>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f100 0114 	add.w	r1, r0, #20
 800a1b0:	f100 0210 	add.w	r2, r0, #16
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	4553      	cmp	r3, sl
 800a1b8:	db33      	blt.n	800a222 <__lshift+0xb6>
 800a1ba:	6920      	ldr	r0, [r4, #16]
 800a1bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1c0:	f104 0314 	add.w	r3, r4, #20
 800a1c4:	f019 091f 	ands.w	r9, r9, #31
 800a1c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1d0:	d02b      	beq.n	800a22a <__lshift+0xbe>
 800a1d2:	468a      	mov	sl, r1
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f1c9 0e20 	rsb	lr, r9, #32
 800a1da:	6818      	ldr	r0, [r3, #0]
 800a1dc:	fa00 f009 	lsl.w	r0, r0, r9
 800a1e0:	4310      	orrs	r0, r2
 800a1e2:	f84a 0b04 	str.w	r0, [sl], #4
 800a1e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ea:	459c      	cmp	ip, r3
 800a1ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800a1f0:	d8f3      	bhi.n	800a1da <__lshift+0x6e>
 800a1f2:	ebac 0304 	sub.w	r3, ip, r4
 800a1f6:	3b15      	subs	r3, #21
 800a1f8:	f023 0303 	bic.w	r3, r3, #3
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	f104 0015 	add.w	r0, r4, #21
 800a202:	4584      	cmp	ip, r0
 800a204:	bf38      	it	cc
 800a206:	2304      	movcc	r3, #4
 800a208:	50ca      	str	r2, [r1, r3]
 800a20a:	b10a      	cbz	r2, 800a210 <__lshift+0xa4>
 800a20c:	f108 0602 	add.w	r6, r8, #2
 800a210:	3e01      	subs	r6, #1
 800a212:	4638      	mov	r0, r7
 800a214:	4621      	mov	r1, r4
 800a216:	612e      	str	r6, [r5, #16]
 800a218:	f7ff fddc 	bl	8009dd4 <_Bfree>
 800a21c:	4628      	mov	r0, r5
 800a21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a222:	f842 0f04 	str.w	r0, [r2, #4]!
 800a226:	3301      	adds	r3, #1
 800a228:	e7c5      	b.n	800a1b6 <__lshift+0x4a>
 800a22a:	3904      	subs	r1, #4
 800a22c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a230:	459c      	cmp	ip, r3
 800a232:	f841 2f04 	str.w	r2, [r1, #4]!
 800a236:	d8f9      	bhi.n	800a22c <__lshift+0xc0>
 800a238:	e7ea      	b.n	800a210 <__lshift+0xa4>
 800a23a:	bf00      	nop
 800a23c:	0800b0ae 	.word	0x0800b0ae
 800a240:	0800b0bf 	.word	0x0800b0bf

0800a244 <__mcmp>:
 800a244:	4603      	mov	r3, r0
 800a246:	690a      	ldr	r2, [r1, #16]
 800a248:	6900      	ldr	r0, [r0, #16]
 800a24a:	b530      	push	{r4, r5, lr}
 800a24c:	1a80      	subs	r0, r0, r2
 800a24e:	d10e      	bne.n	800a26e <__mcmp+0x2a>
 800a250:	3314      	adds	r3, #20
 800a252:	3114      	adds	r1, #20
 800a254:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a258:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a25c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a260:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a264:	4295      	cmp	r5, r2
 800a266:	d003      	beq.n	800a270 <__mcmp+0x2c>
 800a268:	d205      	bcs.n	800a276 <__mcmp+0x32>
 800a26a:	f04f 30ff 	mov.w	r0, #4294967295
 800a26e:	bd30      	pop	{r4, r5, pc}
 800a270:	42a3      	cmp	r3, r4
 800a272:	d3f3      	bcc.n	800a25c <__mcmp+0x18>
 800a274:	e7fb      	b.n	800a26e <__mcmp+0x2a>
 800a276:	2001      	movs	r0, #1
 800a278:	e7f9      	b.n	800a26e <__mcmp+0x2a>
	...

0800a27c <__mdiff>:
 800a27c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a280:	4689      	mov	r9, r1
 800a282:	4606      	mov	r6, r0
 800a284:	4611      	mov	r1, r2
 800a286:	4648      	mov	r0, r9
 800a288:	4614      	mov	r4, r2
 800a28a:	f7ff ffdb 	bl	800a244 <__mcmp>
 800a28e:	1e05      	subs	r5, r0, #0
 800a290:	d112      	bne.n	800a2b8 <__mdiff+0x3c>
 800a292:	4629      	mov	r1, r5
 800a294:	4630      	mov	r0, r6
 800a296:	f7ff fd5d 	bl	8009d54 <_Balloc>
 800a29a:	4602      	mov	r2, r0
 800a29c:	b928      	cbnz	r0, 800a2aa <__mdiff+0x2e>
 800a29e:	f240 2137 	movw	r1, #567	@ 0x237
 800a2a2:	4b3e      	ldr	r3, [pc, #248]	@ (800a39c <__mdiff+0x120>)
 800a2a4:	483e      	ldr	r0, [pc, #248]	@ (800a3a0 <__mdiff+0x124>)
 800a2a6:	f000 faff 	bl	800a8a8 <__assert_func>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2b0:	4610      	mov	r0, r2
 800a2b2:	b003      	add	sp, #12
 800a2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b8:	bfbc      	itt	lt
 800a2ba:	464b      	movlt	r3, r9
 800a2bc:	46a1      	movlt	r9, r4
 800a2be:	4630      	mov	r0, r6
 800a2c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a2c4:	bfba      	itte	lt
 800a2c6:	461c      	movlt	r4, r3
 800a2c8:	2501      	movlt	r5, #1
 800a2ca:	2500      	movge	r5, #0
 800a2cc:	f7ff fd42 	bl	8009d54 <_Balloc>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	b918      	cbnz	r0, 800a2dc <__mdiff+0x60>
 800a2d4:	f240 2145 	movw	r1, #581	@ 0x245
 800a2d8:	4b30      	ldr	r3, [pc, #192]	@ (800a39c <__mdiff+0x120>)
 800a2da:	e7e3      	b.n	800a2a4 <__mdiff+0x28>
 800a2dc:	f100 0b14 	add.w	fp, r0, #20
 800a2e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a2e4:	f109 0310 	add.w	r3, r9, #16
 800a2e8:	60c5      	str	r5, [r0, #12]
 800a2ea:	f04f 0c00 	mov.w	ip, #0
 800a2ee:	f109 0514 	add.w	r5, r9, #20
 800a2f2:	46d9      	mov	r9, fp
 800a2f4:	6926      	ldr	r6, [r4, #16]
 800a2f6:	f104 0e14 	add.w	lr, r4, #20
 800a2fa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a2fe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	9b01      	ldr	r3, [sp, #4]
 800a306:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a30a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a30e:	b281      	uxth	r1, r0
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	fa1f f38a 	uxth.w	r3, sl
 800a316:	1a5b      	subs	r3, r3, r1
 800a318:	0c00      	lsrs	r0, r0, #16
 800a31a:	4463      	add	r3, ip
 800a31c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a320:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a324:	b29b      	uxth	r3, r3
 800a326:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a32a:	4576      	cmp	r6, lr
 800a32c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a330:	f849 3b04 	str.w	r3, [r9], #4
 800a334:	d8e6      	bhi.n	800a304 <__mdiff+0x88>
 800a336:	1b33      	subs	r3, r6, r4
 800a338:	3b15      	subs	r3, #21
 800a33a:	f023 0303 	bic.w	r3, r3, #3
 800a33e:	3415      	adds	r4, #21
 800a340:	3304      	adds	r3, #4
 800a342:	42a6      	cmp	r6, r4
 800a344:	bf38      	it	cc
 800a346:	2304      	movcc	r3, #4
 800a348:	441d      	add	r5, r3
 800a34a:	445b      	add	r3, fp
 800a34c:	461e      	mov	r6, r3
 800a34e:	462c      	mov	r4, r5
 800a350:	4544      	cmp	r4, r8
 800a352:	d30e      	bcc.n	800a372 <__mdiff+0xf6>
 800a354:	f108 0103 	add.w	r1, r8, #3
 800a358:	1b49      	subs	r1, r1, r5
 800a35a:	f021 0103 	bic.w	r1, r1, #3
 800a35e:	3d03      	subs	r5, #3
 800a360:	45a8      	cmp	r8, r5
 800a362:	bf38      	it	cc
 800a364:	2100      	movcc	r1, #0
 800a366:	440b      	add	r3, r1
 800a368:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a36c:	b199      	cbz	r1, 800a396 <__mdiff+0x11a>
 800a36e:	6117      	str	r7, [r2, #16]
 800a370:	e79e      	b.n	800a2b0 <__mdiff+0x34>
 800a372:	46e6      	mov	lr, ip
 800a374:	f854 1b04 	ldr.w	r1, [r4], #4
 800a378:	fa1f fc81 	uxth.w	ip, r1
 800a37c:	44f4      	add	ip, lr
 800a37e:	0c08      	lsrs	r0, r1, #16
 800a380:	4471      	add	r1, lr
 800a382:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a386:	b289      	uxth	r1, r1
 800a388:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a38c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a390:	f846 1b04 	str.w	r1, [r6], #4
 800a394:	e7dc      	b.n	800a350 <__mdiff+0xd4>
 800a396:	3f01      	subs	r7, #1
 800a398:	e7e6      	b.n	800a368 <__mdiff+0xec>
 800a39a:	bf00      	nop
 800a39c:	0800b0ae 	.word	0x0800b0ae
 800a3a0:	0800b0bf 	.word	0x0800b0bf

0800a3a4 <__d2b>:
 800a3a4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a3a8:	2101      	movs	r1, #1
 800a3aa:	4690      	mov	r8, r2
 800a3ac:	4699      	mov	r9, r3
 800a3ae:	9e08      	ldr	r6, [sp, #32]
 800a3b0:	f7ff fcd0 	bl	8009d54 <_Balloc>
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	b930      	cbnz	r0, 800a3c6 <__d2b+0x22>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	f240 310f 	movw	r1, #783	@ 0x30f
 800a3be:	4b23      	ldr	r3, [pc, #140]	@ (800a44c <__d2b+0xa8>)
 800a3c0:	4823      	ldr	r0, [pc, #140]	@ (800a450 <__d2b+0xac>)
 800a3c2:	f000 fa71 	bl	800a8a8 <__assert_func>
 800a3c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a3ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3ce:	b10d      	cbz	r5, 800a3d4 <__d2b+0x30>
 800a3d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a3d4:	9301      	str	r3, [sp, #4]
 800a3d6:	f1b8 0300 	subs.w	r3, r8, #0
 800a3da:	d024      	beq.n	800a426 <__d2b+0x82>
 800a3dc:	4668      	mov	r0, sp
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	f7ff fd7f 	bl	8009ee2 <__lo0bits>
 800a3e4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a3e8:	b1d8      	cbz	r0, 800a422 <__d2b+0x7e>
 800a3ea:	f1c0 0320 	rsb	r3, r0, #32
 800a3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f2:	430b      	orrs	r3, r1
 800a3f4:	40c2      	lsrs	r2, r0
 800a3f6:	6163      	str	r3, [r4, #20]
 800a3f8:	9201      	str	r2, [sp, #4]
 800a3fa:	9b01      	ldr	r3, [sp, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	bf0c      	ite	eq
 800a400:	2201      	moveq	r2, #1
 800a402:	2202      	movne	r2, #2
 800a404:	61a3      	str	r3, [r4, #24]
 800a406:	6122      	str	r2, [r4, #16]
 800a408:	b1ad      	cbz	r5, 800a436 <__d2b+0x92>
 800a40a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a40e:	4405      	add	r5, r0
 800a410:	6035      	str	r5, [r6, #0]
 800a412:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a418:	6018      	str	r0, [r3, #0]
 800a41a:	4620      	mov	r0, r4
 800a41c:	b002      	add	sp, #8
 800a41e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a422:	6161      	str	r1, [r4, #20]
 800a424:	e7e9      	b.n	800a3fa <__d2b+0x56>
 800a426:	a801      	add	r0, sp, #4
 800a428:	f7ff fd5b 	bl	8009ee2 <__lo0bits>
 800a42c:	9b01      	ldr	r3, [sp, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	6163      	str	r3, [r4, #20]
 800a432:	3020      	adds	r0, #32
 800a434:	e7e7      	b.n	800a406 <__d2b+0x62>
 800a436:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a43a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a43e:	6030      	str	r0, [r6, #0]
 800a440:	6918      	ldr	r0, [r3, #16]
 800a442:	f7ff fd2f 	bl	8009ea4 <__hi0bits>
 800a446:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a44a:	e7e4      	b.n	800a416 <__d2b+0x72>
 800a44c:	0800b0ae 	.word	0x0800b0ae
 800a450:	0800b0bf 	.word	0x0800b0bf

0800a454 <__ssputs_r>:
 800a454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a458:	461f      	mov	r7, r3
 800a45a:	688e      	ldr	r6, [r1, #8]
 800a45c:	4682      	mov	sl, r0
 800a45e:	42be      	cmp	r6, r7
 800a460:	460c      	mov	r4, r1
 800a462:	4690      	mov	r8, r2
 800a464:	680b      	ldr	r3, [r1, #0]
 800a466:	d82d      	bhi.n	800a4c4 <__ssputs_r+0x70>
 800a468:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a46c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a470:	d026      	beq.n	800a4c0 <__ssputs_r+0x6c>
 800a472:	6965      	ldr	r5, [r4, #20]
 800a474:	6909      	ldr	r1, [r1, #16]
 800a476:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a47a:	eba3 0901 	sub.w	r9, r3, r1
 800a47e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a482:	1c7b      	adds	r3, r7, #1
 800a484:	444b      	add	r3, r9
 800a486:	106d      	asrs	r5, r5, #1
 800a488:	429d      	cmp	r5, r3
 800a48a:	bf38      	it	cc
 800a48c:	461d      	movcc	r5, r3
 800a48e:	0553      	lsls	r3, r2, #21
 800a490:	d527      	bpl.n	800a4e2 <__ssputs_r+0x8e>
 800a492:	4629      	mov	r1, r5
 800a494:	f7ff fbd2 	bl	8009c3c <_malloc_r>
 800a498:	4606      	mov	r6, r0
 800a49a:	b360      	cbz	r0, 800a4f6 <__ssputs_r+0xa2>
 800a49c:	464a      	mov	r2, r9
 800a49e:	6921      	ldr	r1, [r4, #16]
 800a4a0:	f7fe fcf9 	bl	8008e96 <memcpy>
 800a4a4:	89a3      	ldrh	r3, [r4, #12]
 800a4a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a4aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4ae:	81a3      	strh	r3, [r4, #12]
 800a4b0:	6126      	str	r6, [r4, #16]
 800a4b2:	444e      	add	r6, r9
 800a4b4:	6026      	str	r6, [r4, #0]
 800a4b6:	463e      	mov	r6, r7
 800a4b8:	6165      	str	r5, [r4, #20]
 800a4ba:	eba5 0509 	sub.w	r5, r5, r9
 800a4be:	60a5      	str	r5, [r4, #8]
 800a4c0:	42be      	cmp	r6, r7
 800a4c2:	d900      	bls.n	800a4c6 <__ssputs_r+0x72>
 800a4c4:	463e      	mov	r6, r7
 800a4c6:	4632      	mov	r2, r6
 800a4c8:	4641      	mov	r1, r8
 800a4ca:	6820      	ldr	r0, [r4, #0]
 800a4cc:	f000 f9c2 	bl	800a854 <memmove>
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	68a3      	ldr	r3, [r4, #8]
 800a4d4:	1b9b      	subs	r3, r3, r6
 800a4d6:	60a3      	str	r3, [r4, #8]
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	4433      	add	r3, r6
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e2:	462a      	mov	r2, r5
 800a4e4:	f000 fa24 	bl	800a930 <_realloc_r>
 800a4e8:	4606      	mov	r6, r0
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d1e0      	bne.n	800a4b0 <__ssputs_r+0x5c>
 800a4ee:	4650      	mov	r0, sl
 800a4f0:	6921      	ldr	r1, [r4, #16]
 800a4f2:	f7ff fb31 	bl	8009b58 <_free_r>
 800a4f6:	230c      	movs	r3, #12
 800a4f8:	f8ca 3000 	str.w	r3, [sl]
 800a4fc:	89a3      	ldrh	r3, [r4, #12]
 800a4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a506:	81a3      	strh	r3, [r4, #12]
 800a508:	e7e9      	b.n	800a4de <__ssputs_r+0x8a>
	...

0800a50c <_svfiprintf_r>:
 800a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a510:	4698      	mov	r8, r3
 800a512:	898b      	ldrh	r3, [r1, #12]
 800a514:	4607      	mov	r7, r0
 800a516:	061b      	lsls	r3, r3, #24
 800a518:	460d      	mov	r5, r1
 800a51a:	4614      	mov	r4, r2
 800a51c:	b09d      	sub	sp, #116	@ 0x74
 800a51e:	d510      	bpl.n	800a542 <_svfiprintf_r+0x36>
 800a520:	690b      	ldr	r3, [r1, #16]
 800a522:	b973      	cbnz	r3, 800a542 <_svfiprintf_r+0x36>
 800a524:	2140      	movs	r1, #64	@ 0x40
 800a526:	f7ff fb89 	bl	8009c3c <_malloc_r>
 800a52a:	6028      	str	r0, [r5, #0]
 800a52c:	6128      	str	r0, [r5, #16]
 800a52e:	b930      	cbnz	r0, 800a53e <_svfiprintf_r+0x32>
 800a530:	230c      	movs	r3, #12
 800a532:	603b      	str	r3, [r7, #0]
 800a534:	f04f 30ff 	mov.w	r0, #4294967295
 800a538:	b01d      	add	sp, #116	@ 0x74
 800a53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53e:	2340      	movs	r3, #64	@ 0x40
 800a540:	616b      	str	r3, [r5, #20]
 800a542:	2300      	movs	r3, #0
 800a544:	9309      	str	r3, [sp, #36]	@ 0x24
 800a546:	2320      	movs	r3, #32
 800a548:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a54c:	2330      	movs	r3, #48	@ 0x30
 800a54e:	f04f 0901 	mov.w	r9, #1
 800a552:	f8cd 800c 	str.w	r8, [sp, #12]
 800a556:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a6f0 <_svfiprintf_r+0x1e4>
 800a55a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a55e:	4623      	mov	r3, r4
 800a560:	469a      	mov	sl, r3
 800a562:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a566:	b10a      	cbz	r2, 800a56c <_svfiprintf_r+0x60>
 800a568:	2a25      	cmp	r2, #37	@ 0x25
 800a56a:	d1f9      	bne.n	800a560 <_svfiprintf_r+0x54>
 800a56c:	ebba 0b04 	subs.w	fp, sl, r4
 800a570:	d00b      	beq.n	800a58a <_svfiprintf_r+0x7e>
 800a572:	465b      	mov	r3, fp
 800a574:	4622      	mov	r2, r4
 800a576:	4629      	mov	r1, r5
 800a578:	4638      	mov	r0, r7
 800a57a:	f7ff ff6b 	bl	800a454 <__ssputs_r>
 800a57e:	3001      	adds	r0, #1
 800a580:	f000 80a7 	beq.w	800a6d2 <_svfiprintf_r+0x1c6>
 800a584:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a586:	445a      	add	r2, fp
 800a588:	9209      	str	r2, [sp, #36]	@ 0x24
 800a58a:	f89a 3000 	ldrb.w	r3, [sl]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f000 809f 	beq.w	800a6d2 <_svfiprintf_r+0x1c6>
 800a594:	2300      	movs	r3, #0
 800a596:	f04f 32ff 	mov.w	r2, #4294967295
 800a59a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a59e:	f10a 0a01 	add.w	sl, sl, #1
 800a5a2:	9304      	str	r3, [sp, #16]
 800a5a4:	9307      	str	r3, [sp, #28]
 800a5a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5ac:	4654      	mov	r4, sl
 800a5ae:	2205      	movs	r2, #5
 800a5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b4:	484e      	ldr	r0, [pc, #312]	@ (800a6f0 <_svfiprintf_r+0x1e4>)
 800a5b6:	f7fe fc60 	bl	8008e7a <memchr>
 800a5ba:	9a04      	ldr	r2, [sp, #16]
 800a5bc:	b9d8      	cbnz	r0, 800a5f6 <_svfiprintf_r+0xea>
 800a5be:	06d0      	lsls	r0, r2, #27
 800a5c0:	bf44      	itt	mi
 800a5c2:	2320      	movmi	r3, #32
 800a5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5c8:	0711      	lsls	r1, r2, #28
 800a5ca:	bf44      	itt	mi
 800a5cc:	232b      	movmi	r3, #43	@ 0x2b
 800a5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5d8:	d015      	beq.n	800a606 <_svfiprintf_r+0xfa>
 800a5da:	4654      	mov	r4, sl
 800a5dc:	2000      	movs	r0, #0
 800a5de:	f04f 0c0a 	mov.w	ip, #10
 800a5e2:	9a07      	ldr	r2, [sp, #28]
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5ea:	3b30      	subs	r3, #48	@ 0x30
 800a5ec:	2b09      	cmp	r3, #9
 800a5ee:	d94b      	bls.n	800a688 <_svfiprintf_r+0x17c>
 800a5f0:	b1b0      	cbz	r0, 800a620 <_svfiprintf_r+0x114>
 800a5f2:	9207      	str	r2, [sp, #28]
 800a5f4:	e014      	b.n	800a620 <_svfiprintf_r+0x114>
 800a5f6:	eba0 0308 	sub.w	r3, r0, r8
 800a5fa:	fa09 f303 	lsl.w	r3, r9, r3
 800a5fe:	4313      	orrs	r3, r2
 800a600:	46a2      	mov	sl, r4
 800a602:	9304      	str	r3, [sp, #16]
 800a604:	e7d2      	b.n	800a5ac <_svfiprintf_r+0xa0>
 800a606:	9b03      	ldr	r3, [sp, #12]
 800a608:	1d19      	adds	r1, r3, #4
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	9103      	str	r1, [sp, #12]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	bfbb      	ittet	lt
 800a612:	425b      	neglt	r3, r3
 800a614:	f042 0202 	orrlt.w	r2, r2, #2
 800a618:	9307      	strge	r3, [sp, #28]
 800a61a:	9307      	strlt	r3, [sp, #28]
 800a61c:	bfb8      	it	lt
 800a61e:	9204      	strlt	r2, [sp, #16]
 800a620:	7823      	ldrb	r3, [r4, #0]
 800a622:	2b2e      	cmp	r3, #46	@ 0x2e
 800a624:	d10a      	bne.n	800a63c <_svfiprintf_r+0x130>
 800a626:	7863      	ldrb	r3, [r4, #1]
 800a628:	2b2a      	cmp	r3, #42	@ 0x2a
 800a62a:	d132      	bne.n	800a692 <_svfiprintf_r+0x186>
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	3402      	adds	r4, #2
 800a630:	1d1a      	adds	r2, r3, #4
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	9203      	str	r2, [sp, #12]
 800a636:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a63a:	9305      	str	r3, [sp, #20]
 800a63c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a6f4 <_svfiprintf_r+0x1e8>
 800a640:	2203      	movs	r2, #3
 800a642:	4650      	mov	r0, sl
 800a644:	7821      	ldrb	r1, [r4, #0]
 800a646:	f7fe fc18 	bl	8008e7a <memchr>
 800a64a:	b138      	cbz	r0, 800a65c <_svfiprintf_r+0x150>
 800a64c:	2240      	movs	r2, #64	@ 0x40
 800a64e:	9b04      	ldr	r3, [sp, #16]
 800a650:	eba0 000a 	sub.w	r0, r0, sl
 800a654:	4082      	lsls	r2, r0
 800a656:	4313      	orrs	r3, r2
 800a658:	3401      	adds	r4, #1
 800a65a:	9304      	str	r3, [sp, #16]
 800a65c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a660:	2206      	movs	r2, #6
 800a662:	4825      	ldr	r0, [pc, #148]	@ (800a6f8 <_svfiprintf_r+0x1ec>)
 800a664:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a668:	f7fe fc07 	bl	8008e7a <memchr>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	d036      	beq.n	800a6de <_svfiprintf_r+0x1d2>
 800a670:	4b22      	ldr	r3, [pc, #136]	@ (800a6fc <_svfiprintf_r+0x1f0>)
 800a672:	bb1b      	cbnz	r3, 800a6bc <_svfiprintf_r+0x1b0>
 800a674:	9b03      	ldr	r3, [sp, #12]
 800a676:	3307      	adds	r3, #7
 800a678:	f023 0307 	bic.w	r3, r3, #7
 800a67c:	3308      	adds	r3, #8
 800a67e:	9303      	str	r3, [sp, #12]
 800a680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a682:	4433      	add	r3, r6
 800a684:	9309      	str	r3, [sp, #36]	@ 0x24
 800a686:	e76a      	b.n	800a55e <_svfiprintf_r+0x52>
 800a688:	460c      	mov	r4, r1
 800a68a:	2001      	movs	r0, #1
 800a68c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a690:	e7a8      	b.n	800a5e4 <_svfiprintf_r+0xd8>
 800a692:	2300      	movs	r3, #0
 800a694:	f04f 0c0a 	mov.w	ip, #10
 800a698:	4619      	mov	r1, r3
 800a69a:	3401      	adds	r4, #1
 800a69c:	9305      	str	r3, [sp, #20]
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6a4:	3a30      	subs	r2, #48	@ 0x30
 800a6a6:	2a09      	cmp	r2, #9
 800a6a8:	d903      	bls.n	800a6b2 <_svfiprintf_r+0x1a6>
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0c6      	beq.n	800a63c <_svfiprintf_r+0x130>
 800a6ae:	9105      	str	r1, [sp, #20]
 800a6b0:	e7c4      	b.n	800a63c <_svfiprintf_r+0x130>
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6ba:	e7f0      	b.n	800a69e <_svfiprintf_r+0x192>
 800a6bc:	ab03      	add	r3, sp, #12
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	462a      	mov	r2, r5
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a700 <_svfiprintf_r+0x1f4>)
 800a6c6:	a904      	add	r1, sp, #16
 800a6c8:	f7fd fe1e 	bl	8008308 <_printf_float>
 800a6cc:	1c42      	adds	r2, r0, #1
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	d1d6      	bne.n	800a680 <_svfiprintf_r+0x174>
 800a6d2:	89ab      	ldrh	r3, [r5, #12]
 800a6d4:	065b      	lsls	r3, r3, #25
 800a6d6:	f53f af2d 	bmi.w	800a534 <_svfiprintf_r+0x28>
 800a6da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6dc:	e72c      	b.n	800a538 <_svfiprintf_r+0x2c>
 800a6de:	ab03      	add	r3, sp, #12
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	462a      	mov	r2, r5
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	4b06      	ldr	r3, [pc, #24]	@ (800a700 <_svfiprintf_r+0x1f4>)
 800a6e8:	a904      	add	r1, sp, #16
 800a6ea:	f7fe f8ab 	bl	8008844 <_printf_i>
 800a6ee:	e7ed      	b.n	800a6cc <_svfiprintf_r+0x1c0>
 800a6f0:	0800b218 	.word	0x0800b218
 800a6f4:	0800b21e 	.word	0x0800b21e
 800a6f8:	0800b222 	.word	0x0800b222
 800a6fc:	08008309 	.word	0x08008309
 800a700:	0800a455 	.word	0x0800a455

0800a704 <__sflush_r>:
 800a704:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	0716      	lsls	r6, r2, #28
 800a70c:	4605      	mov	r5, r0
 800a70e:	460c      	mov	r4, r1
 800a710:	d454      	bmi.n	800a7bc <__sflush_r+0xb8>
 800a712:	684b      	ldr	r3, [r1, #4]
 800a714:	2b00      	cmp	r3, #0
 800a716:	dc02      	bgt.n	800a71e <__sflush_r+0x1a>
 800a718:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	dd48      	ble.n	800a7b0 <__sflush_r+0xac>
 800a71e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a720:	2e00      	cmp	r6, #0
 800a722:	d045      	beq.n	800a7b0 <__sflush_r+0xac>
 800a724:	2300      	movs	r3, #0
 800a726:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a72a:	682f      	ldr	r7, [r5, #0]
 800a72c:	6a21      	ldr	r1, [r4, #32]
 800a72e:	602b      	str	r3, [r5, #0]
 800a730:	d030      	beq.n	800a794 <__sflush_r+0x90>
 800a732:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a734:	89a3      	ldrh	r3, [r4, #12]
 800a736:	0759      	lsls	r1, r3, #29
 800a738:	d505      	bpl.n	800a746 <__sflush_r+0x42>
 800a73a:	6863      	ldr	r3, [r4, #4]
 800a73c:	1ad2      	subs	r2, r2, r3
 800a73e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a740:	b10b      	cbz	r3, 800a746 <__sflush_r+0x42>
 800a742:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a744:	1ad2      	subs	r2, r2, r3
 800a746:	2300      	movs	r3, #0
 800a748:	4628      	mov	r0, r5
 800a74a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a74c:	6a21      	ldr	r1, [r4, #32]
 800a74e:	47b0      	blx	r6
 800a750:	1c43      	adds	r3, r0, #1
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	d106      	bne.n	800a764 <__sflush_r+0x60>
 800a756:	6829      	ldr	r1, [r5, #0]
 800a758:	291d      	cmp	r1, #29
 800a75a:	d82b      	bhi.n	800a7b4 <__sflush_r+0xb0>
 800a75c:	4a28      	ldr	r2, [pc, #160]	@ (800a800 <__sflush_r+0xfc>)
 800a75e:	410a      	asrs	r2, r1
 800a760:	07d6      	lsls	r6, r2, #31
 800a762:	d427      	bmi.n	800a7b4 <__sflush_r+0xb0>
 800a764:	2200      	movs	r2, #0
 800a766:	6062      	str	r2, [r4, #4]
 800a768:	6922      	ldr	r2, [r4, #16]
 800a76a:	04d9      	lsls	r1, r3, #19
 800a76c:	6022      	str	r2, [r4, #0]
 800a76e:	d504      	bpl.n	800a77a <__sflush_r+0x76>
 800a770:	1c42      	adds	r2, r0, #1
 800a772:	d101      	bne.n	800a778 <__sflush_r+0x74>
 800a774:	682b      	ldr	r3, [r5, #0]
 800a776:	b903      	cbnz	r3, 800a77a <__sflush_r+0x76>
 800a778:	6560      	str	r0, [r4, #84]	@ 0x54
 800a77a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a77c:	602f      	str	r7, [r5, #0]
 800a77e:	b1b9      	cbz	r1, 800a7b0 <__sflush_r+0xac>
 800a780:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a784:	4299      	cmp	r1, r3
 800a786:	d002      	beq.n	800a78e <__sflush_r+0x8a>
 800a788:	4628      	mov	r0, r5
 800a78a:	f7ff f9e5 	bl	8009b58 <_free_r>
 800a78e:	2300      	movs	r3, #0
 800a790:	6363      	str	r3, [r4, #52]	@ 0x34
 800a792:	e00d      	b.n	800a7b0 <__sflush_r+0xac>
 800a794:	2301      	movs	r3, #1
 800a796:	4628      	mov	r0, r5
 800a798:	47b0      	blx	r6
 800a79a:	4602      	mov	r2, r0
 800a79c:	1c50      	adds	r0, r2, #1
 800a79e:	d1c9      	bne.n	800a734 <__sflush_r+0x30>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d0c6      	beq.n	800a734 <__sflush_r+0x30>
 800a7a6:	2b1d      	cmp	r3, #29
 800a7a8:	d001      	beq.n	800a7ae <__sflush_r+0xaa>
 800a7aa:	2b16      	cmp	r3, #22
 800a7ac:	d11d      	bne.n	800a7ea <__sflush_r+0xe6>
 800a7ae:	602f      	str	r7, [r5, #0]
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	e021      	b.n	800a7f8 <__sflush_r+0xf4>
 800a7b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7b8:	b21b      	sxth	r3, r3
 800a7ba:	e01a      	b.n	800a7f2 <__sflush_r+0xee>
 800a7bc:	690f      	ldr	r7, [r1, #16]
 800a7be:	2f00      	cmp	r7, #0
 800a7c0:	d0f6      	beq.n	800a7b0 <__sflush_r+0xac>
 800a7c2:	0793      	lsls	r3, r2, #30
 800a7c4:	bf18      	it	ne
 800a7c6:	2300      	movne	r3, #0
 800a7c8:	680e      	ldr	r6, [r1, #0]
 800a7ca:	bf08      	it	eq
 800a7cc:	694b      	ldreq	r3, [r1, #20]
 800a7ce:	1bf6      	subs	r6, r6, r7
 800a7d0:	600f      	str	r7, [r1, #0]
 800a7d2:	608b      	str	r3, [r1, #8]
 800a7d4:	2e00      	cmp	r6, #0
 800a7d6:	ddeb      	ble.n	800a7b0 <__sflush_r+0xac>
 800a7d8:	4633      	mov	r3, r6
 800a7da:	463a      	mov	r2, r7
 800a7dc:	4628      	mov	r0, r5
 800a7de:	6a21      	ldr	r1, [r4, #32]
 800a7e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a7e4:	47e0      	blx	ip
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	dc07      	bgt.n	800a7fa <__sflush_r+0xf6>
 800a7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f6:	81a3      	strh	r3, [r4, #12]
 800a7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7fa:	4407      	add	r7, r0
 800a7fc:	1a36      	subs	r6, r6, r0
 800a7fe:	e7e9      	b.n	800a7d4 <__sflush_r+0xd0>
 800a800:	dfbffffe 	.word	0xdfbffffe

0800a804 <_fflush_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	690b      	ldr	r3, [r1, #16]
 800a808:	4605      	mov	r5, r0
 800a80a:	460c      	mov	r4, r1
 800a80c:	b913      	cbnz	r3, 800a814 <_fflush_r+0x10>
 800a80e:	2500      	movs	r5, #0
 800a810:	4628      	mov	r0, r5
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	b118      	cbz	r0, 800a81e <_fflush_r+0x1a>
 800a816:	6a03      	ldr	r3, [r0, #32]
 800a818:	b90b      	cbnz	r3, 800a81e <_fflush_r+0x1a>
 800a81a:	f7fe f9bf 	bl	8008b9c <__sinit>
 800a81e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d0f3      	beq.n	800a80e <_fflush_r+0xa>
 800a826:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a828:	07d0      	lsls	r0, r2, #31
 800a82a:	d404      	bmi.n	800a836 <_fflush_r+0x32>
 800a82c:	0599      	lsls	r1, r3, #22
 800a82e:	d402      	bmi.n	800a836 <_fflush_r+0x32>
 800a830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a832:	f7fe fb20 	bl	8008e76 <__retarget_lock_acquire_recursive>
 800a836:	4628      	mov	r0, r5
 800a838:	4621      	mov	r1, r4
 800a83a:	f7ff ff63 	bl	800a704 <__sflush_r>
 800a83e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a840:	4605      	mov	r5, r0
 800a842:	07da      	lsls	r2, r3, #31
 800a844:	d4e4      	bmi.n	800a810 <_fflush_r+0xc>
 800a846:	89a3      	ldrh	r3, [r4, #12]
 800a848:	059b      	lsls	r3, r3, #22
 800a84a:	d4e1      	bmi.n	800a810 <_fflush_r+0xc>
 800a84c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a84e:	f7fe fb13 	bl	8008e78 <__retarget_lock_release_recursive>
 800a852:	e7dd      	b.n	800a810 <_fflush_r+0xc>

0800a854 <memmove>:
 800a854:	4288      	cmp	r0, r1
 800a856:	b510      	push	{r4, lr}
 800a858:	eb01 0402 	add.w	r4, r1, r2
 800a85c:	d902      	bls.n	800a864 <memmove+0x10>
 800a85e:	4284      	cmp	r4, r0
 800a860:	4623      	mov	r3, r4
 800a862:	d807      	bhi.n	800a874 <memmove+0x20>
 800a864:	1e43      	subs	r3, r0, #1
 800a866:	42a1      	cmp	r1, r4
 800a868:	d008      	beq.n	800a87c <memmove+0x28>
 800a86a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a86e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a872:	e7f8      	b.n	800a866 <memmove+0x12>
 800a874:	4601      	mov	r1, r0
 800a876:	4402      	add	r2, r0
 800a878:	428a      	cmp	r2, r1
 800a87a:	d100      	bne.n	800a87e <memmove+0x2a>
 800a87c:	bd10      	pop	{r4, pc}
 800a87e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a886:	e7f7      	b.n	800a878 <memmove+0x24>

0800a888 <_sbrk_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	2300      	movs	r3, #0
 800a88c:	4d05      	ldr	r5, [pc, #20]	@ (800a8a4 <_sbrk_r+0x1c>)
 800a88e:	4604      	mov	r4, r0
 800a890:	4608      	mov	r0, r1
 800a892:	602b      	str	r3, [r5, #0]
 800a894:	f7f7 f9c4 	bl	8001c20 <_sbrk>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d102      	bne.n	800a8a2 <_sbrk_r+0x1a>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	b103      	cbz	r3, 800a8a2 <_sbrk_r+0x1a>
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	200014b0 	.word	0x200014b0

0800a8a8 <__assert_func>:
 800a8a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8aa:	4614      	mov	r4, r2
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	4b09      	ldr	r3, [pc, #36]	@ (800a8d4 <__assert_func+0x2c>)
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68d8      	ldr	r0, [r3, #12]
 800a8b6:	b954      	cbnz	r4, 800a8ce <__assert_func+0x26>
 800a8b8:	4b07      	ldr	r3, [pc, #28]	@ (800a8d8 <__assert_func+0x30>)
 800a8ba:	461c      	mov	r4, r3
 800a8bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8c0:	9100      	str	r1, [sp, #0]
 800a8c2:	462b      	mov	r3, r5
 800a8c4:	4905      	ldr	r1, [pc, #20]	@ (800a8dc <__assert_func+0x34>)
 800a8c6:	f000 f86f 	bl	800a9a8 <fiprintf>
 800a8ca:	f000 f87f 	bl	800a9cc <abort>
 800a8ce:	4b04      	ldr	r3, [pc, #16]	@ (800a8e0 <__assert_func+0x38>)
 800a8d0:	e7f4      	b.n	800a8bc <__assert_func+0x14>
 800a8d2:	bf00      	nop
 800a8d4:	20000030 	.word	0x20000030
 800a8d8:	0800b26e 	.word	0x0800b26e
 800a8dc:	0800b240 	.word	0x0800b240
 800a8e0:	0800b233 	.word	0x0800b233

0800a8e4 <_calloc_r>:
 800a8e4:	b570      	push	{r4, r5, r6, lr}
 800a8e6:	fba1 5402 	umull	r5, r4, r1, r2
 800a8ea:	b93c      	cbnz	r4, 800a8fc <_calloc_r+0x18>
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	f7ff f9a5 	bl	8009c3c <_malloc_r>
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	b928      	cbnz	r0, 800a902 <_calloc_r+0x1e>
 800a8f6:	2600      	movs	r6, #0
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	bd70      	pop	{r4, r5, r6, pc}
 800a8fc:	220c      	movs	r2, #12
 800a8fe:	6002      	str	r2, [r0, #0]
 800a900:	e7f9      	b.n	800a8f6 <_calloc_r+0x12>
 800a902:	462a      	mov	r2, r5
 800a904:	4621      	mov	r1, r4
 800a906:	f7fe f9e2 	bl	8008cce <memset>
 800a90a:	e7f5      	b.n	800a8f8 <_calloc_r+0x14>

0800a90c <__ascii_mbtowc>:
 800a90c:	b082      	sub	sp, #8
 800a90e:	b901      	cbnz	r1, 800a912 <__ascii_mbtowc+0x6>
 800a910:	a901      	add	r1, sp, #4
 800a912:	b142      	cbz	r2, 800a926 <__ascii_mbtowc+0x1a>
 800a914:	b14b      	cbz	r3, 800a92a <__ascii_mbtowc+0x1e>
 800a916:	7813      	ldrb	r3, [r2, #0]
 800a918:	600b      	str	r3, [r1, #0]
 800a91a:	7812      	ldrb	r2, [r2, #0]
 800a91c:	1e10      	subs	r0, r2, #0
 800a91e:	bf18      	it	ne
 800a920:	2001      	movne	r0, #1
 800a922:	b002      	add	sp, #8
 800a924:	4770      	bx	lr
 800a926:	4610      	mov	r0, r2
 800a928:	e7fb      	b.n	800a922 <__ascii_mbtowc+0x16>
 800a92a:	f06f 0001 	mvn.w	r0, #1
 800a92e:	e7f8      	b.n	800a922 <__ascii_mbtowc+0x16>

0800a930 <_realloc_r>:
 800a930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a934:	4680      	mov	r8, r0
 800a936:	4615      	mov	r5, r2
 800a938:	460c      	mov	r4, r1
 800a93a:	b921      	cbnz	r1, 800a946 <_realloc_r+0x16>
 800a93c:	4611      	mov	r1, r2
 800a93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a942:	f7ff b97b 	b.w	8009c3c <_malloc_r>
 800a946:	b92a      	cbnz	r2, 800a954 <_realloc_r+0x24>
 800a948:	f7ff f906 	bl	8009b58 <_free_r>
 800a94c:	2400      	movs	r4, #0
 800a94e:	4620      	mov	r0, r4
 800a950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a954:	f000 f841 	bl	800a9da <_malloc_usable_size_r>
 800a958:	4285      	cmp	r5, r0
 800a95a:	4606      	mov	r6, r0
 800a95c:	d802      	bhi.n	800a964 <_realloc_r+0x34>
 800a95e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a962:	d8f4      	bhi.n	800a94e <_realloc_r+0x1e>
 800a964:	4629      	mov	r1, r5
 800a966:	4640      	mov	r0, r8
 800a968:	f7ff f968 	bl	8009c3c <_malloc_r>
 800a96c:	4607      	mov	r7, r0
 800a96e:	2800      	cmp	r0, #0
 800a970:	d0ec      	beq.n	800a94c <_realloc_r+0x1c>
 800a972:	42b5      	cmp	r5, r6
 800a974:	462a      	mov	r2, r5
 800a976:	4621      	mov	r1, r4
 800a978:	bf28      	it	cs
 800a97a:	4632      	movcs	r2, r6
 800a97c:	f7fe fa8b 	bl	8008e96 <memcpy>
 800a980:	4621      	mov	r1, r4
 800a982:	4640      	mov	r0, r8
 800a984:	f7ff f8e8 	bl	8009b58 <_free_r>
 800a988:	463c      	mov	r4, r7
 800a98a:	e7e0      	b.n	800a94e <_realloc_r+0x1e>

0800a98c <__ascii_wctomb>:
 800a98c:	4603      	mov	r3, r0
 800a98e:	4608      	mov	r0, r1
 800a990:	b141      	cbz	r1, 800a9a4 <__ascii_wctomb+0x18>
 800a992:	2aff      	cmp	r2, #255	@ 0xff
 800a994:	d904      	bls.n	800a9a0 <__ascii_wctomb+0x14>
 800a996:	228a      	movs	r2, #138	@ 0x8a
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	601a      	str	r2, [r3, #0]
 800a99e:	4770      	bx	lr
 800a9a0:	2001      	movs	r0, #1
 800a9a2:	700a      	strb	r2, [r1, #0]
 800a9a4:	4770      	bx	lr
	...

0800a9a8 <fiprintf>:
 800a9a8:	b40e      	push	{r1, r2, r3}
 800a9aa:	b503      	push	{r0, r1, lr}
 800a9ac:	4601      	mov	r1, r0
 800a9ae:	ab03      	add	r3, sp, #12
 800a9b0:	4805      	ldr	r0, [pc, #20]	@ (800a9c8 <fiprintf+0x20>)
 800a9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b6:	6800      	ldr	r0, [r0, #0]
 800a9b8:	9301      	str	r3, [sp, #4]
 800a9ba:	f000 f83d 	bl	800aa38 <_vfiprintf_r>
 800a9be:	b002      	add	sp, #8
 800a9c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9c4:	b003      	add	sp, #12
 800a9c6:	4770      	bx	lr
 800a9c8:	20000030 	.word	0x20000030

0800a9cc <abort>:
 800a9cc:	2006      	movs	r0, #6
 800a9ce:	b508      	push	{r3, lr}
 800a9d0:	f000 fa06 	bl	800ade0 <raise>
 800a9d4:	2001      	movs	r0, #1
 800a9d6:	f7f7 f8ae 	bl	8001b36 <_exit>

0800a9da <_malloc_usable_size_r>:
 800a9da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9de:	1f18      	subs	r0, r3, #4
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	bfbc      	itt	lt
 800a9e4:	580b      	ldrlt	r3, [r1, r0]
 800a9e6:	18c0      	addlt	r0, r0, r3
 800a9e8:	4770      	bx	lr

0800a9ea <__sfputc_r>:
 800a9ea:	6893      	ldr	r3, [r2, #8]
 800a9ec:	b410      	push	{r4}
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	6093      	str	r3, [r2, #8]
 800a9f4:	da07      	bge.n	800aa06 <__sfputc_r+0x1c>
 800a9f6:	6994      	ldr	r4, [r2, #24]
 800a9f8:	42a3      	cmp	r3, r4
 800a9fa:	db01      	blt.n	800aa00 <__sfputc_r+0x16>
 800a9fc:	290a      	cmp	r1, #10
 800a9fe:	d102      	bne.n	800aa06 <__sfputc_r+0x1c>
 800aa00:	bc10      	pop	{r4}
 800aa02:	f000 b931 	b.w	800ac68 <__swbuf_r>
 800aa06:	6813      	ldr	r3, [r2, #0]
 800aa08:	1c58      	adds	r0, r3, #1
 800aa0a:	6010      	str	r0, [r2, #0]
 800aa0c:	7019      	strb	r1, [r3, #0]
 800aa0e:	4608      	mov	r0, r1
 800aa10:	bc10      	pop	{r4}
 800aa12:	4770      	bx	lr

0800aa14 <__sfputs_r>:
 800aa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa16:	4606      	mov	r6, r0
 800aa18:	460f      	mov	r7, r1
 800aa1a:	4614      	mov	r4, r2
 800aa1c:	18d5      	adds	r5, r2, r3
 800aa1e:	42ac      	cmp	r4, r5
 800aa20:	d101      	bne.n	800aa26 <__sfputs_r+0x12>
 800aa22:	2000      	movs	r0, #0
 800aa24:	e007      	b.n	800aa36 <__sfputs_r+0x22>
 800aa26:	463a      	mov	r2, r7
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2e:	f7ff ffdc 	bl	800a9ea <__sfputc_r>
 800aa32:	1c43      	adds	r3, r0, #1
 800aa34:	d1f3      	bne.n	800aa1e <__sfputs_r+0xa>
 800aa36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa38 <_vfiprintf_r>:
 800aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	460d      	mov	r5, r1
 800aa3e:	4614      	mov	r4, r2
 800aa40:	4698      	mov	r8, r3
 800aa42:	4606      	mov	r6, r0
 800aa44:	b09d      	sub	sp, #116	@ 0x74
 800aa46:	b118      	cbz	r0, 800aa50 <_vfiprintf_r+0x18>
 800aa48:	6a03      	ldr	r3, [r0, #32]
 800aa4a:	b90b      	cbnz	r3, 800aa50 <_vfiprintf_r+0x18>
 800aa4c:	f7fe f8a6 	bl	8008b9c <__sinit>
 800aa50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa52:	07d9      	lsls	r1, r3, #31
 800aa54:	d405      	bmi.n	800aa62 <_vfiprintf_r+0x2a>
 800aa56:	89ab      	ldrh	r3, [r5, #12]
 800aa58:	059a      	lsls	r2, r3, #22
 800aa5a:	d402      	bmi.n	800aa62 <_vfiprintf_r+0x2a>
 800aa5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa5e:	f7fe fa0a 	bl	8008e76 <__retarget_lock_acquire_recursive>
 800aa62:	89ab      	ldrh	r3, [r5, #12]
 800aa64:	071b      	lsls	r3, r3, #28
 800aa66:	d501      	bpl.n	800aa6c <_vfiprintf_r+0x34>
 800aa68:	692b      	ldr	r3, [r5, #16]
 800aa6a:	b99b      	cbnz	r3, 800aa94 <_vfiprintf_r+0x5c>
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	4630      	mov	r0, r6
 800aa70:	f000 f938 	bl	800ace4 <__swsetup_r>
 800aa74:	b170      	cbz	r0, 800aa94 <_vfiprintf_r+0x5c>
 800aa76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa78:	07dc      	lsls	r4, r3, #31
 800aa7a:	d504      	bpl.n	800aa86 <_vfiprintf_r+0x4e>
 800aa7c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa80:	b01d      	add	sp, #116	@ 0x74
 800aa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa86:	89ab      	ldrh	r3, [r5, #12]
 800aa88:	0598      	lsls	r0, r3, #22
 800aa8a:	d4f7      	bmi.n	800aa7c <_vfiprintf_r+0x44>
 800aa8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa8e:	f7fe f9f3 	bl	8008e78 <__retarget_lock_release_recursive>
 800aa92:	e7f3      	b.n	800aa7c <_vfiprintf_r+0x44>
 800aa94:	2300      	movs	r3, #0
 800aa96:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa98:	2320      	movs	r3, #32
 800aa9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa9e:	2330      	movs	r3, #48	@ 0x30
 800aaa0:	f04f 0901 	mov.w	r9, #1
 800aaa4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaa8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ac54 <_vfiprintf_r+0x21c>
 800aaac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aab0:	4623      	mov	r3, r4
 800aab2:	469a      	mov	sl, r3
 800aab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aab8:	b10a      	cbz	r2, 800aabe <_vfiprintf_r+0x86>
 800aaba:	2a25      	cmp	r2, #37	@ 0x25
 800aabc:	d1f9      	bne.n	800aab2 <_vfiprintf_r+0x7a>
 800aabe:	ebba 0b04 	subs.w	fp, sl, r4
 800aac2:	d00b      	beq.n	800aadc <_vfiprintf_r+0xa4>
 800aac4:	465b      	mov	r3, fp
 800aac6:	4622      	mov	r2, r4
 800aac8:	4629      	mov	r1, r5
 800aaca:	4630      	mov	r0, r6
 800aacc:	f7ff ffa2 	bl	800aa14 <__sfputs_r>
 800aad0:	3001      	adds	r0, #1
 800aad2:	f000 80a7 	beq.w	800ac24 <_vfiprintf_r+0x1ec>
 800aad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aad8:	445a      	add	r2, fp
 800aada:	9209      	str	r2, [sp, #36]	@ 0x24
 800aadc:	f89a 3000 	ldrb.w	r3, [sl]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 809f 	beq.w	800ac24 <_vfiprintf_r+0x1ec>
 800aae6:	2300      	movs	r3, #0
 800aae8:	f04f 32ff 	mov.w	r2, #4294967295
 800aaec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaf0:	f10a 0a01 	add.w	sl, sl, #1
 800aaf4:	9304      	str	r3, [sp, #16]
 800aaf6:	9307      	str	r3, [sp, #28]
 800aaf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aafc:	931a      	str	r3, [sp, #104]	@ 0x68
 800aafe:	4654      	mov	r4, sl
 800ab00:	2205      	movs	r2, #5
 800ab02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab06:	4853      	ldr	r0, [pc, #332]	@ (800ac54 <_vfiprintf_r+0x21c>)
 800ab08:	f7fe f9b7 	bl	8008e7a <memchr>
 800ab0c:	9a04      	ldr	r2, [sp, #16]
 800ab0e:	b9d8      	cbnz	r0, 800ab48 <_vfiprintf_r+0x110>
 800ab10:	06d1      	lsls	r1, r2, #27
 800ab12:	bf44      	itt	mi
 800ab14:	2320      	movmi	r3, #32
 800ab16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab1a:	0713      	lsls	r3, r2, #28
 800ab1c:	bf44      	itt	mi
 800ab1e:	232b      	movmi	r3, #43	@ 0x2b
 800ab20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab24:	f89a 3000 	ldrb.w	r3, [sl]
 800ab28:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab2a:	d015      	beq.n	800ab58 <_vfiprintf_r+0x120>
 800ab2c:	4654      	mov	r4, sl
 800ab2e:	2000      	movs	r0, #0
 800ab30:	f04f 0c0a 	mov.w	ip, #10
 800ab34:	9a07      	ldr	r2, [sp, #28]
 800ab36:	4621      	mov	r1, r4
 800ab38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab3c:	3b30      	subs	r3, #48	@ 0x30
 800ab3e:	2b09      	cmp	r3, #9
 800ab40:	d94b      	bls.n	800abda <_vfiprintf_r+0x1a2>
 800ab42:	b1b0      	cbz	r0, 800ab72 <_vfiprintf_r+0x13a>
 800ab44:	9207      	str	r2, [sp, #28]
 800ab46:	e014      	b.n	800ab72 <_vfiprintf_r+0x13a>
 800ab48:	eba0 0308 	sub.w	r3, r0, r8
 800ab4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab50:	4313      	orrs	r3, r2
 800ab52:	46a2      	mov	sl, r4
 800ab54:	9304      	str	r3, [sp, #16]
 800ab56:	e7d2      	b.n	800aafe <_vfiprintf_r+0xc6>
 800ab58:	9b03      	ldr	r3, [sp, #12]
 800ab5a:	1d19      	adds	r1, r3, #4
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	9103      	str	r1, [sp, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	bfbb      	ittet	lt
 800ab64:	425b      	neglt	r3, r3
 800ab66:	f042 0202 	orrlt.w	r2, r2, #2
 800ab6a:	9307      	strge	r3, [sp, #28]
 800ab6c:	9307      	strlt	r3, [sp, #28]
 800ab6e:	bfb8      	it	lt
 800ab70:	9204      	strlt	r2, [sp, #16]
 800ab72:	7823      	ldrb	r3, [r4, #0]
 800ab74:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab76:	d10a      	bne.n	800ab8e <_vfiprintf_r+0x156>
 800ab78:	7863      	ldrb	r3, [r4, #1]
 800ab7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab7c:	d132      	bne.n	800abe4 <_vfiprintf_r+0x1ac>
 800ab7e:	9b03      	ldr	r3, [sp, #12]
 800ab80:	3402      	adds	r4, #2
 800ab82:	1d1a      	adds	r2, r3, #4
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	9203      	str	r2, [sp, #12]
 800ab88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab8c:	9305      	str	r3, [sp, #20]
 800ab8e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ac58 <_vfiprintf_r+0x220>
 800ab92:	2203      	movs	r2, #3
 800ab94:	4650      	mov	r0, sl
 800ab96:	7821      	ldrb	r1, [r4, #0]
 800ab98:	f7fe f96f 	bl	8008e7a <memchr>
 800ab9c:	b138      	cbz	r0, 800abae <_vfiprintf_r+0x176>
 800ab9e:	2240      	movs	r2, #64	@ 0x40
 800aba0:	9b04      	ldr	r3, [sp, #16]
 800aba2:	eba0 000a 	sub.w	r0, r0, sl
 800aba6:	4082      	lsls	r2, r0
 800aba8:	4313      	orrs	r3, r2
 800abaa:	3401      	adds	r4, #1
 800abac:	9304      	str	r3, [sp, #16]
 800abae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb2:	2206      	movs	r2, #6
 800abb4:	4829      	ldr	r0, [pc, #164]	@ (800ac5c <_vfiprintf_r+0x224>)
 800abb6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abba:	f7fe f95e 	bl	8008e7a <memchr>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d03f      	beq.n	800ac42 <_vfiprintf_r+0x20a>
 800abc2:	4b27      	ldr	r3, [pc, #156]	@ (800ac60 <_vfiprintf_r+0x228>)
 800abc4:	bb1b      	cbnz	r3, 800ac0e <_vfiprintf_r+0x1d6>
 800abc6:	9b03      	ldr	r3, [sp, #12]
 800abc8:	3307      	adds	r3, #7
 800abca:	f023 0307 	bic.w	r3, r3, #7
 800abce:	3308      	adds	r3, #8
 800abd0:	9303      	str	r3, [sp, #12]
 800abd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abd4:	443b      	add	r3, r7
 800abd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800abd8:	e76a      	b.n	800aab0 <_vfiprintf_r+0x78>
 800abda:	460c      	mov	r4, r1
 800abdc:	2001      	movs	r0, #1
 800abde:	fb0c 3202 	mla	r2, ip, r2, r3
 800abe2:	e7a8      	b.n	800ab36 <_vfiprintf_r+0xfe>
 800abe4:	2300      	movs	r3, #0
 800abe6:	f04f 0c0a 	mov.w	ip, #10
 800abea:	4619      	mov	r1, r3
 800abec:	3401      	adds	r4, #1
 800abee:	9305      	str	r3, [sp, #20]
 800abf0:	4620      	mov	r0, r4
 800abf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abf6:	3a30      	subs	r2, #48	@ 0x30
 800abf8:	2a09      	cmp	r2, #9
 800abfa:	d903      	bls.n	800ac04 <_vfiprintf_r+0x1cc>
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d0c6      	beq.n	800ab8e <_vfiprintf_r+0x156>
 800ac00:	9105      	str	r1, [sp, #20]
 800ac02:	e7c4      	b.n	800ab8e <_vfiprintf_r+0x156>
 800ac04:	4604      	mov	r4, r0
 800ac06:	2301      	movs	r3, #1
 800ac08:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac0c:	e7f0      	b.n	800abf0 <_vfiprintf_r+0x1b8>
 800ac0e:	ab03      	add	r3, sp, #12
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	462a      	mov	r2, r5
 800ac14:	4630      	mov	r0, r6
 800ac16:	4b13      	ldr	r3, [pc, #76]	@ (800ac64 <_vfiprintf_r+0x22c>)
 800ac18:	a904      	add	r1, sp, #16
 800ac1a:	f7fd fb75 	bl	8008308 <_printf_float>
 800ac1e:	4607      	mov	r7, r0
 800ac20:	1c78      	adds	r0, r7, #1
 800ac22:	d1d6      	bne.n	800abd2 <_vfiprintf_r+0x19a>
 800ac24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac26:	07d9      	lsls	r1, r3, #31
 800ac28:	d405      	bmi.n	800ac36 <_vfiprintf_r+0x1fe>
 800ac2a:	89ab      	ldrh	r3, [r5, #12]
 800ac2c:	059a      	lsls	r2, r3, #22
 800ac2e:	d402      	bmi.n	800ac36 <_vfiprintf_r+0x1fe>
 800ac30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac32:	f7fe f921 	bl	8008e78 <__retarget_lock_release_recursive>
 800ac36:	89ab      	ldrh	r3, [r5, #12]
 800ac38:	065b      	lsls	r3, r3, #25
 800ac3a:	f53f af1f 	bmi.w	800aa7c <_vfiprintf_r+0x44>
 800ac3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac40:	e71e      	b.n	800aa80 <_vfiprintf_r+0x48>
 800ac42:	ab03      	add	r3, sp, #12
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	462a      	mov	r2, r5
 800ac48:	4630      	mov	r0, r6
 800ac4a:	4b06      	ldr	r3, [pc, #24]	@ (800ac64 <_vfiprintf_r+0x22c>)
 800ac4c:	a904      	add	r1, sp, #16
 800ac4e:	f7fd fdf9 	bl	8008844 <_printf_i>
 800ac52:	e7e4      	b.n	800ac1e <_vfiprintf_r+0x1e6>
 800ac54:	0800b218 	.word	0x0800b218
 800ac58:	0800b21e 	.word	0x0800b21e
 800ac5c:	0800b222 	.word	0x0800b222
 800ac60:	08008309 	.word	0x08008309
 800ac64:	0800aa15 	.word	0x0800aa15

0800ac68 <__swbuf_r>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	460e      	mov	r6, r1
 800ac6c:	4614      	mov	r4, r2
 800ac6e:	4605      	mov	r5, r0
 800ac70:	b118      	cbz	r0, 800ac7a <__swbuf_r+0x12>
 800ac72:	6a03      	ldr	r3, [r0, #32]
 800ac74:	b90b      	cbnz	r3, 800ac7a <__swbuf_r+0x12>
 800ac76:	f7fd ff91 	bl	8008b9c <__sinit>
 800ac7a:	69a3      	ldr	r3, [r4, #24]
 800ac7c:	60a3      	str	r3, [r4, #8]
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	071a      	lsls	r2, r3, #28
 800ac82:	d501      	bpl.n	800ac88 <__swbuf_r+0x20>
 800ac84:	6923      	ldr	r3, [r4, #16]
 800ac86:	b943      	cbnz	r3, 800ac9a <__swbuf_r+0x32>
 800ac88:	4621      	mov	r1, r4
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	f000 f82a 	bl	800ace4 <__swsetup_r>
 800ac90:	b118      	cbz	r0, 800ac9a <__swbuf_r+0x32>
 800ac92:	f04f 37ff 	mov.w	r7, #4294967295
 800ac96:	4638      	mov	r0, r7
 800ac98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	6922      	ldr	r2, [r4, #16]
 800ac9e:	b2f6      	uxtb	r6, r6
 800aca0:	1a98      	subs	r0, r3, r2
 800aca2:	6963      	ldr	r3, [r4, #20]
 800aca4:	4637      	mov	r7, r6
 800aca6:	4283      	cmp	r3, r0
 800aca8:	dc05      	bgt.n	800acb6 <__swbuf_r+0x4e>
 800acaa:	4621      	mov	r1, r4
 800acac:	4628      	mov	r0, r5
 800acae:	f7ff fda9 	bl	800a804 <_fflush_r>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d1ed      	bne.n	800ac92 <__swbuf_r+0x2a>
 800acb6:	68a3      	ldr	r3, [r4, #8]
 800acb8:	3b01      	subs	r3, #1
 800acba:	60a3      	str	r3, [r4, #8]
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	1c5a      	adds	r2, r3, #1
 800acc0:	6022      	str	r2, [r4, #0]
 800acc2:	701e      	strb	r6, [r3, #0]
 800acc4:	6962      	ldr	r2, [r4, #20]
 800acc6:	1c43      	adds	r3, r0, #1
 800acc8:	429a      	cmp	r2, r3
 800acca:	d004      	beq.n	800acd6 <__swbuf_r+0x6e>
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	07db      	lsls	r3, r3, #31
 800acd0:	d5e1      	bpl.n	800ac96 <__swbuf_r+0x2e>
 800acd2:	2e0a      	cmp	r6, #10
 800acd4:	d1df      	bne.n	800ac96 <__swbuf_r+0x2e>
 800acd6:	4621      	mov	r1, r4
 800acd8:	4628      	mov	r0, r5
 800acda:	f7ff fd93 	bl	800a804 <_fflush_r>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d0d9      	beq.n	800ac96 <__swbuf_r+0x2e>
 800ace2:	e7d6      	b.n	800ac92 <__swbuf_r+0x2a>

0800ace4 <__swsetup_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4b29      	ldr	r3, [pc, #164]	@ (800ad8c <__swsetup_r+0xa8>)
 800ace8:	4605      	mov	r5, r0
 800acea:	6818      	ldr	r0, [r3, #0]
 800acec:	460c      	mov	r4, r1
 800acee:	b118      	cbz	r0, 800acf8 <__swsetup_r+0x14>
 800acf0:	6a03      	ldr	r3, [r0, #32]
 800acf2:	b90b      	cbnz	r3, 800acf8 <__swsetup_r+0x14>
 800acf4:	f7fd ff52 	bl	8008b9c <__sinit>
 800acf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acfc:	0719      	lsls	r1, r3, #28
 800acfe:	d422      	bmi.n	800ad46 <__swsetup_r+0x62>
 800ad00:	06da      	lsls	r2, r3, #27
 800ad02:	d407      	bmi.n	800ad14 <__swsetup_r+0x30>
 800ad04:	2209      	movs	r2, #9
 800ad06:	602a      	str	r2, [r5, #0]
 800ad08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad10:	81a3      	strh	r3, [r4, #12]
 800ad12:	e033      	b.n	800ad7c <__swsetup_r+0x98>
 800ad14:	0758      	lsls	r0, r3, #29
 800ad16:	d512      	bpl.n	800ad3e <__swsetup_r+0x5a>
 800ad18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad1a:	b141      	cbz	r1, 800ad2e <__swsetup_r+0x4a>
 800ad1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad20:	4299      	cmp	r1, r3
 800ad22:	d002      	beq.n	800ad2a <__swsetup_r+0x46>
 800ad24:	4628      	mov	r0, r5
 800ad26:	f7fe ff17 	bl	8009b58 <_free_r>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad2e:	89a3      	ldrh	r3, [r4, #12]
 800ad30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad34:	81a3      	strh	r3, [r4, #12]
 800ad36:	2300      	movs	r3, #0
 800ad38:	6063      	str	r3, [r4, #4]
 800ad3a:	6923      	ldr	r3, [r4, #16]
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	89a3      	ldrh	r3, [r4, #12]
 800ad40:	f043 0308 	orr.w	r3, r3, #8
 800ad44:	81a3      	strh	r3, [r4, #12]
 800ad46:	6923      	ldr	r3, [r4, #16]
 800ad48:	b94b      	cbnz	r3, 800ad5e <__swsetup_r+0x7a>
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad54:	d003      	beq.n	800ad5e <__swsetup_r+0x7a>
 800ad56:	4621      	mov	r1, r4
 800ad58:	4628      	mov	r0, r5
 800ad5a:	f000 f882 	bl	800ae62 <__smakebuf_r>
 800ad5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad62:	f013 0201 	ands.w	r2, r3, #1
 800ad66:	d00a      	beq.n	800ad7e <__swsetup_r+0x9a>
 800ad68:	2200      	movs	r2, #0
 800ad6a:	60a2      	str	r2, [r4, #8]
 800ad6c:	6962      	ldr	r2, [r4, #20]
 800ad6e:	4252      	negs	r2, r2
 800ad70:	61a2      	str	r2, [r4, #24]
 800ad72:	6922      	ldr	r2, [r4, #16]
 800ad74:	b942      	cbnz	r2, 800ad88 <__swsetup_r+0xa4>
 800ad76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad7a:	d1c5      	bne.n	800ad08 <__swsetup_r+0x24>
 800ad7c:	bd38      	pop	{r3, r4, r5, pc}
 800ad7e:	0799      	lsls	r1, r3, #30
 800ad80:	bf58      	it	pl
 800ad82:	6962      	ldrpl	r2, [r4, #20]
 800ad84:	60a2      	str	r2, [r4, #8]
 800ad86:	e7f4      	b.n	800ad72 <__swsetup_r+0x8e>
 800ad88:	2000      	movs	r0, #0
 800ad8a:	e7f7      	b.n	800ad7c <__swsetup_r+0x98>
 800ad8c:	20000030 	.word	0x20000030

0800ad90 <_raise_r>:
 800ad90:	291f      	cmp	r1, #31
 800ad92:	b538      	push	{r3, r4, r5, lr}
 800ad94:	4605      	mov	r5, r0
 800ad96:	460c      	mov	r4, r1
 800ad98:	d904      	bls.n	800ada4 <_raise_r+0x14>
 800ad9a:	2316      	movs	r3, #22
 800ad9c:	6003      	str	r3, [r0, #0]
 800ad9e:	f04f 30ff 	mov.w	r0, #4294967295
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ada6:	b112      	cbz	r2, 800adae <_raise_r+0x1e>
 800ada8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adac:	b94b      	cbnz	r3, 800adc2 <_raise_r+0x32>
 800adae:	4628      	mov	r0, r5
 800adb0:	f000 f830 	bl	800ae14 <_getpid_r>
 800adb4:	4622      	mov	r2, r4
 800adb6:	4601      	mov	r1, r0
 800adb8:	4628      	mov	r0, r5
 800adba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adbe:	f000 b817 	b.w	800adf0 <_kill_r>
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d00a      	beq.n	800addc <_raise_r+0x4c>
 800adc6:	1c59      	adds	r1, r3, #1
 800adc8:	d103      	bne.n	800add2 <_raise_r+0x42>
 800adca:	2316      	movs	r3, #22
 800adcc:	6003      	str	r3, [r0, #0]
 800adce:	2001      	movs	r0, #1
 800add0:	e7e7      	b.n	800ada2 <_raise_r+0x12>
 800add2:	2100      	movs	r1, #0
 800add4:	4620      	mov	r0, r4
 800add6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800adda:	4798      	blx	r3
 800addc:	2000      	movs	r0, #0
 800adde:	e7e0      	b.n	800ada2 <_raise_r+0x12>

0800ade0 <raise>:
 800ade0:	4b02      	ldr	r3, [pc, #8]	@ (800adec <raise+0xc>)
 800ade2:	4601      	mov	r1, r0
 800ade4:	6818      	ldr	r0, [r3, #0]
 800ade6:	f7ff bfd3 	b.w	800ad90 <_raise_r>
 800adea:	bf00      	nop
 800adec:	20000030 	.word	0x20000030

0800adf0 <_kill_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	2300      	movs	r3, #0
 800adf4:	4d06      	ldr	r5, [pc, #24]	@ (800ae10 <_kill_r+0x20>)
 800adf6:	4604      	mov	r4, r0
 800adf8:	4608      	mov	r0, r1
 800adfa:	4611      	mov	r1, r2
 800adfc:	602b      	str	r3, [r5, #0]
 800adfe:	f7f6 fe8a 	bl	8001b16 <_kill>
 800ae02:	1c43      	adds	r3, r0, #1
 800ae04:	d102      	bne.n	800ae0c <_kill_r+0x1c>
 800ae06:	682b      	ldr	r3, [r5, #0]
 800ae08:	b103      	cbz	r3, 800ae0c <_kill_r+0x1c>
 800ae0a:	6023      	str	r3, [r4, #0]
 800ae0c:	bd38      	pop	{r3, r4, r5, pc}
 800ae0e:	bf00      	nop
 800ae10:	200014b0 	.word	0x200014b0

0800ae14 <_getpid_r>:
 800ae14:	f7f6 be78 	b.w	8001b08 <_getpid>

0800ae18 <__swhatbuf_r>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae20:	4615      	mov	r5, r2
 800ae22:	2900      	cmp	r1, #0
 800ae24:	461e      	mov	r6, r3
 800ae26:	b096      	sub	sp, #88	@ 0x58
 800ae28:	da0c      	bge.n	800ae44 <__swhatbuf_r+0x2c>
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae32:	bf14      	ite	ne
 800ae34:	2340      	movne	r3, #64	@ 0x40
 800ae36:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	6031      	str	r1, [r6, #0]
 800ae3e:	602b      	str	r3, [r5, #0]
 800ae40:	b016      	add	sp, #88	@ 0x58
 800ae42:	bd70      	pop	{r4, r5, r6, pc}
 800ae44:	466a      	mov	r2, sp
 800ae46:	f000 f849 	bl	800aedc <_fstat_r>
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	dbed      	blt.n	800ae2a <__swhatbuf_r+0x12>
 800ae4e:	9901      	ldr	r1, [sp, #4]
 800ae50:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae54:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae58:	4259      	negs	r1, r3
 800ae5a:	4159      	adcs	r1, r3
 800ae5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae60:	e7eb      	b.n	800ae3a <__swhatbuf_r+0x22>

0800ae62 <__smakebuf_r>:
 800ae62:	898b      	ldrh	r3, [r1, #12]
 800ae64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae66:	079d      	lsls	r5, r3, #30
 800ae68:	4606      	mov	r6, r0
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	d507      	bpl.n	800ae7e <__smakebuf_r+0x1c>
 800ae6e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae72:	6023      	str	r3, [r4, #0]
 800ae74:	6123      	str	r3, [r4, #16]
 800ae76:	2301      	movs	r3, #1
 800ae78:	6163      	str	r3, [r4, #20]
 800ae7a:	b003      	add	sp, #12
 800ae7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae7e:	466a      	mov	r2, sp
 800ae80:	ab01      	add	r3, sp, #4
 800ae82:	f7ff ffc9 	bl	800ae18 <__swhatbuf_r>
 800ae86:	9f00      	ldr	r7, [sp, #0]
 800ae88:	4605      	mov	r5, r0
 800ae8a:	4639      	mov	r1, r7
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	f7fe fed5 	bl	8009c3c <_malloc_r>
 800ae92:	b948      	cbnz	r0, 800aea8 <__smakebuf_r+0x46>
 800ae94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae98:	059a      	lsls	r2, r3, #22
 800ae9a:	d4ee      	bmi.n	800ae7a <__smakebuf_r+0x18>
 800ae9c:	f023 0303 	bic.w	r3, r3, #3
 800aea0:	f043 0302 	orr.w	r3, r3, #2
 800aea4:	81a3      	strh	r3, [r4, #12]
 800aea6:	e7e2      	b.n	800ae6e <__smakebuf_r+0xc>
 800aea8:	89a3      	ldrh	r3, [r4, #12]
 800aeaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aeae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	9b01      	ldr	r3, [sp, #4]
 800aeb6:	6020      	str	r0, [r4, #0]
 800aeb8:	b15b      	cbz	r3, 800aed2 <__smakebuf_r+0x70>
 800aeba:	4630      	mov	r0, r6
 800aebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aec0:	f000 f81e 	bl	800af00 <_isatty_r>
 800aec4:	b128      	cbz	r0, 800aed2 <__smakebuf_r+0x70>
 800aec6:	89a3      	ldrh	r3, [r4, #12]
 800aec8:	f023 0303 	bic.w	r3, r3, #3
 800aecc:	f043 0301 	orr.w	r3, r3, #1
 800aed0:	81a3      	strh	r3, [r4, #12]
 800aed2:	89a3      	ldrh	r3, [r4, #12]
 800aed4:	431d      	orrs	r5, r3
 800aed6:	81a5      	strh	r5, [r4, #12]
 800aed8:	e7cf      	b.n	800ae7a <__smakebuf_r+0x18>
	...

0800aedc <_fstat_r>:
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	2300      	movs	r3, #0
 800aee0:	4d06      	ldr	r5, [pc, #24]	@ (800aefc <_fstat_r+0x20>)
 800aee2:	4604      	mov	r4, r0
 800aee4:	4608      	mov	r0, r1
 800aee6:	4611      	mov	r1, r2
 800aee8:	602b      	str	r3, [r5, #0]
 800aeea:	f7f6 fe73 	bl	8001bd4 <_fstat>
 800aeee:	1c43      	adds	r3, r0, #1
 800aef0:	d102      	bne.n	800aef8 <_fstat_r+0x1c>
 800aef2:	682b      	ldr	r3, [r5, #0]
 800aef4:	b103      	cbz	r3, 800aef8 <_fstat_r+0x1c>
 800aef6:	6023      	str	r3, [r4, #0]
 800aef8:	bd38      	pop	{r3, r4, r5, pc}
 800aefa:	bf00      	nop
 800aefc:	200014b0 	.word	0x200014b0

0800af00 <_isatty_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	2300      	movs	r3, #0
 800af04:	4d05      	ldr	r5, [pc, #20]	@ (800af1c <_isatty_r+0x1c>)
 800af06:	4604      	mov	r4, r0
 800af08:	4608      	mov	r0, r1
 800af0a:	602b      	str	r3, [r5, #0]
 800af0c:	f7f6 fe71 	bl	8001bf2 <_isatty>
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d102      	bne.n	800af1a <_isatty_r+0x1a>
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	b103      	cbz	r3, 800af1a <_isatty_r+0x1a>
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	bd38      	pop	{r3, r4, r5, pc}
 800af1c:	200014b0 	.word	0x200014b0

0800af20 <_init>:
 800af20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af22:	bf00      	nop
 800af24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af26:	bc08      	pop	{r3}
 800af28:	469e      	mov	lr, r3
 800af2a:	4770      	bx	lr

0800af2c <_fini>:
 800af2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2e:	bf00      	nop
 800af30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af32:	bc08      	pop	{r3}
 800af34:	469e      	mov	lr, r3
 800af36:	4770      	bx	lr
